{
    "openapi": "3.0.0",
    "servers": [
        {
            "url": "https://comprehend.amazonaws.com/"
        },
        {
            "url": "http://comprehend.amazonaws.com/"
        }
    ],
    "x-hasEquivalentPaths": true,
    "info": {
        "contact": {
            "email": "mike.ralphson@gmail.com",
            "name": "Mike Ralphson",
            "url": "https://github.com/mermade/aws2openapi",
            "x-twitter": "PermittedSoc"
        },
        "description": "Amazon Comprehend is an AWS service for gaining insight into the content of documents. Use these actions to determine the topics contained in your documents, the topics they discuss, the predominant sentiment expressed in them, the predominant language used, and more.",
        "license": {
            "name": "Apache 2.0 License",
            "url": "http://www.apache.org/licenses/"
        },
        "termsOfService": "https://aws.amazon.com/service-terms/",
        "title": "Amazon Comprehend",
        "version": "2017-11-27",
        "x-apiClientRegistration": {
            "url": "https://portal.aws.amazon.com/gp/aws/developer/registration/index.html?nc2=h_ct"
        },
        "x-apisguru-categories": [
            "cloud"
        ],
        "x-logo": {
            "backgroundColor": "#FFFFFF",
            "url": "https://api.apis.guru/v2/cache/logo/https_twitter.com_awscloud_profile_image.jpeg"
        },
        "x-origin": [
            {
                "contentType": "application/json",
                "converter": {
                    "url": "https://github.com/mermade/aws2openapi",
                    "version": "1.0.0"
                },
                "url": "https://raw.githubusercontent.com/aws/aws-sdk-js/master/apis/comprehend-2017-11-27.normal.json",
                "x-apisguru-direct": true
            }
        ],
        "x-preferred": true,
        "x-providerName": "amazonaws.com",
        "x-release": "v4",
        "x-serviceName": "comprehend"
    },
    "externalDocs": {
        "description": "Amazon Web Services documentation",
        "url": "https://aws.amazon.com/comprehend/"
    },
    "security": [
        {
            "hmac": []
        }
    ],
    "paths": {
        "/": {
            "parameters": [
                {
                    "in": "query",
                    "name": "Action",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "query",
                    "name": "Version",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Content-Sha256",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Date",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Algorithm",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Credential",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Security-Token",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Signature",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-SignedHeaders",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                }
            ],
            "post": {
                "description": "Determines the dominant language of the input text for a batch of documents. For a list of languages that Amazon Comprehend can detect, see <a href=\"http://docs.aws.amazon.com/comprehend/latest/dg/how-languages.html\">Amazon Comprehend Supported Languages</a>. ",
                "operationId": "BatchDetectDominantLanguage",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "ErrorList": {
                                            "description": "A list containing one object for each document that contained an error. The results are sorted in ascending order by the <code>Index</code> field and match the order of the documents in the input list. If there are no errors in the batch, the <code>ErrorList</code> is empty.",
                                            "items": {
                                                "description": "Describes an error that occurred while processing a document in a batch. The operation returns on <code>BatchItemError</code> object for each document that contained an error.",
                                                "properties": {
                                                    "ErrorCode": {
                                                        "description": "The numeric error code of the error.",
                                                        "minLength": 1,
                                                        "type": "string"
                                                    },
                                                    "ErrorMessage": {
                                                        "description": "A text description of the error.",
                                                        "minLength": 1,
                                                        "type": "string"
                                                    },
                                                    "Index": {
                                                        "description": "The zero-based index of the document in the input list.",
                                                        "type": "integer"
                                                    }
                                                },
                                                "type": "object"
                                            },
                                            "type": "array"
                                        },
                                        "ResultList": {
                                            "description": "A list of objects containing the results of the operation. The results are sorted in ascending order by the <code>Index</code> field and match the order of the documents in the input list. If all of the documents contain an error, the <code>ResultList</code> is empty.",
                                            "items": {
                                                "description": "The result of calling the operation. The operation returns one object for each document that is successfully processed by the operation.",
                                                "properties": {
                                                    "Index": {
                                                        "description": "The zero-based index of the document in the input list.",
                                                        "type": "integer"
                                                    },
                                                    "Languages": {
                                                        "description": "One or more <a>DominantLanguage</a> objects describing the dominant languages in the document.",
                                                        "items": {
                                                            "description": "Returns the code for the dominant language in the input text and the level of confidence that Amazon Comprehend has in the accuracy of the detection.",
                                                            "properties": {
                                                                "LanguageCode": {
                                                                    "description": "The RFC 5646 language code for the dominant language. For more information about RFC 5646, see <a href=\"https://tools.ietf.org/html/rfc5646\">Tags for Identifying Languages</a> on the <i>IETF Tools</i> web site.",
                                                                    "minLength": 1,
                                                                    "type": "string"
                                                                },
                                                                "Score": {
                                                                    "description": "The level of confidence that Amazon Comprehend has in the accuracy of the detection.",
                                                                    "format": "float",
                                                                    "type": "number"
                                                                }
                                                            },
                                                            "type": "object"
                                                        },
                                                        "type": "array"
                                                    }
                                                },
                                                "type": "object"
                                            },
                                            "type": "array"
                                        }
                                    },
                                    "required": [
                                        "ResultList",
                                        "ErrorList"
                                    ],
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "480": {
                        "description": "InvalidRequestException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "TextSizeLimitExceededException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "482": {
                        "description": "BatchSizeLimitExceededException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "483": {
                        "description": "InternalServerException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "TextList": {
                                        "description": "A list containing the text of the input documents. The list can contain a maximum of 25 documents. Each document should contain at least 20 characters and must contain fewer than 5,000 bytes of UTF-8 encoded characters.",
                                        "items": {
                                            "minLength": 1,
                                            "type": "string"
                                        },
                                        "type": "array"
                                    }
                                },
                                "required": [
                                    "TextList"
                                ],
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            }
        },
        "/#BatchDetectEntities": {
            "parameters": [
                {
                    "in": "query",
                    "name": "Action",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "query",
                    "name": "Version",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Content-Sha256",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Date",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Algorithm",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Credential",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Security-Token",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Signature",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-SignedHeaders",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                }
            ],
            "post": {
                "description": "Inspects the text of a batch of documents for named entities and returns information about them. For more information about named entities, see <a>how-entities</a> ",
                "operationId": "BatchDetectEntities",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "ErrorList": {
                                            "description": "A list containing one object for each document that contained an error. The results are sorted in ascending order by the <code>Index</code> field and match the order of the documents in the input list. If there are no errors in the batch, the <code>ErrorList</code> is empty.",
                                            "items": {
                                                "description": "Describes an error that occurred while processing a document in a batch. The operation returns on <code>BatchItemError</code> object for each document that contained an error.",
                                                "properties": {
                                                    "ErrorCode": {
                                                        "description": "The numeric error code of the error.",
                                                        "minLength": 1,
                                                        "type": "string"
                                                    },
                                                    "ErrorMessage": {
                                                        "description": "A text description of the error.",
                                                        "minLength": 1,
                                                        "type": "string"
                                                    },
                                                    "Index": {
                                                        "description": "The zero-based index of the document in the input list.",
                                                        "type": "integer"
                                                    }
                                                },
                                                "type": "object"
                                            },
                                            "type": "array"
                                        },
                                        "ResultList": {
                                            "description": "A list of objects containing the results of the operation. The results are sorted in ascending order by the <code>Index</code> field and match the order of the documents in the input list. If all of the documents contain an error, the <code>ResultList</code> is empty.",
                                            "items": {
                                                "description": "The result of calling the operation. The operation returns one object for each document that is successfully processed by the operation.",
                                                "properties": {
                                                    "Entities": {
                                                        "description": "One or more <a>Entity</a> objects, one for each entity detected in the document.",
                                                        "items": {
                                                            "description": "<p>Provides information about an entity. </p> <p> </p>",
                                                            "properties": {
                                                                "BeginOffset": {
                                                                    "description": "A character offset in the input text that shows where the entity begins (the first character is at position 0). The offset returns the position of each UTF-8 code point in the string. A <i>code point</i> is the abstract character from a particular graphical representation. For example, a multi-byte UTF-8 character maps to a single code point.",
                                                                    "type": "integer"
                                                                },
                                                                "EndOffset": {
                                                                    "description": "A character offset in the input text that shows where the entity ends. The offset returns the position of each UTF-8 code point in the string. A <i>code point</i> is the abstract character from a particular graphical representation. For example, a multi-byte UTF-8 character maps to a single code point. ",
                                                                    "type": "integer"
                                                                },
                                                                "Score": {
                                                                    "description": "The level of confidence that Amazon Comprehend has in the accuracy of the detection.",
                                                                    "format": "float",
                                                                    "type": "number"
                                                                },
                                                                "Text": {
                                                                    "description": "The text of the entity.",
                                                                    "minLength": 1,
                                                                    "type": "string"
                                                                },
                                                                "Type": {
                                                                    "description": "The entity's type.",
                                                                    "enum": [
                                                                        "PERSON",
                                                                        "LOCATION",
                                                                        "ORGANIZATION",
                                                                        "COMMERCIAL_ITEM",
                                                                        "EVENT",
                                                                        "DATE",
                                                                        "QUANTITY",
                                                                        "TITLE",
                                                                        "OTHER"
                                                                    ],
                                                                    "type": "string"
                                                                }
                                                            },
                                                            "type": "object"
                                                        },
                                                        "type": "array"
                                                    },
                                                    "Index": {
                                                        "description": "The zero-based index of the document in the input list.",
                                                        "type": "integer"
                                                    }
                                                },
                                                "type": "object"
                                            },
                                            "type": "array"
                                        }
                                    },
                                    "required": [
                                        "ResultList",
                                        "ErrorList"
                                    ],
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "480": {
                        "description": "InvalidRequestException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "TextSizeLimitExceededException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "482": {
                        "description": "UnsupportedLanguageException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "483": {
                        "description": "BatchSizeLimitExceededException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "484": {
                        "description": "InternalServerException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "LanguageCode": {
                                        "description": "The language of the input documents. You can specify English (\"en\") or Spanish (\"es\"). All documents must be in the same language.",
                                        "enum": [
                                            "en",
                                            "es",
                                            "fr",
                                            "de",
                                            "it",
                                            "pt"
                                        ],
                                        "type": "string"
                                    },
                                    "TextList": {
                                        "description": "A list containing the text of the input documents. The list can contain a maximum of 25 documents. Each document must contain fewer than 5,000 bytes of UTF-8 encoded characters.",
                                        "items": {
                                            "minLength": 1,
                                            "type": "string"
                                        },
                                        "type": "array"
                                    }
                                },
                                "required": [
                                    "TextList",
                                    "LanguageCode"
                                ],
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            }
        },
        "/#BatchDetectKeyPhrases": {
            "parameters": [
                {
                    "in": "query",
                    "name": "Action",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "query",
                    "name": "Version",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Content-Sha256",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Date",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Algorithm",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Credential",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Security-Token",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Signature",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-SignedHeaders",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                }
            ],
            "post": {
                "description": "Detects the key noun phrases found in a batch of documents.",
                "operationId": "BatchDetectKeyPhrases",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "ErrorList": {
                                            "description": "A list containing one object for each document that contained an error. The results are sorted in ascending order by the <code>Index</code> field and match the order of the documents in the input list. If there are no errors in the batch, the <code>ErrorList</code> is empty.",
                                            "items": {
                                                "description": "Describes an error that occurred while processing a document in a batch. The operation returns on <code>BatchItemError</code> object for each document that contained an error.",
                                                "properties": {
                                                    "ErrorCode": {
                                                        "description": "The numeric error code of the error.",
                                                        "minLength": 1,
                                                        "type": "string"
                                                    },
                                                    "ErrorMessage": {
                                                        "description": "A text description of the error.",
                                                        "minLength": 1,
                                                        "type": "string"
                                                    },
                                                    "Index": {
                                                        "description": "The zero-based index of the document in the input list.",
                                                        "type": "integer"
                                                    }
                                                },
                                                "type": "object"
                                            },
                                            "type": "array"
                                        },
                                        "ResultList": {
                                            "description": "A list of objects containing the results of the operation. The results are sorted in ascending order by the <code>Index</code> field and match the order of the documents in the input list. If all of the documents contain an error, the <code>ResultList</code> is empty.",
                                            "items": {
                                                "description": "The result of calling the operation. The operation returns one object for each document that is successfully processed by the operation.",
                                                "properties": {
                                                    "Index": {
                                                        "description": "The zero-based index of the document in the input list.",
                                                        "type": "integer"
                                                    },
                                                    "KeyPhrases": {
                                                        "description": "One or more <a>KeyPhrase</a> objects, one for each key phrase detected in the document.",
                                                        "items": {
                                                            "description": "Describes a key noun phrase.",
                                                            "properties": {
                                                                "BeginOffset": {
                                                                    "description": "A character offset in the input text that shows where the key phrase begins (the first character is at position 0). The offset returns the position of each UTF-8 code point in the string. A <i>code point</i> is the abstract character from a particular graphical representation. For example, a multi-byte UTF-8 character maps to a single code point.",
                                                                    "type": "integer"
                                                                },
                                                                "EndOffset": {
                                                                    "description": "A character offset in the input text where the key phrase ends. The offset returns the position of each UTF-8 code point in the string. A <code>code point</code> is the abstract character from a particular graphical representation. For example, a multi-byte UTF-8 character maps to a single code point.",
                                                                    "type": "integer"
                                                                },
                                                                "Score": {
                                                                    "description": "The level of confidence that Amazon Comprehend has in the accuracy of the detection.",
                                                                    "format": "float",
                                                                    "type": "number"
                                                                },
                                                                "Text": {
                                                                    "description": "The text of a key noun phrase.",
                                                                    "minLength": 1,
                                                                    "type": "string"
                                                                }
                                                            },
                                                            "type": "object"
                                                        },
                                                        "type": "array"
                                                    }
                                                },
                                                "type": "object"
                                            },
                                            "type": "array"
                                        }
                                    },
                                    "required": [
                                        "ResultList",
                                        "ErrorList"
                                    ],
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "480": {
                        "description": "InvalidRequestException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "TextSizeLimitExceededException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "482": {
                        "description": "UnsupportedLanguageException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "483": {
                        "description": "BatchSizeLimitExceededException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "484": {
                        "description": "InternalServerException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "LanguageCode": {
                                        "description": "The language of the input documents. You can specify English (\"en\") or Spanish (\"es\"). All documents must be in the same language.",
                                        "enum": [
                                            "en",
                                            "es",
                                            "fr",
                                            "de",
                                            "it",
                                            "pt"
                                        ],
                                        "type": "string"
                                    },
                                    "TextList": {
                                        "description": "A list containing the text of the input documents. The list can contain a maximum of 25 documents. Each document must contain fewer that 5,000 bytes of UTF-8 encoded characters.",
                                        "items": {
                                            "minLength": 1,
                                            "type": "string"
                                        },
                                        "type": "array"
                                    }
                                },
                                "required": [
                                    "TextList",
                                    "LanguageCode"
                                ],
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            }
        },
        "/#BatchDetectSentiment": {
            "parameters": [
                {
                    "in": "query",
                    "name": "Action",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "query",
                    "name": "Version",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Content-Sha256",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Date",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Algorithm",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Credential",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Security-Token",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Signature",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-SignedHeaders",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                }
            ],
            "post": {
                "description": "Inspects a batch of documents and returns an inference of the prevailing sentiment, <code>POSITIVE</code>, <code>NEUTRAL</code>, <code>MIXED</code>, or <code>NEGATIVE</code>, in each one.",
                "operationId": "BatchDetectSentiment",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "ErrorList": {
                                            "description": "A list containing one object for each document that contained an error. The results are sorted in ascending order by the <code>Index</code> field and match the order of the documents in the input list. If there are no errors in the batch, the <code>ErrorList</code> is empty.",
                                            "items": {
                                                "description": "Describes an error that occurred while processing a document in a batch. The operation returns on <code>BatchItemError</code> object for each document that contained an error.",
                                                "properties": {
                                                    "ErrorCode": {
                                                        "description": "The numeric error code of the error.",
                                                        "minLength": 1,
                                                        "type": "string"
                                                    },
                                                    "ErrorMessage": {
                                                        "description": "A text description of the error.",
                                                        "minLength": 1,
                                                        "type": "string"
                                                    },
                                                    "Index": {
                                                        "description": "The zero-based index of the document in the input list.",
                                                        "type": "integer"
                                                    }
                                                },
                                                "type": "object"
                                            },
                                            "type": "array"
                                        },
                                        "ResultList": {
                                            "description": "A list of objects containing the results of the operation. The results are sorted in ascending order by the <code>Index</code> field and match the order of the documents in the input list. If all of the documents contain an error, the <code>ResultList</code> is empty.",
                                            "items": {
                                                "description": "The result of calling the operation. The operation returns one object for each document that is successfully processed by the operation.",
                                                "properties": {
                                                    "Index": {
                                                        "description": "The zero-based index of the document in the input list.",
                                                        "type": "integer"
                                                    },
                                                    "Sentiment": {
                                                        "description": "The sentiment detected in the document.",
                                                        "enum": [
                                                            "POSITIVE",
                                                            "NEGATIVE",
                                                            "NEUTRAL",
                                                            "MIXED"
                                                        ],
                                                        "type": "string"
                                                    },
                                                    "SentimentScore": {
                                                        "description": "The level of confidence that Amazon Comprehend has in the accuracy of its sentiment detection.",
                                                        "properties": {
                                                            "Mixed": {
                                                                "description": "The level of confidence that Amazon Comprehend has in the accuracy of its detection of the <code>MIXED</code> sentiment.",
                                                                "format": "float",
                                                                "type": "number"
                                                            },
                                                            "Negative": {
                                                                "description": "The level of confidence that Amazon Comprehend has in the accuracy of its detection of the <code>NEGATIVE</code> sentiment.",
                                                                "format": "float",
                                                                "type": "number"
                                                            },
                                                            "Neutral": {
                                                                "description": "The level of confidence that Amazon Comprehend has in the accuracy of its detection of the <code>NEUTRAL</code> sentiment.",
                                                                "format": "float",
                                                                "type": "number"
                                                            },
                                                            "Positive": {
                                                                "description": "The level of confidence that Amazon Comprehend has in the accuracy of its detection of the <code>POSITIVE</code> sentiment.",
                                                                "format": "float",
                                                                "type": "number"
                                                            }
                                                        },
                                                        "type": "object"
                                                    }
                                                },
                                                "type": "object"
                                            },
                                            "type": "array"
                                        }
                                    },
                                    "required": [
                                        "ResultList",
                                        "ErrorList"
                                    ],
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "480": {
                        "description": "InvalidRequestException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "TextSizeLimitExceededException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "482": {
                        "description": "UnsupportedLanguageException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "483": {
                        "description": "BatchSizeLimitExceededException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "484": {
                        "description": "InternalServerException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "LanguageCode": {
                                        "description": "The language of the input documents. You can specify English (\"en\") or Spanish (\"es\"). All documents must be in the same language.",
                                        "enum": [
                                            "en",
                                            "es",
                                            "fr",
                                            "de",
                                            "it",
                                            "pt"
                                        ],
                                        "type": "string"
                                    },
                                    "TextList": {
                                        "description": "A list containing the text of the input documents. The list can contain a maximum of 25 documents. Each document must contain fewer that 5,000 bytes of UTF-8 encoded characters.",
                                        "items": {
                                            "minLength": 1,
                                            "type": "string"
                                        },
                                        "type": "array"
                                    }
                                },
                                "required": [
                                    "TextList",
                                    "LanguageCode"
                                ],
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            }
        },
        "/#BatchDetectSyntax": {
            "parameters": [
                {
                    "in": "query",
                    "name": "Action",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "query",
                    "name": "Version",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Content-Sha256",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Date",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Algorithm",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Credential",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Security-Token",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Signature",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-SignedHeaders",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                }
            ],
            "post": {
                "description": "Inspects the text of a batch of documents for the syntax and part of speech of the words in the document and returns information about them. For more information, see <a>how-syntax</a>.",
                "operationId": "BatchDetectSyntax",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "ErrorList": {
                                            "description": "A list containing one object for each document that contained an error. The results are sorted in ascending order by the <code>Index</code> field and match the order of the documents in the input list. If there are no errors in the batch, the <code>ErrorList</code> is empty.",
                                            "items": {
                                                "description": "Describes an error that occurred while processing a document in a batch. The operation returns on <code>BatchItemError</code> object for each document that contained an error.",
                                                "properties": {
                                                    "ErrorCode": {
                                                        "description": "The numeric error code of the error.",
                                                        "minLength": 1,
                                                        "type": "string"
                                                    },
                                                    "ErrorMessage": {
                                                        "description": "A text description of the error.",
                                                        "minLength": 1,
                                                        "type": "string"
                                                    },
                                                    "Index": {
                                                        "description": "The zero-based index of the document in the input list.",
                                                        "type": "integer"
                                                    }
                                                },
                                                "type": "object"
                                            },
                                            "type": "array"
                                        },
                                        "ResultList": {
                                            "description": "A list of objects containing the results of the operation. The results are sorted in ascending order by the <code>Index</code> field and match the order of the documents in the input list. If all of the documents contain an error, the <code>ResultList</code> is empty.",
                                            "items": {
                                                "description": "The result of calling the operation. The operation returns one object that is successfully processed by the operation.",
                                                "properties": {
                                                    "Index": {
                                                        "description": "The zero-based index of the document in the input list.",
                                                        "type": "integer"
                                                    },
                                                    "SyntaxTokens": {
                                                        "description": "The syntax tokens for the words in the document, one token for each word.",
                                                        "items": {
                                                            "description": "Represents a work in the input text that was recognized and assigned a part of speech. There is one syntax token record for each word in the source text.",
                                                            "properties": {
                                                                "BeginOffset": {
                                                                    "description": "The zero-based offset from the beginning of the source text to the first character in the word.",
                                                                    "type": "integer"
                                                                },
                                                                "EndOffset": {
                                                                    "description": "The zero-based offset from the beginning of the source text to the last character in the word.",
                                                                    "type": "integer"
                                                                },
                                                                "PartOfSpeech": {
                                                                    "description": "Provides the part of speech label and the confidence level that Amazon Comprehend has that the part of speech was correctly identified. For more information, see <a>how-syntax</a>.",
                                                                    "properties": {
                                                                        "Score": {
                                                                            "description": "The confidence that Amazon Comprehend has that the part of speech was correctly identified.",
                                                                            "format": "float",
                                                                            "type": "number"
                                                                        },
                                                                        "Tag": {
                                                                            "description": "Identifies the part of speech that the token represents.",
                                                                            "enum": [
                                                                                "ADJ",
                                                                                "ADP",
                                                                                "ADV",
                                                                                "AUX",
                                                                                "CONJ",
                                                                                "CCONJ",
                                                                                "DET",
                                                                                "INTJ",
                                                                                "NOUN",
                                                                                "NUM",
                                                                                "O",
                                                                                "PART",
                                                                                "PRON",
                                                                                "PROPN",
                                                                                "PUNCT",
                                                                                "SCONJ",
                                                                                "SYM",
                                                                                "VERB"
                                                                            ],
                                                                            "type": "string"
                                                                        }
                                                                    },
                                                                    "type": "object"
                                                                },
                                                                "Text": {
                                                                    "description": "The word that was recognized in the source text.",
                                                                    "minLength": 1,
                                                                    "type": "string"
                                                                },
                                                                "TokenId": {
                                                                    "description": "A unique identifier for a token.",
                                                                    "type": "integer"
                                                                }
                                                            },
                                                            "type": "object"
                                                        },
                                                        "type": "array"
                                                    }
                                                },
                                                "type": "object"
                                            },
                                            "type": "array"
                                        }
                                    },
                                    "required": [
                                        "ResultList",
                                        "ErrorList"
                                    ],
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "480": {
                        "description": "InvalidRequestException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "TextSizeLimitExceededException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "482": {
                        "description": "UnsupportedLanguageException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "483": {
                        "description": "BatchSizeLimitExceededException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "484": {
                        "description": "InternalServerException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "LanguageCode": {
                                        "description": "The language of the input documents. You can specify English (\"en\") or Spanish (\"es\"). All documents must be in the same language.",
                                        "enum": [
                                            "en",
                                            "es",
                                            "fr",
                                            "de",
                                            "it",
                                            "pt"
                                        ],
                                        "type": "string"
                                    },
                                    "TextList": {
                                        "description": "A list containing the text of the input documents. The list can contain a maximum of 25 documents. Each document must contain fewer that 5,000 bytes of UTF-8 encoded characters.",
                                        "items": {
                                            "minLength": 1,
                                            "type": "string"
                                        },
                                        "type": "array"
                                    }
                                },
                                "required": [
                                    "TextList",
                                    "LanguageCode"
                                ],
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            }
        },
        "/#CreateDocumentClassifier": {
            "parameters": [
                {
                    "in": "query",
                    "name": "Action",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "query",
                    "name": "Version",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Content-Sha256",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Date",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Algorithm",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Credential",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Security-Token",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Signature",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-SignedHeaders",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                }
            ],
            "post": {
                "description": "Creates a new document classifier that you can use to categorize documents. To create a classifier you provide a set of training documents that labeled with the categories that you want to use. After the classifier is trained you can use it to categorize a set of labeled documents into the categories. For more information, see <a>how-document-classification</a>.",
                "operationId": "CreateDocumentClassifier",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "DocumentClassifierArn": {
                                            "description": "The Amazon Resource Name (ARN) that identifies the document classifier.",
                                            "maxLength": 256,
                                            "pattern": "arn:aws:comprehend:[a-zA-Z0-9-]*:[0-9]{12}:document-classifier/[a-zA-Z0-9](-*[a-zA-Z0-9])*",
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "480": {
                        "description": "InvalidRequestException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "ResourceInUseException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "482": {
                        "description": "TooManyRequestsException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "483": {
                        "description": "ResourceLimitExceededException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "484": {
                        "description": "UnsupportedLanguageException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "485": {
                        "description": "InternalServerException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "ClientRequestToken": {
                                        "description": "A unique identifier for the request. If you don't set the client request token, Amazon Comprehend generates one.",
                                        "maxLength": 64,
                                        "minLength": 1,
                                        "pattern": "^[a-zA-Z0-9-]+$",
                                        "type": "string"
                                    },
                                    "DataAccessRoleArn": {
                                        "description": "The Amazon Resource Name (ARN) of the AWS Identity and Management (IAM) role that grants Amazon Comprehend read access to your input data.",
                                        "maxLength": 2048,
                                        "minLength": 20,
                                        "pattern": "arn:aws(-[^:]+)?:iam::[0-9]{12}:role/.+",
                                        "type": "string"
                                    },
                                    "DocumentClassifierName": {
                                        "description": "The name of the document classifier.",
                                        "maxLength": 63,
                                        "pattern": "^[a-zA-Z0-9](-*[a-zA-Z0-9])*",
                                        "type": "string"
                                    },
                                    "InputDataConfig": {
                                        "description": "Specifies the format and location of the input data for the job.",
                                        "properties": {
                                            "S3Uri": {
                                                "description": "<p>The Amazon S3 URI for the input data. The S3 bucket must be in the same region as the API endpoint that you are calling. The URI can point to a single input file or it can provide the prefix for a collection of input files.</p> <p>For example, if you use the URI <code>S3://bucketName/prefix</code>, if the prefix is a single file, Amazon Comprehend uses that file as input. If more than one file begins with the prefix, Amazon Comprehend uses all of them as input.</p>",
                                                "maxLength": 1024,
                                                "pattern": "s3://[a-z0-9][\\.\\-a-z0-9]{1,61}[a-z0-9](/.*)?",
                                                "type": "string"
                                            }
                                        },
                                        "required": [
                                            "S3Uri"
                                        ],
                                        "type": "object"
                                    },
                                    "LanguageCode": {
                                        "description": "The language of the input documents. You can specify English (\"en\") or Spanish (\"es\"). All documents must be in the same language.",
                                        "enum": [
                                            "en",
                                            "es",
                                            "fr",
                                            "de",
                                            "it",
                                            "pt"
                                        ],
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "DocumentClassifierName",
                                    "DataAccessRoleArn",
                                    "InputDataConfig",
                                    "LanguageCode"
                                ],
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            }
        },
        "/#CreateEntityRecognizer": {
            "parameters": [
                {
                    "in": "query",
                    "name": "Action",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "query",
                    "name": "Version",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Content-Sha256",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Date",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Algorithm",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Credential",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Security-Token",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Signature",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-SignedHeaders",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                }
            ],
            "post": {
                "description": "Creates an entity recognizer using submitted files. After your <code>CreateEntityRecognizer</code> request is submitted, you can check job status using the API. ",
                "operationId": "CreateEntityRecognizer",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "EntityRecognizerArn": {
                                            "description": "The Amazon Resource Name (ARN) that identifies the entity recognizer.",
                                            "maxLength": 256,
                                            "pattern": "arn:aws:comprehend:[a-zA-Z0-9-]*:[0-9]{12}:entity-recognizer/[a-zA-Z0-9](-*[a-zA-Z0-9])*",
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "480": {
                        "description": "InvalidRequestException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "ResourceInUseException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "482": {
                        "description": "TooManyRequestsException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "483": {
                        "description": "ResourceLimitExceededException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "484": {
                        "description": "UnsupportedLanguageException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "485": {
                        "description": "InternalServerException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "ClientRequestToken": {
                                        "description": " A unique identifier for the request. If you don't set the client request token, Amazon Comprehend generates one.",
                                        "maxLength": 64,
                                        "minLength": 1,
                                        "pattern": "^[a-zA-Z0-9-]+$",
                                        "type": "string"
                                    },
                                    "DataAccessRoleArn": {
                                        "description": "The Amazon Resource Name (ARN) of the AWS Identity and Management (IAM) role that grants Amazon Comprehend read access to your input data.",
                                        "maxLength": 2048,
                                        "minLength": 20,
                                        "pattern": "arn:aws(-[^:]+)?:iam::[0-9]{12}:role/.+",
                                        "type": "string"
                                    },
                                    "InputDataConfig": {
                                        "description": "Specifies the format and location of the input data. The S3 bucket containing the input data must be located in the same region as the entity recognizer being created. ",
                                        "properties": {
                                            "Annotations": {
                                                "description": "S3 location of the annotations file for an entity recognizer.",
                                                "properties": {
                                                    "S3Uri": {
                                                        "description": " Specifies the Amazon S3 location where the annotations for an entity recognizer are located. The URI must be in the same region as the API endpoint that you are calling.",
                                                        "maxLength": 1024,
                                                        "pattern": "s3://[a-z0-9][\\.\\-a-z0-9]{1,61}[a-z0-9](/.*)?",
                                                        "type": "string"
                                                    }
                                                },
                                                "required": [
                                                    "S3Uri"
                                                ],
                                                "type": "object"
                                            },
                                            "Documents": {
                                                "description": "S3 location of the documents folder for an entity recognizer",
                                                "properties": {
                                                    "S3Uri": {
                                                        "description": " Specifies the Amazon S3 location where the training documents for an entity recognizer are located. The URI must be in the same region as the API endpoint that you are calling.",
                                                        "maxLength": 1024,
                                                        "pattern": "s3://[a-z0-9][\\.\\-a-z0-9]{1,61}[a-z0-9](/.*)?",
                                                        "type": "string"
                                                    }
                                                },
                                                "required": [
                                                    "S3Uri"
                                                ],
                                                "type": "object"
                                            },
                                            "EntityList": {
                                                "description": "S3 location of the entity list for an entity recognizer.",
                                                "properties": {
                                                    "S3Uri": {
                                                        "description": "Specifies the Amazon S3 location where the entity list is located. The URI must be in the same region as the API endpoint that you are calling.",
                                                        "maxLength": 1024,
                                                        "pattern": "s3://[a-z0-9][\\.\\-a-z0-9]{1,61}[a-z0-9](/.*)?",
                                                        "type": "string"
                                                    }
                                                },
                                                "required": [
                                                    "S3Uri"
                                                ],
                                                "type": "object"
                                            },
                                            "EntityTypes": {
                                                "description": "The entity types in the input data for an entity recognizer.",
                                                "items": {
                                                    "description": "Information about an individual item on a list of entity types.",
                                                    "properties": {
                                                        "Type": {
                                                            "description": "Entity type of an item on an entity type list.",
                                                            "maxLength": 64,
                                                            "pattern": "[_A-Z0-9]+",
                                                            "type": "string"
                                                        }
                                                    },
                                                    "required": [
                                                        "Type"
                                                    ],
                                                    "type": "object"
                                                },
                                                "type": "array"
                                            }
                                        },
                                        "required": [
                                            "EntityTypes",
                                            "Documents"
                                        ],
                                        "type": "object"
                                    },
                                    "LanguageCode": {
                                        "description": " The language of the input documents. All documents must be in the same language. Only English (\"en\") is currently supported. ",
                                        "enum": [
                                            "en",
                                            "es",
                                            "fr",
                                            "de",
                                            "it",
                                            "pt"
                                        ],
                                        "type": "string"
                                    },
                                    "RecognizerName": {
                                        "description": "The name given to the newly created recognizer. Recognizer names can be a maximum of 256 characters. Alphanumeric characters, hyphens (-) and underscores (_) are allowed. The name must be unique in the account/region.",
                                        "maxLength": 63,
                                        "pattern": "^[a-zA-Z0-9](-*[a-zA-Z0-9])*",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "RecognizerName",
                                    "DataAccessRoleArn",
                                    "InputDataConfig",
                                    "LanguageCode"
                                ],
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            }
        },
        "/#DeleteDocumentClassifier": {
            "parameters": [
                {
                    "in": "query",
                    "name": "Action",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "query",
                    "name": "Version",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Content-Sha256",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Date",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Algorithm",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Credential",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Security-Token",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Signature",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-SignedHeaders",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                }
            ],
            "post": {
                "description": "<p>Deletes a previously created document classifier</p> <p>Only those classifiers that are in terminated states (IN_ERROR, TRAINED) will be deleted. If an active inference job is using the model, a <code>ResourceInUseException</code> will be returned.</p> <p>This is an asynchronous action that puts the classifier into a DELETING state, and it is then removed by a background job. Once removed, the classifier disappears from your account and is no longer available for use. </p>",
                "operationId": "DeleteDocumentClassifier",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {},
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "480": {
                        "description": "InvalidRequestException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "TooManyRequestsException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "482": {
                        "description": "ResourceNotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "483": {
                        "description": "ResourceUnavailableException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "484": {
                        "description": "ResourceInUseException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "485": {
                        "description": "InternalServerException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "DocumentClassifierArn": {
                                        "description": "The Amazon Resource Name (ARN) that identifies the document classifier. ",
                                        "maxLength": 256,
                                        "pattern": "arn:aws:comprehend:[a-zA-Z0-9-]*:[0-9]{12}:document-classifier/[a-zA-Z0-9](-*[a-zA-Z0-9])*",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "DocumentClassifierArn"
                                ],
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            }
        },
        "/#DeleteEntityRecognizer": {
            "parameters": [
                {
                    "in": "query",
                    "name": "Action",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "query",
                    "name": "Version",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Content-Sha256",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Date",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Algorithm",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Credential",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Security-Token",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Signature",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-SignedHeaders",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                }
            ],
            "post": {
                "description": "<p>Deletes an entity recognizer.</p> <p>Only those recognizers that are in terminated states (IN_ERROR, TRAINED) will be deleted. If an active inference job is using the model, a <code>ResourceInUseException</code> will be returned.</p> <p>This is an asynchronous action that puts the recognizer into a DELETING state, and it is then removed by a background job. Once removed, the recognizer disappears from your account and is no longer available for use. </p>",
                "operationId": "DeleteEntityRecognizer",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {},
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "480": {
                        "description": "InvalidRequestException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "TooManyRequestsException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "482": {
                        "description": "ResourceNotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "483": {
                        "description": "ResourceUnavailableException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "484": {
                        "description": "ResourceInUseException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "485": {
                        "description": "InternalServerException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "EntityRecognizerArn": {
                                        "description": "The Amazon Resource Name (ARN) that identifies the entity recognizer.",
                                        "maxLength": 256,
                                        "pattern": "arn:aws:comprehend:[a-zA-Z0-9-]*:[0-9]{12}:entity-recognizer/[a-zA-Z0-9](-*[a-zA-Z0-9])*",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "EntityRecognizerArn"
                                ],
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            }
        },
        "/#DescribeDocumentClassificationJob": {
            "parameters": [
                {
                    "in": "query",
                    "name": "Action",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "query",
                    "name": "Version",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Content-Sha256",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Date",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Algorithm",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Credential",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Security-Token",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Signature",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-SignedHeaders",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                }
            ],
            "post": {
                "description": "Gets the properties associated with a document classification job. Use this operation to get the status of a classification job.",
                "operationId": "DescribeDocumentClassificationJob",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "DocumentClassificationJobProperties": {
                                            "description": "An object that describes the properties associated with the document classification job.",
                                            "properties": {
                                                "DataAccessRoleArn": {
                                                    "description": "The Amazon Resource Name (ARN) of the AWS identity and Access Management (IAM) role that grants Amazon Comprehend read access to your input data.",
                                                    "maxLength": 2048,
                                                    "minLength": 20,
                                                    "pattern": "arn:aws(-[^:]+)?:iam::[0-9]{12}:role/.+",
                                                    "type": "string"
                                                },
                                                "DocumentClassifierArn": {
                                                    "description": "The Amazon Resource Name (ARN) that identifies the document classifier. ",
                                                    "maxLength": 256,
                                                    "pattern": "arn:aws:comprehend:[a-zA-Z0-9-]*:[0-9]{12}:document-classifier/[a-zA-Z0-9](-*[a-zA-Z0-9])*",
                                                    "type": "string"
                                                },
                                                "EndTime": {
                                                    "description": "The time that the document classification job completed.",
                                                    "format": "date-time",
                                                    "type": "string"
                                                },
                                                "InputDataConfig": {
                                                    "description": "The input data configuration that you supplied when you created the document classification job.",
                                                    "properties": {
                                                        "InputFormat": {
                                                            "description": "<p>Specifies how the text in an input file should be processed:</p> <ul> <li> <p> <code>ONE_DOC_PER_FILE</code> - Each file is considered a separate document. Use this option when you are processing large documents, such as newspaper articles or scientific papers.</p> </li> <li> <p> <code>ONE_DOC_PER_LINE</code> - Each line in a file is considered a separate document. Use this option when you are processing many short documents, such as text messages.</p> </li> </ul>",
                                                            "enum": [
                                                                "ONE_DOC_PER_FILE",
                                                                "ONE_DOC_PER_LINE"
                                                            ],
                                                            "type": "string"
                                                        },
                                                        "S3Uri": {
                                                            "description": "<p>The Amazon S3 URI for the input data. The URI must be in same region as the API endpoint that you are calling. The URI can point to a single input file or it can provide the prefix for a collection of data files. </p> <p>For example, if you use the URI <code>S3://bucketName/prefix</code>, if the prefix is a single file, Amazon Comprehend uses that file as input. If more than one file begins with the prefix, Amazon Comprehend uses all of them as input.</p>",
                                                            "maxLength": 1024,
                                                            "pattern": "s3://[a-z0-9][\\.\\-a-z0-9]{1,61}[a-z0-9](/.*)?",
                                                            "type": "string"
                                                        }
                                                    },
                                                    "required": [
                                                        "S3Uri"
                                                    ],
                                                    "type": "object"
                                                },
                                                "JobId": {
                                                    "description": "The identifier assigned to the document classification job.",
                                                    "maxLength": 32,
                                                    "minLength": 1,
                                                    "pattern": "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-%@]*)$",
                                                    "type": "string"
                                                },
                                                "JobName": {
                                                    "description": "The name that you assigned to the document classification job.",
                                                    "maxLength": 256,
                                                    "minLength": 1,
                                                    "pattern": "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-%@]*)$",
                                                    "type": "string"
                                                },
                                                "JobStatus": {
                                                    "description": "The current status of the document classification job. If the status is <code>FAILED</code>, the <code>Message</code> field shows the reason for the failure.",
                                                    "enum": [
                                                        "SUBMITTED",
                                                        "IN_PROGRESS",
                                                        "COMPLETED",
                                                        "FAILED",
                                                        "STOP_REQUESTED",
                                                        "STOPPED"
                                                    ],
                                                    "type": "string"
                                                },
                                                "Message": {
                                                    "description": "A description of the status of the job.",
                                                    "type": "string"
                                                },
                                                "OutputDataConfig": {
                                                    "description": "The output data configuration that you supplied when you created the document classification job.",
                                                    "properties": {
                                                        "S3Uri": {
                                                            "description": "<p>When you use the <code>OutputDataConfig</code> object with asynchronous operations, you specify the Amazon S3 location where you want to write the output data. The URI must be in the same region as the API endpoint that you are calling. The location is used as the prefix for the actual location of the output file.</p> <p>When the topic detection job is finished, the service creates an output file in a directory specific to the job. The <code>S3Uri</code> field contains the location of the output file, called <code>output.tar.gz</code>. It is a compressed archive that contains the ouput of the operation.</p>",
                                                            "maxLength": 1024,
                                                            "pattern": "s3://[a-z0-9][\\.\\-a-z0-9]{1,61}[a-z0-9](/.*)?",
                                                            "type": "string"
                                                        }
                                                    },
                                                    "required": [
                                                        "S3Uri"
                                                    ],
                                                    "type": "object"
                                                },
                                                "SubmitTime": {
                                                    "description": "The time that the document classification job was submitted for processing.",
                                                    "format": "date-time",
                                                    "type": "string"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "480": {
                        "description": "InvalidRequestException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "TooManyRequestsException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "482": {
                        "description": "JobNotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "483": {
                        "description": "InternalServerException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "JobId": {
                                        "description": "The identifier that Amazon Comprehend generated for the job. The operation returns this identifier in its response.",
                                        "maxLength": 32,
                                        "minLength": 1,
                                        "pattern": "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-%@]*)$",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "JobId"
                                ],
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            }
        },
        "/#DescribeDocumentClassifier": {
            "parameters": [
                {
                    "in": "query",
                    "name": "Action",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "query",
                    "name": "Version",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Content-Sha256",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Date",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Algorithm",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Credential",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Security-Token",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Signature",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-SignedHeaders",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                }
            ],
            "post": {
                "description": "Gets the properties associated with a document classifier.",
                "operationId": "DescribeDocumentClassifier",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "DocumentClassifierProperties": {
                                            "description": "An object that contains the properties associated with a document classifier.",
                                            "properties": {
                                                "ClassifierMetadata": {
                                                    "description": "Information about the document classifier, including the number of documents used for training the classifier, the number of documents used for test the classifier, and an accuracy rating.",
                                                    "properties": {
                                                        "EvaluationMetrics": {
                                                            "description": " Describes the result metrics for the test data associated with an documentation classifier.",
                                                            "properties": {
                                                                "Accuracy": {
                                                                    "description": "The fraction of the labels that were correct recognized. It is computed by dividing the number of labels in the test documents that were correctly recognized by the total number of labels in the test documents.",
                                                                    "format": "double",
                                                                    "type": "number"
                                                                },
                                                                "F1Score": {
                                                                    "description": "A measure of how accurate the classifier results are for the test data. It is derived from the <code>Precision</code> and <code>Recall</code> values. The <code>F1Score</code> is the harmonic average of the two scores. The highest score is 1, and the worst score is 0. ",
                                                                    "format": "double",
                                                                    "type": "number"
                                                                },
                                                                "Precision": {
                                                                    "description": "A measure of the usefulness of the classifier results in the test data. High precision means that the classifier returned substantially more relevant results than irrelevant ones.",
                                                                    "format": "double",
                                                                    "type": "number"
                                                                },
                                                                "Recall": {
                                                                    "description": "A measure of how complete the classifier results are for the test data. High recall means that the classifier returned most of the relevant results. ",
                                                                    "format": "double",
                                                                    "type": "number"
                                                                }
                                                            },
                                                            "type": "object"
                                                        },
                                                        "NumberOfLabels": {
                                                            "description": "The number of labels in the input data. ",
                                                            "type": "integer"
                                                        },
                                                        "NumberOfTestDocuments": {
                                                            "description": "The number of documents in the input data that were used to test the classifier. Typically this is 10 to 20 percent of the input documents.",
                                                            "type": "integer"
                                                        },
                                                        "NumberOfTrainedDocuments": {
                                                            "description": "The number of documents in the input data that were used to train the classifier. Typically this is 80 to 90 percent of the input documents.",
                                                            "type": "integer"
                                                        }
                                                    },
                                                    "type": "object"
                                                },
                                                "DataAccessRoleArn": {
                                                    "description": "The Amazon Resource Name (ARN) of the AWS Identity and Management (IAM) role that grants Amazon Comprehend read access to your input data.",
                                                    "maxLength": 2048,
                                                    "minLength": 20,
                                                    "pattern": "arn:aws(-[^:]+)?:iam::[0-9]{12}:role/.+",
                                                    "type": "string"
                                                },
                                                "DocumentClassifierArn": {
                                                    "description": "The Amazon Resource Name (ARN) that identifies the document classifier.",
                                                    "maxLength": 256,
                                                    "pattern": "arn:aws:comprehend:[a-zA-Z0-9-]*:[0-9]{12}:document-classifier/[a-zA-Z0-9](-*[a-zA-Z0-9])*",
                                                    "type": "string"
                                                },
                                                "EndTime": {
                                                    "description": "The time that training the document classifier completed.",
                                                    "format": "date-time",
                                                    "type": "string"
                                                },
                                                "InputDataConfig": {
                                                    "description": "The input data configuration that you supplied when you created the document classifier for training.",
                                                    "properties": {
                                                        "S3Uri": {
                                                            "description": "<p>The Amazon S3 URI for the input data. The S3 bucket must be in the same region as the API endpoint that you are calling. The URI can point to a single input file or it can provide the prefix for a collection of input files.</p> <p>For example, if you use the URI <code>S3://bucketName/prefix</code>, if the prefix is a single file, Amazon Comprehend uses that file as input. If more than one file begins with the prefix, Amazon Comprehend uses all of them as input.</p>",
                                                            "maxLength": 1024,
                                                            "pattern": "s3://[a-z0-9][\\.\\-a-z0-9]{1,61}[a-z0-9](/.*)?",
                                                            "type": "string"
                                                        }
                                                    },
                                                    "required": [
                                                        "S3Uri"
                                                    ],
                                                    "type": "object"
                                                },
                                                "LanguageCode": {
                                                    "description": "The language code for the language of the documents that the classifier was trained on.",
                                                    "enum": [
                                                        "en",
                                                        "es",
                                                        "fr",
                                                        "de",
                                                        "it",
                                                        "pt"
                                                    ],
                                                    "type": "string"
                                                },
                                                "Message": {
                                                    "description": "Additional information about the status of the classifier.",
                                                    "type": "string"
                                                },
                                                "Status": {
                                                    "description": "The status of the document classifier. If the status is <code>TRAINED</code> the classifier is ready to use. If the status is <code>FAILED</code> you can see additional information about why the classifier wasn't trained in the <code>Message</code> field.",
                                                    "enum": [
                                                        "SUBMITTED",
                                                        "TRAINING",
                                                        "DELETING",
                                                        "STOP_REQUESTED",
                                                        "STOPPED",
                                                        "IN_ERROR",
                                                        "TRAINED"
                                                    ],
                                                    "type": "string"
                                                },
                                                "SubmitTime": {
                                                    "description": "The time that the document classifier was submitted for training.",
                                                    "format": "date-time",
                                                    "type": "string"
                                                },
                                                "TrainingEndTime": {
                                                    "description": "The time that training of the document classifier was completed. Indicates the time when the training completes on documentation classifiers. You are billed for the time interval between this time and the value of TrainingStartTime.",
                                                    "format": "date-time",
                                                    "type": "string"
                                                },
                                                "TrainingStartTime": {
                                                    "description": "Indicates the time when the training starts on documentation classifiers. You are billed for the time interval between this time and the value of TrainingEndTime. ",
                                                    "format": "date-time",
                                                    "type": "string"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "480": {
                        "description": "InvalidRequestException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "TooManyRequestsException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "482": {
                        "description": "ResourceNotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "483": {
                        "description": "InternalServerException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "DocumentClassifierArn": {
                                        "description": "The Amazon Resource Name (ARN) that identifies the document classifier. The operation returns this identifier in its response.",
                                        "maxLength": 256,
                                        "pattern": "arn:aws:comprehend:[a-zA-Z0-9-]*:[0-9]{12}:document-classifier/[a-zA-Z0-9](-*[a-zA-Z0-9])*",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "DocumentClassifierArn"
                                ],
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            }
        },
        "/#DescribeDominantLanguageDetectionJob": {
            "parameters": [
                {
                    "in": "query",
                    "name": "Action",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "query",
                    "name": "Version",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Content-Sha256",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Date",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Algorithm",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Credential",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Security-Token",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Signature",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-SignedHeaders",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                }
            ],
            "post": {
                "description": "Gets the properties associated with a dominant language detection job. Use this operation to get the status of a detection job.",
                "operationId": "DescribeDominantLanguageDetectionJob",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "DominantLanguageDetectionJobProperties": {
                                            "description": "An object that contains the properties associated with a dominant language detection job.",
                                            "properties": {
                                                "DataAccessRoleArn": {
                                                    "description": "The Amazon Resource Name (ARN) that gives Amazon Comprehend read access to your input data.",
                                                    "maxLength": 2048,
                                                    "minLength": 20,
                                                    "pattern": "arn:aws(-[^:]+)?:iam::[0-9]{12}:role/.+",
                                                    "type": "string"
                                                },
                                                "EndTime": {
                                                    "description": "The time that the dominant language detection job completed.",
                                                    "format": "date-time",
                                                    "type": "string"
                                                },
                                                "InputDataConfig": {
                                                    "description": "The input data configuration that you supplied when you created the dominant language detection job.",
                                                    "properties": {
                                                        "InputFormat": {
                                                            "description": "<p>Specifies how the text in an input file should be processed:</p> <ul> <li> <p> <code>ONE_DOC_PER_FILE</code> - Each file is considered a separate document. Use this option when you are processing large documents, such as newspaper articles or scientific papers.</p> </li> <li> <p> <code>ONE_DOC_PER_LINE</code> - Each line in a file is considered a separate document. Use this option when you are processing many short documents, such as text messages.</p> </li> </ul>",
                                                            "enum": [
                                                                "ONE_DOC_PER_FILE",
                                                                "ONE_DOC_PER_LINE"
                                                            ],
                                                            "type": "string"
                                                        },
                                                        "S3Uri": {
                                                            "description": "<p>The Amazon S3 URI for the input data. The URI must be in same region as the API endpoint that you are calling. The URI can point to a single input file or it can provide the prefix for a collection of data files. </p> <p>For example, if you use the URI <code>S3://bucketName/prefix</code>, if the prefix is a single file, Amazon Comprehend uses that file as input. If more than one file begins with the prefix, Amazon Comprehend uses all of them as input.</p>",
                                                            "maxLength": 1024,
                                                            "pattern": "s3://[a-z0-9][\\.\\-a-z0-9]{1,61}[a-z0-9](/.*)?",
                                                            "type": "string"
                                                        }
                                                    },
                                                    "required": [
                                                        "S3Uri"
                                                    ],
                                                    "type": "object"
                                                },
                                                "JobId": {
                                                    "description": "The identifier assigned to the dominant language detection job.",
                                                    "maxLength": 32,
                                                    "minLength": 1,
                                                    "pattern": "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-%@]*)$",
                                                    "type": "string"
                                                },
                                                "JobName": {
                                                    "description": "The name that you assigned to the dominant language detection job.",
                                                    "maxLength": 256,
                                                    "minLength": 1,
                                                    "pattern": "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-%@]*)$",
                                                    "type": "string"
                                                },
                                                "JobStatus": {
                                                    "description": "The current status of the dominant language detection job. If the status is <code>FAILED</code>, the <code>Message</code> field shows the reason for the failure.",
                                                    "enum": [
                                                        "SUBMITTED",
                                                        "IN_PROGRESS",
                                                        "COMPLETED",
                                                        "FAILED",
                                                        "STOP_REQUESTED",
                                                        "STOPPED"
                                                    ],
                                                    "type": "string"
                                                },
                                                "Message": {
                                                    "description": "A description for the status of a job.",
                                                    "type": "string"
                                                },
                                                "OutputDataConfig": {
                                                    "description": "The output data configuration that you supplied when you created the dominant language detection job.",
                                                    "properties": {
                                                        "S3Uri": {
                                                            "description": "<p>When you use the <code>OutputDataConfig</code> object with asynchronous operations, you specify the Amazon S3 location where you want to write the output data. The URI must be in the same region as the API endpoint that you are calling. The location is used as the prefix for the actual location of the output file.</p> <p>When the topic detection job is finished, the service creates an output file in a directory specific to the job. The <code>S3Uri</code> field contains the location of the output file, called <code>output.tar.gz</code>. It is a compressed archive that contains the ouput of the operation.</p>",
                                                            "maxLength": 1024,
                                                            "pattern": "s3://[a-z0-9][\\.\\-a-z0-9]{1,61}[a-z0-9](/.*)?",
                                                            "type": "string"
                                                        }
                                                    },
                                                    "required": [
                                                        "S3Uri"
                                                    ],
                                                    "type": "object"
                                                },
                                                "SubmitTime": {
                                                    "description": "The time that the dominant language detection job was submitted for processing.",
                                                    "format": "date-time",
                                                    "type": "string"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "480": {
                        "description": "InvalidRequestException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "JobNotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "482": {
                        "description": "TooManyRequestsException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "483": {
                        "description": "InternalServerException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "JobId": {
                                        "description": "The identifier that Amazon Comprehend generated for the job. The operation returns this identifier in its response.",
                                        "maxLength": 32,
                                        "minLength": 1,
                                        "pattern": "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-%@]*)$",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "JobId"
                                ],
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            }
        },
        "/#DescribeEntitiesDetectionJob": {
            "parameters": [
                {
                    "in": "query",
                    "name": "Action",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "query",
                    "name": "Version",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Content-Sha256",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Date",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Algorithm",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Credential",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Security-Token",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Signature",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-SignedHeaders",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                }
            ],
            "post": {
                "description": "Gets the properties associated with an entities detection job. Use this operation to get the status of a detection job.",
                "operationId": "DescribeEntitiesDetectionJob",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "EntitiesDetectionJobProperties": {
                                            "description": "An object that contains the properties associated with an entities detection job.",
                                            "properties": {
                                                "DataAccessRoleArn": {
                                                    "description": "The Amazon Resource Name (ARN) that gives Amazon Comprehend read access to your input data.",
                                                    "maxLength": 2048,
                                                    "minLength": 20,
                                                    "pattern": "arn:aws(-[^:]+)?:iam::[0-9]{12}:role/.+",
                                                    "type": "string"
                                                },
                                                "EndTime": {
                                                    "description": "The time that the entities detection job completed",
                                                    "format": "date-time",
                                                    "type": "string"
                                                },
                                                "EntityRecognizerArn": {
                                                    "description": "The Amazon Resource Name (ARN) that identifies the entity recognizer.",
                                                    "maxLength": 256,
                                                    "pattern": "arn:aws:comprehend:[a-zA-Z0-9-]*:[0-9]{12}:entity-recognizer/[a-zA-Z0-9](-*[a-zA-Z0-9])*",
                                                    "type": "string"
                                                },
                                                "InputDataConfig": {
                                                    "description": "The input data configuration that you supplied when you created the entities detection job.",
                                                    "properties": {
                                                        "InputFormat": {
                                                            "description": "<p>Specifies how the text in an input file should be processed:</p> <ul> <li> <p> <code>ONE_DOC_PER_FILE</code> - Each file is considered a separate document. Use this option when you are processing large documents, such as newspaper articles or scientific papers.</p> </li> <li> <p> <code>ONE_DOC_PER_LINE</code> - Each line in a file is considered a separate document. Use this option when you are processing many short documents, such as text messages.</p> </li> </ul>",
                                                            "enum": [
                                                                "ONE_DOC_PER_FILE",
                                                                "ONE_DOC_PER_LINE"
                                                            ],
                                                            "type": "string"
                                                        },
                                                        "S3Uri": {
                                                            "description": "<p>The Amazon S3 URI for the input data. The URI must be in same region as the API endpoint that you are calling. The URI can point to a single input file or it can provide the prefix for a collection of data files. </p> <p>For example, if you use the URI <code>S3://bucketName/prefix</code>, if the prefix is a single file, Amazon Comprehend uses that file as input. If more than one file begins with the prefix, Amazon Comprehend uses all of them as input.</p>",
                                                            "maxLength": 1024,
                                                            "pattern": "s3://[a-z0-9][\\.\\-a-z0-9]{1,61}[a-z0-9](/.*)?",
                                                            "type": "string"
                                                        }
                                                    },
                                                    "required": [
                                                        "S3Uri"
                                                    ],
                                                    "type": "object"
                                                },
                                                "JobId": {
                                                    "description": "The identifier assigned to the entities detection job.",
                                                    "maxLength": 32,
                                                    "minLength": 1,
                                                    "pattern": "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-%@]*)$",
                                                    "type": "string"
                                                },
                                                "JobName": {
                                                    "description": "The name that you assigned the entities detection job.",
                                                    "maxLength": 256,
                                                    "minLength": 1,
                                                    "pattern": "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-%@]*)$",
                                                    "type": "string"
                                                },
                                                "JobStatus": {
                                                    "description": "The current status of the entities detection job. If the status is <code>FAILED</code>, the <code>Message</code> field shows the reason for the failure.",
                                                    "enum": [
                                                        "SUBMITTED",
                                                        "IN_PROGRESS",
                                                        "COMPLETED",
                                                        "FAILED",
                                                        "STOP_REQUESTED",
                                                        "STOPPED"
                                                    ],
                                                    "type": "string"
                                                },
                                                "LanguageCode": {
                                                    "description": "The language code of the input documents.",
                                                    "enum": [
                                                        "en",
                                                        "es",
                                                        "fr",
                                                        "de",
                                                        "it",
                                                        "pt"
                                                    ],
                                                    "type": "string"
                                                },
                                                "Message": {
                                                    "description": "A description of the status of a job.",
                                                    "type": "string"
                                                },
                                                "OutputDataConfig": {
                                                    "description": "The output data configuration that you supplied when you created the entities detection job. ",
                                                    "properties": {
                                                        "S3Uri": {
                                                            "description": "<p>When you use the <code>OutputDataConfig</code> object with asynchronous operations, you specify the Amazon S3 location where you want to write the output data. The URI must be in the same region as the API endpoint that you are calling. The location is used as the prefix for the actual location of the output file.</p> <p>When the topic detection job is finished, the service creates an output file in a directory specific to the job. The <code>S3Uri</code> field contains the location of the output file, called <code>output.tar.gz</code>. It is a compressed archive that contains the ouput of the operation.</p>",
                                                            "maxLength": 1024,
                                                            "pattern": "s3://[a-z0-9][\\.\\-a-z0-9]{1,61}[a-z0-9](/.*)?",
                                                            "type": "string"
                                                        }
                                                    },
                                                    "required": [
                                                        "S3Uri"
                                                    ],
                                                    "type": "object"
                                                },
                                                "SubmitTime": {
                                                    "description": "The time that the entities detection job was submitted for processing.",
                                                    "format": "date-time",
                                                    "type": "string"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "480": {
                        "description": "InvalidRequestException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "JobNotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "482": {
                        "description": "TooManyRequestsException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "483": {
                        "description": "InternalServerException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "JobId": {
                                        "description": "The identifier that Amazon Comprehend generated for the job. The operation returns this identifier in its response.",
                                        "maxLength": 32,
                                        "minLength": 1,
                                        "pattern": "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-%@]*)$",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "JobId"
                                ],
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            }
        },
        "/#DescribeEntityRecognizer": {
            "parameters": [
                {
                    "in": "query",
                    "name": "Action",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "query",
                    "name": "Version",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Content-Sha256",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Date",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Algorithm",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Credential",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Security-Token",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Signature",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-SignedHeaders",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                }
            ],
            "post": {
                "description": "Provides details about an entity recognizer including status, S3 buckets containing training data, recognizer metadata, metrics, and so on.",
                "operationId": "DescribeEntityRecognizer",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "EntityRecognizerProperties": {
                                            "description": "Describes information associated with an entity recognizer.",
                                            "properties": {
                                                "DataAccessRoleArn": {
                                                    "description": " The Amazon Resource Name (ARN) of the AWS Identity and Management (IAM) role that grants Amazon Comprehend read access to your input data.",
                                                    "maxLength": 2048,
                                                    "minLength": 20,
                                                    "pattern": "arn:aws(-[^:]+)?:iam::[0-9]{12}:role/.+",
                                                    "type": "string"
                                                },
                                                "EndTime": {
                                                    "description": "The time that the recognizer creation completed.",
                                                    "format": "date-time",
                                                    "type": "string"
                                                },
                                                "EntityRecognizerArn": {
                                                    "description": "The Amazon Resource Name (ARN) that identifies the entity recognizer.",
                                                    "maxLength": 256,
                                                    "pattern": "arn:aws:comprehend:[a-zA-Z0-9-]*:[0-9]{12}:entity-recognizer/[a-zA-Z0-9](-*[a-zA-Z0-9])*",
                                                    "type": "string"
                                                },
                                                "InputDataConfig": {
                                                    "description": "The input data properties of an entity recognizer.",
                                                    "properties": {
                                                        "Annotations": {
                                                            "description": "S3 location of the annotations file for an entity recognizer.",
                                                            "properties": {
                                                                "S3Uri": {
                                                                    "description": " Specifies the Amazon S3 location where the annotations for an entity recognizer are located. The URI must be in the same region as the API endpoint that you are calling.",
                                                                    "maxLength": 1024,
                                                                    "pattern": "s3://[a-z0-9][\\.\\-a-z0-9]{1,61}[a-z0-9](/.*)?",
                                                                    "type": "string"
                                                                }
                                                            },
                                                            "required": [
                                                                "S3Uri"
                                                            ],
                                                            "type": "object"
                                                        },
                                                        "Documents": {
                                                            "description": "S3 location of the documents folder for an entity recognizer",
                                                            "properties": {
                                                                "S3Uri": {
                                                                    "description": " Specifies the Amazon S3 location where the training documents for an entity recognizer are located. The URI must be in the same region as the API endpoint that you are calling.",
                                                                    "maxLength": 1024,
                                                                    "pattern": "s3://[a-z0-9][\\.\\-a-z0-9]{1,61}[a-z0-9](/.*)?",
                                                                    "type": "string"
                                                                }
                                                            },
                                                            "required": [
                                                                "S3Uri"
                                                            ],
                                                            "type": "object"
                                                        },
                                                        "EntityList": {
                                                            "description": "S3 location of the entity list for an entity recognizer.",
                                                            "properties": {
                                                                "S3Uri": {
                                                                    "description": "Specifies the Amazon S3 location where the entity list is located. The URI must be in the same region as the API endpoint that you are calling.",
                                                                    "maxLength": 1024,
                                                                    "pattern": "s3://[a-z0-9][\\.\\-a-z0-9]{1,61}[a-z0-9](/.*)?",
                                                                    "type": "string"
                                                                }
                                                            },
                                                            "required": [
                                                                "S3Uri"
                                                            ],
                                                            "type": "object"
                                                        },
                                                        "EntityTypes": {
                                                            "description": "The entity types in the input data for an entity recognizer.",
                                                            "items": {
                                                                "description": "Information about an individual item on a list of entity types.",
                                                                "properties": {
                                                                    "Type": {
                                                                        "description": "Entity type of an item on an entity type list.",
                                                                        "maxLength": 64,
                                                                        "pattern": "[_A-Z0-9]+",
                                                                        "type": "string"
                                                                    }
                                                                },
                                                                "required": [
                                                                    "Type"
                                                                ],
                                                                "type": "object"
                                                            },
                                                            "type": "array"
                                                        }
                                                    },
                                                    "required": [
                                                        "EntityTypes",
                                                        "Documents"
                                                    ],
                                                    "type": "object"
                                                },
                                                "LanguageCode": {
                                                    "description": " The language of the input documents. All documents must be in the same language. Only English (\"en\") is currently supported.",
                                                    "enum": [
                                                        "en",
                                                        "es",
                                                        "fr",
                                                        "de",
                                                        "it",
                                                        "pt"
                                                    ],
                                                    "type": "string"
                                                },
                                                "Message": {
                                                    "description": " A description of the status of the recognizer.",
                                                    "type": "string"
                                                },
                                                "RecognizerMetadata": {
                                                    "description": " Provides information about an entity recognizer.",
                                                    "properties": {
                                                        "EntityTypes": {
                                                            "description": "Entity types from the metadata of an entity recognizer.",
                                                            "items": {
                                                                "description": "Individual item from the list of entity types in the metadata of an entity recognizer.",
                                                                "properties": {
                                                                    "Type": {
                                                                        "description": "Type of entity from the list of entity types in the metadata of an entity recognizer. ",
                                                                        "type": "string"
                                                                    }
                                                                },
                                                                "type": "object"
                                                            },
                                                            "type": "array"
                                                        },
                                                        "EvaluationMetrics": {
                                                            "description": " Detailed information about the accuracy of an entity recognizer.",
                                                            "properties": {
                                                                "F1Score": {
                                                                    "description": "A measure of how accurate the recognizer results are for the test data. It is derived from the <code>Precision</code> and <code>Recall</code> values. The <code>F1Score</code> is the harmonic average of the two scores. The highest score is 1, and the worst score is 0. ",
                                                                    "format": "double",
                                                                    "type": "number"
                                                                },
                                                                "Precision": {
                                                                    "description": "A measure of the usefulness of the recognizer results in the test data. High precision means that the recognizer returned substantially more relevant results than irrelevant ones. ",
                                                                    "format": "double",
                                                                    "type": "number"
                                                                },
                                                                "Recall": {
                                                                    "description": "A measure of how complete the recognizer results are for the test data. High recall means that the recognizer returned most of the relevant results.",
                                                                    "format": "double",
                                                                    "type": "number"
                                                                }
                                                            },
                                                            "type": "object"
                                                        },
                                                        "NumberOfTestDocuments": {
                                                            "description": " The number of documents in the input data that were used to test the entity recognizer. Typically this is 10 to 20 percent of the input documents.",
                                                            "type": "integer"
                                                        },
                                                        "NumberOfTrainedDocuments": {
                                                            "description": " The number of documents in the input data that were used to train the entity recognizer. Typically this is 80 to 90 percent of the input documents.",
                                                            "type": "integer"
                                                        }
                                                    },
                                                    "type": "object"
                                                },
                                                "Status": {
                                                    "description": "Provides the status of the entity recognizer.",
                                                    "enum": [
                                                        "SUBMITTED",
                                                        "TRAINING",
                                                        "DELETING",
                                                        "STOP_REQUESTED",
                                                        "STOPPED",
                                                        "IN_ERROR",
                                                        "TRAINED"
                                                    ],
                                                    "type": "string"
                                                },
                                                "SubmitTime": {
                                                    "description": "The time that the recognizer was submitted for processing.",
                                                    "format": "date-time",
                                                    "type": "string"
                                                },
                                                "TrainingEndTime": {
                                                    "description": "The time that training of the entity recognizer was completed.",
                                                    "format": "date-time",
                                                    "type": "string"
                                                },
                                                "TrainingStartTime": {
                                                    "description": "The time that training of the entity recognizer started.",
                                                    "format": "date-time",
                                                    "type": "string"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "480": {
                        "description": "InvalidRequestException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "TooManyRequestsException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "482": {
                        "description": "ResourceNotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "483": {
                        "description": "InternalServerException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "EntityRecognizerArn": {
                                        "description": "The Amazon Resource Name (ARN) that identifies the entity recognizer.",
                                        "maxLength": 256,
                                        "pattern": "arn:aws:comprehend:[a-zA-Z0-9-]*:[0-9]{12}:entity-recognizer/[a-zA-Z0-9](-*[a-zA-Z0-9])*",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "EntityRecognizerArn"
                                ],
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            }
        },
        "/#DescribeKeyPhrasesDetectionJob": {
            "parameters": [
                {
                    "in": "query",
                    "name": "Action",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "query",
                    "name": "Version",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Content-Sha256",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Date",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Algorithm",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Credential",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Security-Token",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Signature",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-SignedHeaders",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                }
            ],
            "post": {
                "description": "Gets the properties associated with a key phrases detection job. Use this operation to get the status of a detection job.",
                "operationId": "DescribeKeyPhrasesDetectionJob",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "KeyPhrasesDetectionJobProperties": {
                                            "description": "An object that contains the properties associated with a key phrases detection job. ",
                                            "properties": {
                                                "DataAccessRoleArn": {
                                                    "description": "The Amazon Resource Name (ARN) that gives Amazon Comprehend read access to your input data.",
                                                    "maxLength": 2048,
                                                    "minLength": 20,
                                                    "pattern": "arn:aws(-[^:]+)?:iam::[0-9]{12}:role/.+",
                                                    "type": "string"
                                                },
                                                "EndTime": {
                                                    "description": "The time that the key phrases detection job completed.",
                                                    "format": "date-time",
                                                    "type": "string"
                                                },
                                                "InputDataConfig": {
                                                    "description": "The input data configuration that you supplied when you created the key phrases detection job.",
                                                    "properties": {
                                                        "InputFormat": {
                                                            "description": "<p>Specifies how the text in an input file should be processed:</p> <ul> <li> <p> <code>ONE_DOC_PER_FILE</code> - Each file is considered a separate document. Use this option when you are processing large documents, such as newspaper articles or scientific papers.</p> </li> <li> <p> <code>ONE_DOC_PER_LINE</code> - Each line in a file is considered a separate document. Use this option when you are processing many short documents, such as text messages.</p> </li> </ul>",
                                                            "enum": [
                                                                "ONE_DOC_PER_FILE",
                                                                "ONE_DOC_PER_LINE"
                                                            ],
                                                            "type": "string"
                                                        },
                                                        "S3Uri": {
                                                            "description": "<p>The Amazon S3 URI for the input data. The URI must be in same region as the API endpoint that you are calling. The URI can point to a single input file or it can provide the prefix for a collection of data files. </p> <p>For example, if you use the URI <code>S3://bucketName/prefix</code>, if the prefix is a single file, Amazon Comprehend uses that file as input. If more than one file begins with the prefix, Amazon Comprehend uses all of them as input.</p>",
                                                            "maxLength": 1024,
                                                            "pattern": "s3://[a-z0-9][\\.\\-a-z0-9]{1,61}[a-z0-9](/.*)?",
                                                            "type": "string"
                                                        }
                                                    },
                                                    "required": [
                                                        "S3Uri"
                                                    ],
                                                    "type": "object"
                                                },
                                                "JobId": {
                                                    "description": "The identifier assigned to the key phrases detection job.",
                                                    "maxLength": 32,
                                                    "minLength": 1,
                                                    "pattern": "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-%@]*)$",
                                                    "type": "string"
                                                },
                                                "JobName": {
                                                    "description": "The name that you assigned the key phrases detection job.",
                                                    "maxLength": 256,
                                                    "minLength": 1,
                                                    "pattern": "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-%@]*)$",
                                                    "type": "string"
                                                },
                                                "JobStatus": {
                                                    "description": "The current status of the key phrases detection job. If the status is <code>FAILED</code>, the <code>Message</code> field shows the reason for the failure.",
                                                    "enum": [
                                                        "SUBMITTED",
                                                        "IN_PROGRESS",
                                                        "COMPLETED",
                                                        "FAILED",
                                                        "STOP_REQUESTED",
                                                        "STOPPED"
                                                    ],
                                                    "type": "string"
                                                },
                                                "LanguageCode": {
                                                    "description": "The language code of the input documents.",
                                                    "enum": [
                                                        "en",
                                                        "es",
                                                        "fr",
                                                        "de",
                                                        "it",
                                                        "pt"
                                                    ],
                                                    "type": "string"
                                                },
                                                "Message": {
                                                    "description": "A description of the status of a job.",
                                                    "type": "string"
                                                },
                                                "OutputDataConfig": {
                                                    "description": "The output data configuration that you supplied when you created the key phrases detection job.",
                                                    "properties": {
                                                        "S3Uri": {
                                                            "description": "<p>When you use the <code>OutputDataConfig</code> object with asynchronous operations, you specify the Amazon S3 location where you want to write the output data. The URI must be in the same region as the API endpoint that you are calling. The location is used as the prefix for the actual location of the output file.</p> <p>When the topic detection job is finished, the service creates an output file in a directory specific to the job. The <code>S3Uri</code> field contains the location of the output file, called <code>output.tar.gz</code>. It is a compressed archive that contains the ouput of the operation.</p>",
                                                            "maxLength": 1024,
                                                            "pattern": "s3://[a-z0-9][\\.\\-a-z0-9]{1,61}[a-z0-9](/.*)?",
                                                            "type": "string"
                                                        }
                                                    },
                                                    "required": [
                                                        "S3Uri"
                                                    ],
                                                    "type": "object"
                                                },
                                                "SubmitTime": {
                                                    "description": "The time that the key phrases detection job was submitted for processing.",
                                                    "format": "date-time",
                                                    "type": "string"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "480": {
                        "description": "InvalidRequestException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "JobNotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "482": {
                        "description": "TooManyRequestsException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "483": {
                        "description": "InternalServerException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "JobId": {
                                        "description": "The identifier that Amazon Comprehend generated for the job. The operation returns this identifier in its response.",
                                        "maxLength": 32,
                                        "minLength": 1,
                                        "pattern": "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-%@]*)$",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "JobId"
                                ],
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            }
        },
        "/#DescribeSentimentDetectionJob": {
            "parameters": [
                {
                    "in": "query",
                    "name": "Action",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "query",
                    "name": "Version",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Content-Sha256",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Date",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Algorithm",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Credential",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Security-Token",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Signature",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-SignedHeaders",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                }
            ],
            "post": {
                "description": "Gets the properties associated with a sentiment detection job. Use this operation to get the status of a detection job.",
                "operationId": "DescribeSentimentDetectionJob",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "SentimentDetectionJobProperties": {
                                            "description": "An object that contains the properties associated with a sentiment detection job.",
                                            "properties": {
                                                "DataAccessRoleArn": {
                                                    "description": "The Amazon Resource Name (ARN) that gives Amazon Comprehend read access to your input data.",
                                                    "maxLength": 2048,
                                                    "minLength": 20,
                                                    "pattern": "arn:aws(-[^:]+)?:iam::[0-9]{12}:role/.+",
                                                    "type": "string"
                                                },
                                                "EndTime": {
                                                    "description": "The time that the sentiment detection job ended.",
                                                    "format": "date-time",
                                                    "type": "string"
                                                },
                                                "InputDataConfig": {
                                                    "description": "The input data configuration that you supplied when you created the sentiment detection job.",
                                                    "properties": {
                                                        "InputFormat": {
                                                            "description": "<p>Specifies how the text in an input file should be processed:</p> <ul> <li> <p> <code>ONE_DOC_PER_FILE</code> - Each file is considered a separate document. Use this option when you are processing large documents, such as newspaper articles or scientific papers.</p> </li> <li> <p> <code>ONE_DOC_PER_LINE</code> - Each line in a file is considered a separate document. Use this option when you are processing many short documents, such as text messages.</p> </li> </ul>",
                                                            "enum": [
                                                                "ONE_DOC_PER_FILE",
                                                                "ONE_DOC_PER_LINE"
                                                            ],
                                                            "type": "string"
                                                        },
                                                        "S3Uri": {
                                                            "description": "<p>The Amazon S3 URI for the input data. The URI must be in same region as the API endpoint that you are calling. The URI can point to a single input file or it can provide the prefix for a collection of data files. </p> <p>For example, if you use the URI <code>S3://bucketName/prefix</code>, if the prefix is a single file, Amazon Comprehend uses that file as input. If more than one file begins with the prefix, Amazon Comprehend uses all of them as input.</p>",
                                                            "maxLength": 1024,
                                                            "pattern": "s3://[a-z0-9][\\.\\-a-z0-9]{1,61}[a-z0-9](/.*)?",
                                                            "type": "string"
                                                        }
                                                    },
                                                    "required": [
                                                        "S3Uri"
                                                    ],
                                                    "type": "object"
                                                },
                                                "JobId": {
                                                    "description": "The identifier assigned to the sentiment detection job.",
                                                    "maxLength": 32,
                                                    "minLength": 1,
                                                    "pattern": "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-%@]*)$",
                                                    "type": "string"
                                                },
                                                "JobName": {
                                                    "description": "The name that you assigned to the sentiment detection job",
                                                    "maxLength": 256,
                                                    "minLength": 1,
                                                    "pattern": "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-%@]*)$",
                                                    "type": "string"
                                                },
                                                "JobStatus": {
                                                    "description": "The current status of the sentiment detection job. If the status is <code>FAILED</code>, the <code>Messages</code> field shows the reason for the failure.",
                                                    "enum": [
                                                        "SUBMITTED",
                                                        "IN_PROGRESS",
                                                        "COMPLETED",
                                                        "FAILED",
                                                        "STOP_REQUESTED",
                                                        "STOPPED"
                                                    ],
                                                    "type": "string"
                                                },
                                                "LanguageCode": {
                                                    "description": "The language code of the input documents.",
                                                    "enum": [
                                                        "en",
                                                        "es",
                                                        "fr",
                                                        "de",
                                                        "it",
                                                        "pt"
                                                    ],
                                                    "type": "string"
                                                },
                                                "Message": {
                                                    "description": "A description of the status of a job.",
                                                    "type": "string"
                                                },
                                                "OutputDataConfig": {
                                                    "description": "The output data configuration that you supplied when you created the sentiment detection job.",
                                                    "properties": {
                                                        "S3Uri": {
                                                            "description": "<p>When you use the <code>OutputDataConfig</code> object with asynchronous operations, you specify the Amazon S3 location where you want to write the output data. The URI must be in the same region as the API endpoint that you are calling. The location is used as the prefix for the actual location of the output file.</p> <p>When the topic detection job is finished, the service creates an output file in a directory specific to the job. The <code>S3Uri</code> field contains the location of the output file, called <code>output.tar.gz</code>. It is a compressed archive that contains the ouput of the operation.</p>",
                                                            "maxLength": 1024,
                                                            "pattern": "s3://[a-z0-9][\\.\\-a-z0-9]{1,61}[a-z0-9](/.*)?",
                                                            "type": "string"
                                                        }
                                                    },
                                                    "required": [
                                                        "S3Uri"
                                                    ],
                                                    "type": "object"
                                                },
                                                "SubmitTime": {
                                                    "description": "The time that the sentiment detection job was submitted for processing.",
                                                    "format": "date-time",
                                                    "type": "string"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "480": {
                        "description": "InvalidRequestException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "JobNotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "482": {
                        "description": "TooManyRequestsException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "483": {
                        "description": "InternalServerException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "JobId": {
                                        "description": "The identifier that Amazon Comprehend generated for the job. The operation returns this identifier in its response.",
                                        "maxLength": 32,
                                        "minLength": 1,
                                        "pattern": "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-%@]*)$",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "JobId"
                                ],
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            }
        },
        "/#DescribeTopicsDetectionJob": {
            "parameters": [
                {
                    "in": "query",
                    "name": "Action",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "query",
                    "name": "Version",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Content-Sha256",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Date",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Algorithm",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Credential",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Security-Token",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Signature",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-SignedHeaders",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                }
            ],
            "post": {
                "description": "Gets the properties associated with a topic detection job. Use this operation to get the status of a detection job.",
                "operationId": "DescribeTopicsDetectionJob",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "TopicsDetectionJobProperties": {
                                            "description": "The list of properties for the requested job.",
                                            "properties": {
                                                "EndTime": {
                                                    "description": "The time that the topic detection job was completed.",
                                                    "format": "date-time",
                                                    "type": "string"
                                                },
                                                "InputDataConfig": {
                                                    "description": "The input data configuration supplied when you created the topic detection job.",
                                                    "properties": {
                                                        "InputFormat": {
                                                            "description": "<p>Specifies how the text in an input file should be processed:</p> <ul> <li> <p> <code>ONE_DOC_PER_FILE</code> - Each file is considered a separate document. Use this option when you are processing large documents, such as newspaper articles or scientific papers.</p> </li> <li> <p> <code>ONE_DOC_PER_LINE</code> - Each line in a file is considered a separate document. Use this option when you are processing many short documents, such as text messages.</p> </li> </ul>",
                                                            "enum": [
                                                                "ONE_DOC_PER_FILE",
                                                                "ONE_DOC_PER_LINE"
                                                            ],
                                                            "type": "string"
                                                        },
                                                        "S3Uri": {
                                                            "description": "<p>The Amazon S3 URI for the input data. The URI must be in same region as the API endpoint that you are calling. The URI can point to a single input file or it can provide the prefix for a collection of data files. </p> <p>For example, if you use the URI <code>S3://bucketName/prefix</code>, if the prefix is a single file, Amazon Comprehend uses that file as input. If more than one file begins with the prefix, Amazon Comprehend uses all of them as input.</p>",
                                                            "maxLength": 1024,
                                                            "pattern": "s3://[a-z0-9][\\.\\-a-z0-9]{1,61}[a-z0-9](/.*)?",
                                                            "type": "string"
                                                        }
                                                    },
                                                    "required": [
                                                        "S3Uri"
                                                    ],
                                                    "type": "object"
                                                },
                                                "JobId": {
                                                    "description": "The identifier assigned to the topic detection job.",
                                                    "maxLength": 32,
                                                    "minLength": 1,
                                                    "pattern": "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-%@]*)$",
                                                    "type": "string"
                                                },
                                                "JobName": {
                                                    "description": "The name of the topic detection job.",
                                                    "maxLength": 256,
                                                    "minLength": 1,
                                                    "pattern": "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-%@]*)$",
                                                    "type": "string"
                                                },
                                                "JobStatus": {
                                                    "description": "The current status of the topic detection job. If the status is <code>Failed</code>, the reason for the failure is shown in the <code>Message</code> field.",
                                                    "enum": [
                                                        "SUBMITTED",
                                                        "IN_PROGRESS",
                                                        "COMPLETED",
                                                        "FAILED",
                                                        "STOP_REQUESTED",
                                                        "STOPPED"
                                                    ],
                                                    "type": "string"
                                                },
                                                "Message": {
                                                    "description": "A description for the status of a job.",
                                                    "type": "string"
                                                },
                                                "NumberOfTopics": {
                                                    "description": "The number of topics to detect supplied when you created the topic detection job. The default is 10. ",
                                                    "type": "integer"
                                                },
                                                "OutputDataConfig": {
                                                    "description": "The output data configuration supplied when you created the topic detection job.",
                                                    "properties": {
                                                        "S3Uri": {
                                                            "description": "<p>When you use the <code>OutputDataConfig</code> object with asynchronous operations, you specify the Amazon S3 location where you want to write the output data. The URI must be in the same region as the API endpoint that you are calling. The location is used as the prefix for the actual location of the output file.</p> <p>When the topic detection job is finished, the service creates an output file in a directory specific to the job. The <code>S3Uri</code> field contains the location of the output file, called <code>output.tar.gz</code>. It is a compressed archive that contains the ouput of the operation.</p>",
                                                            "maxLength": 1024,
                                                            "pattern": "s3://[a-z0-9][\\.\\-a-z0-9]{1,61}[a-z0-9](/.*)?",
                                                            "type": "string"
                                                        }
                                                    },
                                                    "required": [
                                                        "S3Uri"
                                                    ],
                                                    "type": "object"
                                                },
                                                "SubmitTime": {
                                                    "description": "The time that the topic detection job was submitted for processing.",
                                                    "format": "date-time",
                                                    "type": "string"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "480": {
                        "description": "InvalidRequestException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "JobNotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "482": {
                        "description": "TooManyRequestsException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "483": {
                        "description": "InternalServerException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "JobId": {
                                        "description": "The identifier assigned by the user to the detection job.",
                                        "maxLength": 32,
                                        "minLength": 1,
                                        "pattern": "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-%@]*)$",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "JobId"
                                ],
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            }
        },
        "/#DetectDominantLanguage": {
            "parameters": [
                {
                    "in": "query",
                    "name": "Action",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "query",
                    "name": "Version",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Content-Sha256",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Date",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Algorithm",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Credential",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Security-Token",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Signature",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-SignedHeaders",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                }
            ],
            "post": {
                "description": "Determines the dominant language of the input text. For a list of languages that Amazon Comprehend can detect, see <a href=\"http://docs.aws.amazon.com/comprehend/latest/dg/how-languages.html\">Amazon Comprehend Supported Languages</a>. ",
                "operationId": "DetectDominantLanguage",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "Languages": {
                                            "description": "The languages that Amazon Comprehend detected in the input text. For each language, the response returns the RFC 5646 language code and the level of confidence that Amazon Comprehend has in the accuracy of its inference. For more information about RFC 5646, see <a href=\"https://tools.ietf.org/html/rfc5646\">Tags for Identifying Languages</a> on the <i>IETF Tools</i> web site.",
                                            "items": {
                                                "description": "Returns the code for the dominant language in the input text and the level of confidence that Amazon Comprehend has in the accuracy of the detection.",
                                                "properties": {
                                                    "LanguageCode": {
                                                        "description": "The RFC 5646 language code for the dominant language. For more information about RFC 5646, see <a href=\"https://tools.ietf.org/html/rfc5646\">Tags for Identifying Languages</a> on the <i>IETF Tools</i> web site.",
                                                        "minLength": 1,
                                                        "type": "string"
                                                    },
                                                    "Score": {
                                                        "description": "The level of confidence that Amazon Comprehend has in the accuracy of the detection.",
                                                        "format": "float",
                                                        "type": "number"
                                                    }
                                                },
                                                "type": "object"
                                            },
                                            "type": "array"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "480": {
                        "description": "InvalidRequestException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "TextSizeLimitExceededException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "482": {
                        "description": "InternalServerException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "Text": {
                                        "description": "A UTF-8 text string. Each string should contain at least 20 characters and must contain fewer that 5,000 bytes of UTF-8 encoded characters.",
                                        "minLength": 1,
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "Text"
                                ],
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            }
        },
        "/#DetectEntities": {
            "parameters": [
                {
                    "in": "query",
                    "name": "Action",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "query",
                    "name": "Version",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Content-Sha256",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Date",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Algorithm",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Credential",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Security-Token",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Signature",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-SignedHeaders",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                }
            ],
            "post": {
                "description": "Inspects text for named entities, and returns information about them. For more information, about named entities, see <a>how-entities</a>. ",
                "operationId": "DetectEntities",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "Entities": {
                                            "description": "A collection of entities identified in the input text. For each entity, the response provides the entity text, entity type, where the entity text begins and ends, and the level of confidence that Amazon Comprehend has in the detection. For a list of entity types, see <a>how-entities</a>. ",
                                            "items": {
                                                "description": "<p>Provides information about an entity. </p> <p> </p>",
                                                "properties": {
                                                    "BeginOffset": {
                                                        "description": "A character offset in the input text that shows where the entity begins (the first character is at position 0). The offset returns the position of each UTF-8 code point in the string. A <i>code point</i> is the abstract character from a particular graphical representation. For example, a multi-byte UTF-8 character maps to a single code point.",
                                                        "type": "integer"
                                                    },
                                                    "EndOffset": {
                                                        "description": "A character offset in the input text that shows where the entity ends. The offset returns the position of each UTF-8 code point in the string. A <i>code point</i> is the abstract character from a particular graphical representation. For example, a multi-byte UTF-8 character maps to a single code point. ",
                                                        "type": "integer"
                                                    },
                                                    "Score": {
                                                        "description": "The level of confidence that Amazon Comprehend has in the accuracy of the detection.",
                                                        "format": "float",
                                                        "type": "number"
                                                    },
                                                    "Text": {
                                                        "description": "The text of the entity.",
                                                        "minLength": 1,
                                                        "type": "string"
                                                    },
                                                    "Type": {
                                                        "description": "The entity's type.",
                                                        "enum": [
                                                            "PERSON",
                                                            "LOCATION",
                                                            "ORGANIZATION",
                                                            "COMMERCIAL_ITEM",
                                                            "EVENT",
                                                            "DATE",
                                                            "QUANTITY",
                                                            "TITLE",
                                                            "OTHER"
                                                        ],
                                                        "type": "string"
                                                    }
                                                },
                                                "type": "object"
                                            },
                                            "type": "array"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "480": {
                        "description": "InvalidRequestException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "TextSizeLimitExceededException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "482": {
                        "description": "UnsupportedLanguageException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "483": {
                        "description": "InternalServerException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "LanguageCode": {
                                        "description": "The language of the input documents. You can specify English (\"en\") or Spanish (\"es\"). All documents must be in the same language.",
                                        "enum": [
                                            "en",
                                            "es",
                                            "fr",
                                            "de",
                                            "it",
                                            "pt"
                                        ],
                                        "type": "string"
                                    },
                                    "Text": {
                                        "description": "A UTF-8 text string. Each string must contain fewer that 5,000 bytes of UTF-8 encoded characters.",
                                        "minLength": 1,
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "Text",
                                    "LanguageCode"
                                ],
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            }
        },
        "/#DetectKeyPhrases": {
            "parameters": [
                {
                    "in": "query",
                    "name": "Action",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "query",
                    "name": "Version",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Content-Sha256",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Date",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Algorithm",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Credential",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Security-Token",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Signature",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-SignedHeaders",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                }
            ],
            "post": {
                "description": "Detects the key noun phrases found in the text. ",
                "operationId": "DetectKeyPhrases",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "KeyPhrases": {
                                            "description": "A collection of key phrases that Amazon Comprehend identified in the input text. For each key phrase, the response provides the text of the key phrase, where the key phrase begins and ends, and the level of confidence that Amazon Comprehend has in the accuracy of the detection. ",
                                            "items": {
                                                "description": "Describes a key noun phrase.",
                                                "properties": {
                                                    "BeginOffset": {
                                                        "description": "A character offset in the input text that shows where the key phrase begins (the first character is at position 0). The offset returns the position of each UTF-8 code point in the string. A <i>code point</i> is the abstract character from a particular graphical representation. For example, a multi-byte UTF-8 character maps to a single code point.",
                                                        "type": "integer"
                                                    },
                                                    "EndOffset": {
                                                        "description": "A character offset in the input text where the key phrase ends. The offset returns the position of each UTF-8 code point in the string. A <code>code point</code> is the abstract character from a particular graphical representation. For example, a multi-byte UTF-8 character maps to a single code point.",
                                                        "type": "integer"
                                                    },
                                                    "Score": {
                                                        "description": "The level of confidence that Amazon Comprehend has in the accuracy of the detection.",
                                                        "format": "float",
                                                        "type": "number"
                                                    },
                                                    "Text": {
                                                        "description": "The text of a key noun phrase.",
                                                        "minLength": 1,
                                                        "type": "string"
                                                    }
                                                },
                                                "type": "object"
                                            },
                                            "type": "array"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "480": {
                        "description": "InvalidRequestException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "TextSizeLimitExceededException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "482": {
                        "description": "UnsupportedLanguageException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "483": {
                        "description": "InternalServerException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "LanguageCode": {
                                        "description": "The language of the input documents. You can specify English (\"en\") or Spanish (\"es\"). All documents must be in the same language.",
                                        "enum": [
                                            "en",
                                            "es",
                                            "fr",
                                            "de",
                                            "it",
                                            "pt"
                                        ],
                                        "type": "string"
                                    },
                                    "Text": {
                                        "description": "A UTF-8 text string. Each string must contain fewer that 5,000 bytes of UTF-8 encoded characters.",
                                        "minLength": 1,
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "Text",
                                    "LanguageCode"
                                ],
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            }
        },
        "/#DetectSentiment": {
            "parameters": [
                {
                    "in": "query",
                    "name": "Action",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "query",
                    "name": "Version",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Content-Sha256",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Date",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Algorithm",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Credential",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Security-Token",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Signature",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-SignedHeaders",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                }
            ],
            "post": {
                "description": "Inspects text and returns an inference of the prevailing sentiment (<code>POSITIVE</code>, <code>NEUTRAL</code>, <code>MIXED</code>, or <code>NEGATIVE</code>). ",
                "operationId": "DetectSentiment",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "Sentiment": {
                                            "description": "The inferred sentiment that Amazon Comprehend has the highest level of confidence in.",
                                            "enum": [
                                                "POSITIVE",
                                                "NEGATIVE",
                                                "NEUTRAL",
                                                "MIXED"
                                            ],
                                            "type": "string"
                                        },
                                        "SentimentScore": {
                                            "description": "An object that lists the sentiments, and their corresponding confidence levels.",
                                            "properties": {
                                                "Mixed": {
                                                    "description": "The level of confidence that Amazon Comprehend has in the accuracy of its detection of the <code>MIXED</code> sentiment.",
                                                    "format": "float",
                                                    "type": "number"
                                                },
                                                "Negative": {
                                                    "description": "The level of confidence that Amazon Comprehend has in the accuracy of its detection of the <code>NEGATIVE</code> sentiment.",
                                                    "format": "float",
                                                    "type": "number"
                                                },
                                                "Neutral": {
                                                    "description": "The level of confidence that Amazon Comprehend has in the accuracy of its detection of the <code>NEUTRAL</code> sentiment.",
                                                    "format": "float",
                                                    "type": "number"
                                                },
                                                "Positive": {
                                                    "description": "The level of confidence that Amazon Comprehend has in the accuracy of its detection of the <code>POSITIVE</code> sentiment.",
                                                    "format": "float",
                                                    "type": "number"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "480": {
                        "description": "InvalidRequestException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "TextSizeLimitExceededException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "482": {
                        "description": "UnsupportedLanguageException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "483": {
                        "description": "InternalServerException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "LanguageCode": {
                                        "description": "The language of the input documents. You can specify English (\"en\") or Spanish (\"es\"). All documents must be in the same language.",
                                        "enum": [
                                            "en",
                                            "es",
                                            "fr",
                                            "de",
                                            "it",
                                            "pt"
                                        ],
                                        "type": "string"
                                    },
                                    "Text": {
                                        "description": "A UTF-8 text string. Each string must contain fewer that 5,000 bytes of UTF-8 encoded characters.",
                                        "minLength": 1,
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "Text",
                                    "LanguageCode"
                                ],
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            }
        },
        "/#DetectSyntax": {
            "parameters": [
                {
                    "in": "query",
                    "name": "Action",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "query",
                    "name": "Version",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Content-Sha256",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Date",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Algorithm",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Credential",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Security-Token",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Signature",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-SignedHeaders",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                }
            ],
            "post": {
                "description": "Inspects text for syntax and the part of speech of words in the document. For more information, <a>how-syntax</a>.",
                "operationId": "DetectSyntax",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "SyntaxTokens": {
                                            "description": "A collection of syntax tokens describing the text. For each token, the response provides the text, the token type, where the text begins and ends, and the level of confidence that Amazon Comprehend has that the token is correct. For a list of token types, see <a>how-syntax</a>.",
                                            "items": {
                                                "description": "Represents a work in the input text that was recognized and assigned a part of speech. There is one syntax token record for each word in the source text.",
                                                "properties": {
                                                    "BeginOffset": {
                                                        "description": "The zero-based offset from the beginning of the source text to the first character in the word.",
                                                        "type": "integer"
                                                    },
                                                    "EndOffset": {
                                                        "description": "The zero-based offset from the beginning of the source text to the last character in the word.",
                                                        "type": "integer"
                                                    },
                                                    "PartOfSpeech": {
                                                        "description": "Provides the part of speech label and the confidence level that Amazon Comprehend has that the part of speech was correctly identified. For more information, see <a>how-syntax</a>.",
                                                        "properties": {
                                                            "Score": {
                                                                "description": "The confidence that Amazon Comprehend has that the part of speech was correctly identified.",
                                                                "format": "float",
                                                                "type": "number"
                                                            },
                                                            "Tag": {
                                                                "description": "Identifies the part of speech that the token represents.",
                                                                "enum": [
                                                                    "ADJ",
                                                                    "ADP",
                                                                    "ADV",
                                                                    "AUX",
                                                                    "CONJ",
                                                                    "CCONJ",
                                                                    "DET",
                                                                    "INTJ",
                                                                    "NOUN",
                                                                    "NUM",
                                                                    "O",
                                                                    "PART",
                                                                    "PRON",
                                                                    "PROPN",
                                                                    "PUNCT",
                                                                    "SCONJ",
                                                                    "SYM",
                                                                    "VERB"
                                                                ],
                                                                "type": "string"
                                                            }
                                                        },
                                                        "type": "object"
                                                    },
                                                    "Text": {
                                                        "description": "The word that was recognized in the source text.",
                                                        "minLength": 1,
                                                        "type": "string"
                                                    },
                                                    "TokenId": {
                                                        "description": "A unique identifier for a token.",
                                                        "type": "integer"
                                                    }
                                                },
                                                "type": "object"
                                            },
                                            "type": "array"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "480": {
                        "description": "InvalidRequestException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "TextSizeLimitExceededException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "482": {
                        "description": "UnsupportedLanguageException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "483": {
                        "description": "InternalServerException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "LanguageCode": {
                                        "description": "The language code of the input documents. You can specify English (\"en\") or Spanish (\"es\").",
                                        "enum": [
                                            "en",
                                            "es",
                                            "fr",
                                            "de",
                                            "it",
                                            "pt"
                                        ],
                                        "type": "string"
                                    },
                                    "Text": {
                                        "description": "A UTF-8 string. Each string must contain fewer that 5,000 bytes of UTF encoded characters.",
                                        "minLength": 1,
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "Text",
                                    "LanguageCode"
                                ],
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            }
        },
        "/#ListDocumentClassificationJobs": {
            "parameters": [
                {
                    "in": "query",
                    "name": "Action",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "query",
                    "name": "Version",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Content-Sha256",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Date",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Algorithm",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Credential",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Security-Token",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Signature",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-SignedHeaders",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                }
            ],
            "post": {
                "description": "Gets a list of the documentation classification jobs that you have submitted.",
                "operationId": "ListDocumentClassificationJobs",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "DocumentClassificationJobPropertiesList": {
                                            "description": "A list containing the properties of each job returned.",
                                            "items": {
                                                "description": "Provides information about a document classification job.",
                                                "properties": {
                                                    "DataAccessRoleArn": {
                                                        "description": "The Amazon Resource Name (ARN) of the AWS identity and Access Management (IAM) role that grants Amazon Comprehend read access to your input data.",
                                                        "maxLength": 2048,
                                                        "minLength": 20,
                                                        "pattern": "arn:aws(-[^:]+)?:iam::[0-9]{12}:role/.+",
                                                        "type": "string"
                                                    },
                                                    "DocumentClassifierArn": {
                                                        "description": "The Amazon Resource Name (ARN) that identifies the document classifier. ",
                                                        "maxLength": 256,
                                                        "pattern": "arn:aws:comprehend:[a-zA-Z0-9-]*:[0-9]{12}:document-classifier/[a-zA-Z0-9](-*[a-zA-Z0-9])*",
                                                        "type": "string"
                                                    },
                                                    "EndTime": {
                                                        "description": "The time that the document classification job completed.",
                                                        "format": "date-time",
                                                        "type": "string"
                                                    },
                                                    "InputDataConfig": {
                                                        "description": "The input data configuration that you supplied when you created the document classification job.",
                                                        "properties": {
                                                            "InputFormat": {
                                                                "description": "<p>Specifies how the text in an input file should be processed:</p> <ul> <li> <p> <code>ONE_DOC_PER_FILE</code> - Each file is considered a separate document. Use this option when you are processing large documents, such as newspaper articles or scientific papers.</p> </li> <li> <p> <code>ONE_DOC_PER_LINE</code> - Each line in a file is considered a separate document. Use this option when you are processing many short documents, such as text messages.</p> </li> </ul>",
                                                                "enum": [
                                                                    "ONE_DOC_PER_FILE",
                                                                    "ONE_DOC_PER_LINE"
                                                                ],
                                                                "type": "string"
                                                            },
                                                            "S3Uri": {
                                                                "description": "<p>The Amazon S3 URI for the input data. The URI must be in same region as the API endpoint that you are calling. The URI can point to a single input file or it can provide the prefix for a collection of data files. </p> <p>For example, if you use the URI <code>S3://bucketName/prefix</code>, if the prefix is a single file, Amazon Comprehend uses that file as input. If more than one file begins with the prefix, Amazon Comprehend uses all of them as input.</p>",
                                                                "maxLength": 1024,
                                                                "pattern": "s3://[a-z0-9][\\.\\-a-z0-9]{1,61}[a-z0-9](/.*)?",
                                                                "type": "string"
                                                            }
                                                        },
                                                        "required": [
                                                            "S3Uri"
                                                        ],
                                                        "type": "object"
                                                    },
                                                    "JobId": {
                                                        "description": "The identifier assigned to the document classification job.",
                                                        "maxLength": 32,
                                                        "minLength": 1,
                                                        "pattern": "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-%@]*)$",
                                                        "type": "string"
                                                    },
                                                    "JobName": {
                                                        "description": "The name that you assigned to the document classification job.",
                                                        "maxLength": 256,
                                                        "minLength": 1,
                                                        "pattern": "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-%@]*)$",
                                                        "type": "string"
                                                    },
                                                    "JobStatus": {
                                                        "description": "The current status of the document classification job. If the status is <code>FAILED</code>, the <code>Message</code> field shows the reason for the failure.",
                                                        "enum": [
                                                            "SUBMITTED",
                                                            "IN_PROGRESS",
                                                            "COMPLETED",
                                                            "FAILED",
                                                            "STOP_REQUESTED",
                                                            "STOPPED"
                                                        ],
                                                        "type": "string"
                                                    },
                                                    "Message": {
                                                        "description": "A description of the status of the job.",
                                                        "type": "string"
                                                    },
                                                    "OutputDataConfig": {
                                                        "description": "The output data configuration that you supplied when you created the document classification job.",
                                                        "properties": {
                                                            "S3Uri": {
                                                                "description": "<p>When you use the <code>OutputDataConfig</code> object with asynchronous operations, you specify the Amazon S3 location where you want to write the output data. The URI must be in the same region as the API endpoint that you are calling. The location is used as the prefix for the actual location of the output file.</p> <p>When the topic detection job is finished, the service creates an output file in a directory specific to the job. The <code>S3Uri</code> field contains the location of the output file, called <code>output.tar.gz</code>. It is a compressed archive that contains the ouput of the operation.</p>",
                                                                "maxLength": 1024,
                                                                "pattern": "s3://[a-z0-9][\\.\\-a-z0-9]{1,61}[a-z0-9](/.*)?",
                                                                "type": "string"
                                                            }
                                                        },
                                                        "required": [
                                                            "S3Uri"
                                                        ],
                                                        "type": "object"
                                                    },
                                                    "SubmitTime": {
                                                        "description": "The time that the document classification job was submitted for processing.",
                                                        "format": "date-time",
                                                        "type": "string"
                                                    }
                                                },
                                                "type": "object"
                                            },
                                            "type": "array"
                                        },
                                        "NextToken": {
                                            "description": "Identifies the next page of results to return.",
                                            "minLength": 1,
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "480": {
                        "description": "InvalidRequestException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "TooManyRequestsException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "482": {
                        "description": "InvalidFilterException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "483": {
                        "description": "InternalServerException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "Filter": {
                                        "description": "Filters the jobs that are returned. You can filter jobs on their names, status, or the date and time that they were submitted. You can only set one filter at a time.",
                                        "properties": {
                                            "JobName": {
                                                "description": "Filters on the name of the job.",
                                                "maxLength": 256,
                                                "minLength": 1,
                                                "pattern": "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-%@]*)$",
                                                "type": "string"
                                            },
                                            "JobStatus": {
                                                "description": "Filters the list based on job status. Returns only jobs with the specified status.",
                                                "enum": [
                                                    "SUBMITTED",
                                                    "IN_PROGRESS",
                                                    "COMPLETED",
                                                    "FAILED",
                                                    "STOP_REQUESTED",
                                                    "STOPPED"
                                                ],
                                                "type": "string"
                                            },
                                            "SubmitTimeAfter": {
                                                "description": "Filters the list of jobs based on the time that the job was submitted for processing. Returns only jobs submitted before the specified time. Jobs are returned in descending order, newest to oldest.",
                                                "format": "date-time",
                                                "type": "string"
                                            },
                                            "SubmitTimeBefore": {
                                                "description": "Filters the list of jobs based on the time that the job was submitted for processing. Returns only jobs submitted after the specified time. Jobs are returned in ascending order, oldest to newest.",
                                                "format": "date-time",
                                                "type": "string"
                                            }
                                        },
                                        "type": "object"
                                    },
                                    "MaxResults": {
                                        "description": "The maximum number of results to return in each page. The default is 100.",
                                        "maximum": 500,
                                        "minimum": 1,
                                        "type": "integer"
                                    },
                                    "NextToken": {
                                        "description": "Identifies the next page of results to return.",
                                        "minLength": 1,
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            }
        },
        "/#ListDocumentClassifiers": {
            "parameters": [
                {
                    "in": "query",
                    "name": "Action",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "query",
                    "name": "Version",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Content-Sha256",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Date",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Algorithm",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Credential",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Security-Token",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Signature",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-SignedHeaders",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                }
            ],
            "post": {
                "description": "Gets a list of the document classifiers that you have created.",
                "operationId": "ListDocumentClassifiers",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "DocumentClassifierPropertiesList": {
                                            "description": "A list containing the properties of each job returned.",
                                            "items": {
                                                "description": "Provides information about a document classifier.",
                                                "properties": {
                                                    "ClassifierMetadata": {
                                                        "description": "Information about the document classifier, including the number of documents used for training the classifier, the number of documents used for test the classifier, and an accuracy rating.",
                                                        "properties": {
                                                            "EvaluationMetrics": {
                                                                "description": " Describes the result metrics for the test data associated with an documentation classifier.",
                                                                "properties": {
                                                                    "Accuracy": {
                                                                        "description": "The fraction of the labels that were correct recognized. It is computed by dividing the number of labels in the test documents that were correctly recognized by the total number of labels in the test documents.",
                                                                        "format": "double",
                                                                        "type": "number"
                                                                    },
                                                                    "F1Score": {
                                                                        "description": "A measure of how accurate the classifier results are for the test data. It is derived from the <code>Precision</code> and <code>Recall</code> values. The <code>F1Score</code> is the harmonic average of the two scores. The highest score is 1, and the worst score is 0. ",
                                                                        "format": "double",
                                                                        "type": "number"
                                                                    },
                                                                    "Precision": {
                                                                        "description": "A measure of the usefulness of the classifier results in the test data. High precision means that the classifier returned substantially more relevant results than irrelevant ones.",
                                                                        "format": "double",
                                                                        "type": "number"
                                                                    },
                                                                    "Recall": {
                                                                        "description": "A measure of how complete the classifier results are for the test data. High recall means that the classifier returned most of the relevant results. ",
                                                                        "format": "double",
                                                                        "type": "number"
                                                                    }
                                                                },
                                                                "type": "object"
                                                            },
                                                            "NumberOfLabels": {
                                                                "description": "The number of labels in the input data. ",
                                                                "type": "integer"
                                                            },
                                                            "NumberOfTestDocuments": {
                                                                "description": "The number of documents in the input data that were used to test the classifier. Typically this is 10 to 20 percent of the input documents.",
                                                                "type": "integer"
                                                            },
                                                            "NumberOfTrainedDocuments": {
                                                                "description": "The number of documents in the input data that were used to train the classifier. Typically this is 80 to 90 percent of the input documents.",
                                                                "type": "integer"
                                                            }
                                                        },
                                                        "type": "object"
                                                    },
                                                    "DataAccessRoleArn": {
                                                        "description": "The Amazon Resource Name (ARN) of the AWS Identity and Management (IAM) role that grants Amazon Comprehend read access to your input data.",
                                                        "maxLength": 2048,
                                                        "minLength": 20,
                                                        "pattern": "arn:aws(-[^:]+)?:iam::[0-9]{12}:role/.+",
                                                        "type": "string"
                                                    },
                                                    "DocumentClassifierArn": {
                                                        "description": "The Amazon Resource Name (ARN) that identifies the document classifier.",
                                                        "maxLength": 256,
                                                        "pattern": "arn:aws:comprehend:[a-zA-Z0-9-]*:[0-9]{12}:document-classifier/[a-zA-Z0-9](-*[a-zA-Z0-9])*",
                                                        "type": "string"
                                                    },
                                                    "EndTime": {
                                                        "description": "The time that training the document classifier completed.",
                                                        "format": "date-time",
                                                        "type": "string"
                                                    },
                                                    "InputDataConfig": {
                                                        "description": "The input data configuration that you supplied when you created the document classifier for training.",
                                                        "properties": {
                                                            "S3Uri": {
                                                                "description": "<p>The Amazon S3 URI for the input data. The S3 bucket must be in the same region as the API endpoint that you are calling. The URI can point to a single input file or it can provide the prefix for a collection of input files.</p> <p>For example, if you use the URI <code>S3://bucketName/prefix</code>, if the prefix is a single file, Amazon Comprehend uses that file as input. If more than one file begins with the prefix, Amazon Comprehend uses all of them as input.</p>",
                                                                "maxLength": 1024,
                                                                "pattern": "s3://[a-z0-9][\\.\\-a-z0-9]{1,61}[a-z0-9](/.*)?",
                                                                "type": "string"
                                                            }
                                                        },
                                                        "required": [
                                                            "S3Uri"
                                                        ],
                                                        "type": "object"
                                                    },
                                                    "LanguageCode": {
                                                        "description": "The language code for the language of the documents that the classifier was trained on.",
                                                        "enum": [
                                                            "en",
                                                            "es",
                                                            "fr",
                                                            "de",
                                                            "it",
                                                            "pt"
                                                        ],
                                                        "type": "string"
                                                    },
                                                    "Message": {
                                                        "description": "Additional information about the status of the classifier.",
                                                        "type": "string"
                                                    },
                                                    "Status": {
                                                        "description": "The status of the document classifier. If the status is <code>TRAINED</code> the classifier is ready to use. If the status is <code>FAILED</code> you can see additional information about why the classifier wasn't trained in the <code>Message</code> field.",
                                                        "enum": [
                                                            "SUBMITTED",
                                                            "TRAINING",
                                                            "DELETING",
                                                            "STOP_REQUESTED",
                                                            "STOPPED",
                                                            "IN_ERROR",
                                                            "TRAINED"
                                                        ],
                                                        "type": "string"
                                                    },
                                                    "SubmitTime": {
                                                        "description": "The time that the document classifier was submitted for training.",
                                                        "format": "date-time",
                                                        "type": "string"
                                                    },
                                                    "TrainingEndTime": {
                                                        "description": "The time that training of the document classifier was completed. Indicates the time when the training completes on documentation classifiers. You are billed for the time interval between this time and the value of TrainingStartTime.",
                                                        "format": "date-time",
                                                        "type": "string"
                                                    },
                                                    "TrainingStartTime": {
                                                        "description": "Indicates the time when the training starts on documentation classifiers. You are billed for the time interval between this time and the value of TrainingEndTime. ",
                                                        "format": "date-time",
                                                        "type": "string"
                                                    }
                                                },
                                                "type": "object"
                                            },
                                            "type": "array"
                                        },
                                        "NextToken": {
                                            "description": "Identifies the next page of results to return.",
                                            "minLength": 1,
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "480": {
                        "description": "InvalidRequestException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "TooManyRequestsException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "482": {
                        "description": "InvalidFilterException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "483": {
                        "description": "InternalServerException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "Filter": {
                                        "description": "Filters the jobs that are returned. You can filter jobs on their name, status, or the date and time that they were submitted. You can only set one filter at a time.",
                                        "properties": {
                                            "Status": {
                                                "description": "Filters the list of classifiers based on status. ",
                                                "enum": [
                                                    "SUBMITTED",
                                                    "TRAINING",
                                                    "DELETING",
                                                    "STOP_REQUESTED",
                                                    "STOPPED",
                                                    "IN_ERROR",
                                                    "TRAINED"
                                                ],
                                                "type": "string"
                                            },
                                            "SubmitTimeAfter": {
                                                "description": "Filters the list of classifiers based on the time that the classifier was submitted for processing. Returns only classifiers submitted after the specified time. Classifiers are returned in descending order, newest to oldest.",
                                                "format": "date-time",
                                                "type": "string"
                                            },
                                            "SubmitTimeBefore": {
                                                "description": "Filters the list of classifiers based on the time that the classifier was submitted for processing. Returns only classifiers submitted before the specified time. Classifiers are returned in ascending order, oldest to newest.",
                                                "format": "date-time",
                                                "type": "string"
                                            }
                                        },
                                        "type": "object"
                                    },
                                    "MaxResults": {
                                        "description": "The maximum number of results to return in each page. The default is 100.",
                                        "maximum": 500,
                                        "minimum": 1,
                                        "type": "integer"
                                    },
                                    "NextToken": {
                                        "description": "Identifies the next page of results to return.",
                                        "minLength": 1,
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            }
        },
        "/#ListDominantLanguageDetectionJobs": {
            "parameters": [
                {
                    "in": "query",
                    "name": "Action",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "query",
                    "name": "Version",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Content-Sha256",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Date",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Algorithm",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Credential",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Security-Token",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Signature",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-SignedHeaders",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                }
            ],
            "post": {
                "description": "Gets a list of the dominant language detection jobs that you have submitted.",
                "operationId": "ListDominantLanguageDetectionJobs",
                "parameters": [
                    {
                        "description": "Pagination limit",
                        "in": "query",
                        "name": "MaxResults",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Pagination token",
                        "in": "query",
                        "name": "NextToken",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "DominantLanguageDetectionJobPropertiesList": {
                                            "description": "A list containing the properties of each job that is returned.",
                                            "items": {
                                                "description": "Provides information about a dominant language detection job.",
                                                "properties": {
                                                    "DataAccessRoleArn": {
                                                        "description": "The Amazon Resource Name (ARN) that gives Amazon Comprehend read access to your input data.",
                                                        "maxLength": 2048,
                                                        "minLength": 20,
                                                        "pattern": "arn:aws(-[^:]+)?:iam::[0-9]{12}:role/.+",
                                                        "type": "string"
                                                    },
                                                    "EndTime": {
                                                        "description": "The time that the dominant language detection job completed.",
                                                        "format": "date-time",
                                                        "type": "string"
                                                    },
                                                    "InputDataConfig": {
                                                        "description": "The input data configuration that you supplied when you created the dominant language detection job.",
                                                        "properties": {
                                                            "InputFormat": {
                                                                "description": "<p>Specifies how the text in an input file should be processed:</p> <ul> <li> <p> <code>ONE_DOC_PER_FILE</code> - Each file is considered a separate document. Use this option when you are processing large documents, such as newspaper articles or scientific papers.</p> </li> <li> <p> <code>ONE_DOC_PER_LINE</code> - Each line in a file is considered a separate document. Use this option when you are processing many short documents, such as text messages.</p> </li> </ul>",
                                                                "enum": [
                                                                    "ONE_DOC_PER_FILE",
                                                                    "ONE_DOC_PER_LINE"
                                                                ],
                                                                "type": "string"
                                                            },
                                                            "S3Uri": {
                                                                "description": "<p>The Amazon S3 URI for the input data. The URI must be in same region as the API endpoint that you are calling. The URI can point to a single input file or it can provide the prefix for a collection of data files. </p> <p>For example, if you use the URI <code>S3://bucketName/prefix</code>, if the prefix is a single file, Amazon Comprehend uses that file as input. If more than one file begins with the prefix, Amazon Comprehend uses all of them as input.</p>",
                                                                "maxLength": 1024,
                                                                "pattern": "s3://[a-z0-9][\\.\\-a-z0-9]{1,61}[a-z0-9](/.*)?",
                                                                "type": "string"
                                                            }
                                                        },
                                                        "required": [
                                                            "S3Uri"
                                                        ],
                                                        "type": "object"
                                                    },
                                                    "JobId": {
                                                        "description": "The identifier assigned to the dominant language detection job.",
                                                        "maxLength": 32,
                                                        "minLength": 1,
                                                        "pattern": "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-%@]*)$",
                                                        "type": "string"
                                                    },
                                                    "JobName": {
                                                        "description": "The name that you assigned to the dominant language detection job.",
                                                        "maxLength": 256,
                                                        "minLength": 1,
                                                        "pattern": "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-%@]*)$",
                                                        "type": "string"
                                                    },
                                                    "JobStatus": {
                                                        "description": "The current status of the dominant language detection job. If the status is <code>FAILED</code>, the <code>Message</code> field shows the reason for the failure.",
                                                        "enum": [
                                                            "SUBMITTED",
                                                            "IN_PROGRESS",
                                                            "COMPLETED",
                                                            "FAILED",
                                                            "STOP_REQUESTED",
                                                            "STOPPED"
                                                        ],
                                                        "type": "string"
                                                    },
                                                    "Message": {
                                                        "description": "A description for the status of a job.",
                                                        "type": "string"
                                                    },
                                                    "OutputDataConfig": {
                                                        "description": "The output data configuration that you supplied when you created the dominant language detection job.",
                                                        "properties": {
                                                            "S3Uri": {
                                                                "description": "<p>When you use the <code>OutputDataConfig</code> object with asynchronous operations, you specify the Amazon S3 location where you want to write the output data. The URI must be in the same region as the API endpoint that you are calling. The location is used as the prefix for the actual location of the output file.</p> <p>When the topic detection job is finished, the service creates an output file in a directory specific to the job. The <code>S3Uri</code> field contains the location of the output file, called <code>output.tar.gz</code>. It is a compressed archive that contains the ouput of the operation.</p>",
                                                                "maxLength": 1024,
                                                                "pattern": "s3://[a-z0-9][\\.\\-a-z0-9]{1,61}[a-z0-9](/.*)?",
                                                                "type": "string"
                                                            }
                                                        },
                                                        "required": [
                                                            "S3Uri"
                                                        ],
                                                        "type": "object"
                                                    },
                                                    "SubmitTime": {
                                                        "description": "The time that the dominant language detection job was submitted for processing.",
                                                        "format": "date-time",
                                                        "type": "string"
                                                    }
                                                },
                                                "type": "object"
                                            },
                                            "type": "array"
                                        },
                                        "NextToken": {
                                            "description": "Identifies the next page of results to return.",
                                            "minLength": 1,
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "480": {
                        "description": "InvalidRequestException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "TooManyRequestsException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "482": {
                        "description": "InvalidFilterException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "483": {
                        "description": "InternalServerException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "Filter": {
                                        "description": "Filters that jobs that are returned. You can filter jobs on their name, status, or the date and time that they were submitted. You can only set one filter at a time.",
                                        "properties": {
                                            "JobName": {
                                                "description": "Filters on the name of the job.",
                                                "maxLength": 256,
                                                "minLength": 1,
                                                "pattern": "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-%@]*)$",
                                                "type": "string"
                                            },
                                            "JobStatus": {
                                                "description": "Filters the list of jobs based on job status. Returns only jobs with the specified status.",
                                                "enum": [
                                                    "SUBMITTED",
                                                    "IN_PROGRESS",
                                                    "COMPLETED",
                                                    "FAILED",
                                                    "STOP_REQUESTED",
                                                    "STOPPED"
                                                ],
                                                "type": "string"
                                            },
                                            "SubmitTimeAfter": {
                                                "description": "Filters the list of jobs based on the time that the job was submitted for processing. Returns only jobs submitted after the specified time. Jobs are returned in descending order, newest to oldest.",
                                                "format": "date-time",
                                                "type": "string"
                                            },
                                            "SubmitTimeBefore": {
                                                "description": "Filters the list of jobs based on the time that the job was submitted for processing. Returns only jobs submitted before the specified time. Jobs are returned in ascending order, oldest to newest.",
                                                "format": "date-time",
                                                "type": "string"
                                            }
                                        },
                                        "type": "object"
                                    },
                                    "MaxResults": {
                                        "description": "The maximum number of results to return in each page. The default is 100.",
                                        "maximum": 500,
                                        "minimum": 1,
                                        "type": "integer"
                                    },
                                    "NextToken": {
                                        "description": "Identifies the next page of results to return.",
                                        "minLength": 1,
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            }
        },
        "/#ListEntitiesDetectionJobs": {
            "parameters": [
                {
                    "in": "query",
                    "name": "Action",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "query",
                    "name": "Version",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Content-Sha256",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Date",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Algorithm",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Credential",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Security-Token",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Signature",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-SignedHeaders",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                }
            ],
            "post": {
                "description": "Gets a list of the entity detection jobs that you have submitted.",
                "operationId": "ListEntitiesDetectionJobs",
                "parameters": [
                    {
                        "description": "Pagination limit",
                        "in": "query",
                        "name": "MaxResults",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Pagination token",
                        "in": "query",
                        "name": "NextToken",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "EntitiesDetectionJobPropertiesList": {
                                            "description": "A list containing the properties of each job that is returned.",
                                            "items": {
                                                "description": "Provides information about an entities detection job.",
                                                "properties": {
                                                    "DataAccessRoleArn": {
                                                        "description": "The Amazon Resource Name (ARN) that gives Amazon Comprehend read access to your input data.",
                                                        "maxLength": 2048,
                                                        "minLength": 20,
                                                        "pattern": "arn:aws(-[^:]+)?:iam::[0-9]{12}:role/.+",
                                                        "type": "string"
                                                    },
                                                    "EndTime": {
                                                        "description": "The time that the entities detection job completed",
                                                        "format": "date-time",
                                                        "type": "string"
                                                    },
                                                    "EntityRecognizerArn": {
                                                        "description": "The Amazon Resource Name (ARN) that identifies the entity recognizer.",
                                                        "maxLength": 256,
                                                        "pattern": "arn:aws:comprehend:[a-zA-Z0-9-]*:[0-9]{12}:entity-recognizer/[a-zA-Z0-9](-*[a-zA-Z0-9])*",
                                                        "type": "string"
                                                    },
                                                    "InputDataConfig": {
                                                        "description": "The input data configuration that you supplied when you created the entities detection job.",
                                                        "properties": {
                                                            "InputFormat": {
                                                                "description": "<p>Specifies how the text in an input file should be processed:</p> <ul> <li> <p> <code>ONE_DOC_PER_FILE</code> - Each file is considered a separate document. Use this option when you are processing large documents, such as newspaper articles or scientific papers.</p> </li> <li> <p> <code>ONE_DOC_PER_LINE</code> - Each line in a file is considered a separate document. Use this option when you are processing many short documents, such as text messages.</p> </li> </ul>",
                                                                "enum": [
                                                                    "ONE_DOC_PER_FILE",
                                                                    "ONE_DOC_PER_LINE"
                                                                ],
                                                                "type": "string"
                                                            },
                                                            "S3Uri": {
                                                                "description": "<p>The Amazon S3 URI for the input data. The URI must be in same region as the API endpoint that you are calling. The URI can point to a single input file or it can provide the prefix for a collection of data files. </p> <p>For example, if you use the URI <code>S3://bucketName/prefix</code>, if the prefix is a single file, Amazon Comprehend uses that file as input. If more than one file begins with the prefix, Amazon Comprehend uses all of them as input.</p>",
                                                                "maxLength": 1024,
                                                                "pattern": "s3://[a-z0-9][\\.\\-a-z0-9]{1,61}[a-z0-9](/.*)?",
                                                                "type": "string"
                                                            }
                                                        },
                                                        "required": [
                                                            "S3Uri"
                                                        ],
                                                        "type": "object"
                                                    },
                                                    "JobId": {
                                                        "description": "The identifier assigned to the entities detection job.",
                                                        "maxLength": 32,
                                                        "minLength": 1,
                                                        "pattern": "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-%@]*)$",
                                                        "type": "string"
                                                    },
                                                    "JobName": {
                                                        "description": "The name that you assigned the entities detection job.",
                                                        "maxLength": 256,
                                                        "minLength": 1,
                                                        "pattern": "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-%@]*)$",
                                                        "type": "string"
                                                    },
                                                    "JobStatus": {
                                                        "description": "The current status of the entities detection job. If the status is <code>FAILED</code>, the <code>Message</code> field shows the reason for the failure.",
                                                        "enum": [
                                                            "SUBMITTED",
                                                            "IN_PROGRESS",
                                                            "COMPLETED",
                                                            "FAILED",
                                                            "STOP_REQUESTED",
                                                            "STOPPED"
                                                        ],
                                                        "type": "string"
                                                    },
                                                    "LanguageCode": {
                                                        "description": "The language code of the input documents.",
                                                        "enum": [
                                                            "en",
                                                            "es",
                                                            "fr",
                                                            "de",
                                                            "it",
                                                            "pt"
                                                        ],
                                                        "type": "string"
                                                    },
                                                    "Message": {
                                                        "description": "A description of the status of a job.",
                                                        "type": "string"
                                                    },
                                                    "OutputDataConfig": {
                                                        "description": "The output data configuration that you supplied when you created the entities detection job. ",
                                                        "properties": {
                                                            "S3Uri": {
                                                                "description": "<p>When you use the <code>OutputDataConfig</code> object with asynchronous operations, you specify the Amazon S3 location where you want to write the output data. The URI must be in the same region as the API endpoint that you are calling. The location is used as the prefix for the actual location of the output file.</p> <p>When the topic detection job is finished, the service creates an output file in a directory specific to the job. The <code>S3Uri</code> field contains the location of the output file, called <code>output.tar.gz</code>. It is a compressed archive that contains the ouput of the operation.</p>",
                                                                "maxLength": 1024,
                                                                "pattern": "s3://[a-z0-9][\\.\\-a-z0-9]{1,61}[a-z0-9](/.*)?",
                                                                "type": "string"
                                                            }
                                                        },
                                                        "required": [
                                                            "S3Uri"
                                                        ],
                                                        "type": "object"
                                                    },
                                                    "SubmitTime": {
                                                        "description": "The time that the entities detection job was submitted for processing.",
                                                        "format": "date-time",
                                                        "type": "string"
                                                    }
                                                },
                                                "type": "object"
                                            },
                                            "type": "array"
                                        },
                                        "NextToken": {
                                            "description": "Identifies the next page of results to return.",
                                            "minLength": 1,
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "480": {
                        "description": "InvalidRequestException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "TooManyRequestsException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "482": {
                        "description": "InvalidFilterException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "483": {
                        "description": "InternalServerException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "Filter": {
                                        "description": "Filters the jobs that are returned. You can filter jobs on their name, status, or the date and time that they were submitted. You can only set one filter at a time.",
                                        "properties": {
                                            "JobName": {
                                                "description": "Filters on the name of the job.",
                                                "maxLength": 256,
                                                "minLength": 1,
                                                "pattern": "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-%@]*)$",
                                                "type": "string"
                                            },
                                            "JobStatus": {
                                                "description": "Filters the list of jobs based on job status. Returns only jobs with the specified status.",
                                                "enum": [
                                                    "SUBMITTED",
                                                    "IN_PROGRESS",
                                                    "COMPLETED",
                                                    "FAILED",
                                                    "STOP_REQUESTED",
                                                    "STOPPED"
                                                ],
                                                "type": "string"
                                            },
                                            "SubmitTimeAfter": {
                                                "description": "Filters the list of jobs based on the time that the job was submitted for processing. Returns only jobs submitted after the specified time. Jobs are returned in descending order, newest to oldest.",
                                                "format": "date-time",
                                                "type": "string"
                                            },
                                            "SubmitTimeBefore": {
                                                "description": "Filters the list of jobs based on the time that the job was submitted for processing. Returns only jobs submitted before the specified time. Jobs are returned in ascending order, oldest to newest.",
                                                "format": "date-time",
                                                "type": "string"
                                            }
                                        },
                                        "type": "object"
                                    },
                                    "MaxResults": {
                                        "description": "The maximum number of results to return in each page. The default is 100.",
                                        "maximum": 500,
                                        "minimum": 1,
                                        "type": "integer"
                                    },
                                    "NextToken": {
                                        "description": "Identifies the next page of results to return.",
                                        "minLength": 1,
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            }
        },
        "/#ListEntityRecognizers": {
            "parameters": [
                {
                    "in": "query",
                    "name": "Action",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "query",
                    "name": "Version",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Content-Sha256",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Date",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Algorithm",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Credential",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Security-Token",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Signature",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-SignedHeaders",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                }
            ],
            "post": {
                "description": "<p>Gets a list of the properties of all entity recognizers that you created, including recognizers currently in training. Allows you to filter the list of recognizers based on criteria such as status and submission time. This call returns up to 500 entity recognizers in the list, with a default number of 100 recognizers in the list.</p> <p>The results of this list are not in any particular order. Please get the list and sort locally if needed.</p>",
                "operationId": "ListEntityRecognizers",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "EntityRecognizerPropertiesList": {
                                            "description": "The list of properties of an entity recognizer.",
                                            "items": {
                                                "description": "Describes information about an entity recognizer.",
                                                "properties": {
                                                    "DataAccessRoleArn": {
                                                        "description": " The Amazon Resource Name (ARN) of the AWS Identity and Management (IAM) role that grants Amazon Comprehend read access to your input data.",
                                                        "maxLength": 2048,
                                                        "minLength": 20,
                                                        "pattern": "arn:aws(-[^:]+)?:iam::[0-9]{12}:role/.+",
                                                        "type": "string"
                                                    },
                                                    "EndTime": {
                                                        "description": "The time that the recognizer creation completed.",
                                                        "format": "date-time",
                                                        "type": "string"
                                                    },
                                                    "EntityRecognizerArn": {
                                                        "description": "The Amazon Resource Name (ARN) that identifies the entity recognizer.",
                                                        "maxLength": 256,
                                                        "pattern": "arn:aws:comprehend:[a-zA-Z0-9-]*:[0-9]{12}:entity-recognizer/[a-zA-Z0-9](-*[a-zA-Z0-9])*",
                                                        "type": "string"
                                                    },
                                                    "InputDataConfig": {
                                                        "description": "The input data properties of an entity recognizer.",
                                                        "properties": {
                                                            "Annotations": {
                                                                "description": "S3 location of the annotations file for an entity recognizer.",
                                                                "properties": {
                                                                    "S3Uri": {
                                                                        "description": " Specifies the Amazon S3 location where the annotations for an entity recognizer are located. The URI must be in the same region as the API endpoint that you are calling.",
                                                                        "maxLength": 1024,
                                                                        "pattern": "s3://[a-z0-9][\\.\\-a-z0-9]{1,61}[a-z0-9](/.*)?",
                                                                        "type": "string"
                                                                    }
                                                                },
                                                                "required": [
                                                                    "S3Uri"
                                                                ],
                                                                "type": "object"
                                                            },
                                                            "Documents": {
                                                                "description": "S3 location of the documents folder for an entity recognizer",
                                                                "properties": {
                                                                    "S3Uri": {
                                                                        "description": " Specifies the Amazon S3 location where the training documents for an entity recognizer are located. The URI must be in the same region as the API endpoint that you are calling.",
                                                                        "maxLength": 1024,
                                                                        "pattern": "s3://[a-z0-9][\\.\\-a-z0-9]{1,61}[a-z0-9](/.*)?",
                                                                        "type": "string"
                                                                    }
                                                                },
                                                                "required": [
                                                                    "S3Uri"
                                                                ],
                                                                "type": "object"
                                                            },
                                                            "EntityList": {
                                                                "description": "S3 location of the entity list for an entity recognizer.",
                                                                "properties": {
                                                                    "S3Uri": {
                                                                        "description": "Specifies the Amazon S3 location where the entity list is located. The URI must be in the same region as the API endpoint that you are calling.",
                                                                        "maxLength": 1024,
                                                                        "pattern": "s3://[a-z0-9][\\.\\-a-z0-9]{1,61}[a-z0-9](/.*)?",
                                                                        "type": "string"
                                                                    }
                                                                },
                                                                "required": [
                                                                    "S3Uri"
                                                                ],
                                                                "type": "object"
                                                            },
                                                            "EntityTypes": {
                                                                "description": "The entity types in the input data for an entity recognizer.",
                                                                "items": {
                                                                    "description": "Information about an individual item on a list of entity types.",
                                                                    "properties": {
                                                                        "Type": {
                                                                            "description": "Entity type of an item on an entity type list.",
                                                                            "maxLength": 64,
                                                                            "pattern": "[_A-Z0-9]+",
                                                                            "type": "string"
                                                                        }
                                                                    },
                                                                    "required": [
                                                                        "Type"
                                                                    ],
                                                                    "type": "object"
                                                                },
                                                                "type": "array"
                                                            }
                                                        },
                                                        "required": [
                                                            "EntityTypes",
                                                            "Documents"
                                                        ],
                                                        "type": "object"
                                                    },
                                                    "LanguageCode": {
                                                        "description": " The language of the input documents. All documents must be in the same language. Only English (\"en\") is currently supported.",
                                                        "enum": [
                                                            "en",
                                                            "es",
                                                            "fr",
                                                            "de",
                                                            "it",
                                                            "pt"
                                                        ],
                                                        "type": "string"
                                                    },
                                                    "Message": {
                                                        "description": " A description of the status of the recognizer.",
                                                        "type": "string"
                                                    },
                                                    "RecognizerMetadata": {
                                                        "description": " Provides information about an entity recognizer.",
                                                        "properties": {
                                                            "EntityTypes": {
                                                                "description": "Entity types from the metadata of an entity recognizer.",
                                                                "items": {
                                                                    "description": "Individual item from the list of entity types in the metadata of an entity recognizer.",
                                                                    "properties": {
                                                                        "Type": {
                                                                            "description": "Type of entity from the list of entity types in the metadata of an entity recognizer. ",
                                                                            "type": "string"
                                                                        }
                                                                    },
                                                                    "type": "object"
                                                                },
                                                                "type": "array"
                                                            },
                                                            "EvaluationMetrics": {
                                                                "description": " Detailed information about the accuracy of an entity recognizer.",
                                                                "properties": {
                                                                    "F1Score": {
                                                                        "description": "A measure of how accurate the recognizer results are for the test data. It is derived from the <code>Precision</code> and <code>Recall</code> values. The <code>F1Score</code> is the harmonic average of the two scores. The highest score is 1, and the worst score is 0. ",
                                                                        "format": "double",
                                                                        "type": "number"
                                                                    },
                                                                    "Precision": {
                                                                        "description": "A measure of the usefulness of the recognizer results in the test data. High precision means that the recognizer returned substantially more relevant results than irrelevant ones. ",
                                                                        "format": "double",
                                                                        "type": "number"
                                                                    },
                                                                    "Recall": {
                                                                        "description": "A measure of how complete the recognizer results are for the test data. High recall means that the recognizer returned most of the relevant results.",
                                                                        "format": "double",
                                                                        "type": "number"
                                                                    }
                                                                },
                                                                "type": "object"
                                                            },
                                                            "NumberOfTestDocuments": {
                                                                "description": " The number of documents in the input data that were used to test the entity recognizer. Typically this is 10 to 20 percent of the input documents.",
                                                                "type": "integer"
                                                            },
                                                            "NumberOfTrainedDocuments": {
                                                                "description": " The number of documents in the input data that were used to train the entity recognizer. Typically this is 80 to 90 percent of the input documents.",
                                                                "type": "integer"
                                                            }
                                                        },
                                                        "type": "object"
                                                    },
                                                    "Status": {
                                                        "description": "Provides the status of the entity recognizer.",
                                                        "enum": [
                                                            "SUBMITTED",
                                                            "TRAINING",
                                                            "DELETING",
                                                            "STOP_REQUESTED",
                                                            "STOPPED",
                                                            "IN_ERROR",
                                                            "TRAINED"
                                                        ],
                                                        "type": "string"
                                                    },
                                                    "SubmitTime": {
                                                        "description": "The time that the recognizer was submitted for processing.",
                                                        "format": "date-time",
                                                        "type": "string"
                                                    },
                                                    "TrainingEndTime": {
                                                        "description": "The time that training of the entity recognizer was completed.",
                                                        "format": "date-time",
                                                        "type": "string"
                                                    },
                                                    "TrainingStartTime": {
                                                        "description": "The time that training of the entity recognizer started.",
                                                        "format": "date-time",
                                                        "type": "string"
                                                    }
                                                },
                                                "type": "object"
                                            },
                                            "type": "array"
                                        },
                                        "NextToken": {
                                            "description": "Identifies the next page of results to return.",
                                            "minLength": 1,
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "480": {
                        "description": "InvalidRequestException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "TooManyRequestsException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "482": {
                        "description": "InvalidFilterException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "483": {
                        "description": "InternalServerException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "Filter": {
                                        "description": "Filters the list of entities returned. You can filter on <code>Status</code>, <code>SubmitTimeBefore</code>, or <code>SubmitTimeAfter</code>. You can only set one filter at a time.",
                                        "properties": {
                                            "Status": {
                                                "description": "The status of an entity recognizer.",
                                                "enum": [
                                                    "SUBMITTED",
                                                    "TRAINING",
                                                    "DELETING",
                                                    "STOP_REQUESTED",
                                                    "STOPPED",
                                                    "IN_ERROR",
                                                    "TRAINED"
                                                ],
                                                "type": "string"
                                            },
                                            "SubmitTimeAfter": {
                                                "description": "Filters the list of entities based on the time that the list was submitted for processing. Returns only jobs submitted after the specified time. Jobs are returned in ascending order, oldest to newest.",
                                                "format": "date-time",
                                                "type": "string"
                                            },
                                            "SubmitTimeBefore": {
                                                "description": "Filters the list of entities based on the time that the list was submitted for processing. Returns only jobs submitted before the specified time. Jobs are returned in descending order, newest to oldest.",
                                                "format": "date-time",
                                                "type": "string"
                                            }
                                        },
                                        "type": "object"
                                    },
                                    "MaxResults": {
                                        "description": " The maximum number of results to return on each page. The default is 100.",
                                        "maximum": 500,
                                        "minimum": 1,
                                        "type": "integer"
                                    },
                                    "NextToken": {
                                        "description": "Identifies the next page of results to return.",
                                        "minLength": 1,
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            }
        },
        "/#ListKeyPhrasesDetectionJobs": {
            "parameters": [
                {
                    "in": "query",
                    "name": "Action",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "query",
                    "name": "Version",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Content-Sha256",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Date",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Algorithm",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Credential",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Security-Token",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Signature",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-SignedHeaders",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                }
            ],
            "post": {
                "description": "Get a list of key phrase detection jobs that you have submitted.",
                "operationId": "ListKeyPhrasesDetectionJobs",
                "parameters": [
                    {
                        "description": "Pagination limit",
                        "in": "query",
                        "name": "MaxResults",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Pagination token",
                        "in": "query",
                        "name": "NextToken",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "KeyPhrasesDetectionJobPropertiesList": {
                                            "description": "A list containing the properties of each job that is returned.",
                                            "items": {
                                                "description": "Provides information about a key phrases detection job.",
                                                "properties": {
                                                    "DataAccessRoleArn": {
                                                        "description": "The Amazon Resource Name (ARN) that gives Amazon Comprehend read access to your input data.",
                                                        "maxLength": 2048,
                                                        "minLength": 20,
                                                        "pattern": "arn:aws(-[^:]+)?:iam::[0-9]{12}:role/.+",
                                                        "type": "string"
                                                    },
                                                    "EndTime": {
                                                        "description": "The time that the key phrases detection job completed.",
                                                        "format": "date-time",
                                                        "type": "string"
                                                    },
                                                    "InputDataConfig": {
                                                        "description": "The input data configuration that you supplied when you created the key phrases detection job.",
                                                        "properties": {
                                                            "InputFormat": {
                                                                "description": "<p>Specifies how the text in an input file should be processed:</p> <ul> <li> <p> <code>ONE_DOC_PER_FILE</code> - Each file is considered a separate document. Use this option when you are processing large documents, such as newspaper articles or scientific papers.</p> </li> <li> <p> <code>ONE_DOC_PER_LINE</code> - Each line in a file is considered a separate document. Use this option when you are processing many short documents, such as text messages.</p> </li> </ul>",
                                                                "enum": [
                                                                    "ONE_DOC_PER_FILE",
                                                                    "ONE_DOC_PER_LINE"
                                                                ],
                                                                "type": "string"
                                                            },
                                                            "S3Uri": {
                                                                "description": "<p>The Amazon S3 URI for the input data. The URI must be in same region as the API endpoint that you are calling. The URI can point to a single input file or it can provide the prefix for a collection of data files. </p> <p>For example, if you use the URI <code>S3://bucketName/prefix</code>, if the prefix is a single file, Amazon Comprehend uses that file as input. If more than one file begins with the prefix, Amazon Comprehend uses all of them as input.</p>",
                                                                "maxLength": 1024,
                                                                "pattern": "s3://[a-z0-9][\\.\\-a-z0-9]{1,61}[a-z0-9](/.*)?",
                                                                "type": "string"
                                                            }
                                                        },
                                                        "required": [
                                                            "S3Uri"
                                                        ],
                                                        "type": "object"
                                                    },
                                                    "JobId": {
                                                        "description": "The identifier assigned to the key phrases detection job.",
                                                        "maxLength": 32,
                                                        "minLength": 1,
                                                        "pattern": "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-%@]*)$",
                                                        "type": "string"
                                                    },
                                                    "JobName": {
                                                        "description": "The name that you assigned the key phrases detection job.",
                                                        "maxLength": 256,
                                                        "minLength": 1,
                                                        "pattern": "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-%@]*)$",
                                                        "type": "string"
                                                    },
                                                    "JobStatus": {
                                                        "description": "The current status of the key phrases detection job. If the status is <code>FAILED</code>, the <code>Message</code> field shows the reason for the failure.",
                                                        "enum": [
                                                            "SUBMITTED",
                                                            "IN_PROGRESS",
                                                            "COMPLETED",
                                                            "FAILED",
                                                            "STOP_REQUESTED",
                                                            "STOPPED"
                                                        ],
                                                        "type": "string"
                                                    },
                                                    "LanguageCode": {
                                                        "description": "The language code of the input documents.",
                                                        "enum": [
                                                            "en",
                                                            "es",
                                                            "fr",
                                                            "de",
                                                            "it",
                                                            "pt"
                                                        ],
                                                        "type": "string"
                                                    },
                                                    "Message": {
                                                        "description": "A description of the status of a job.",
                                                        "type": "string"
                                                    },
                                                    "OutputDataConfig": {
                                                        "description": "The output data configuration that you supplied when you created the key phrases detection job.",
                                                        "properties": {
                                                            "S3Uri": {
                                                                "description": "<p>When you use the <code>OutputDataConfig</code> object with asynchronous operations, you specify the Amazon S3 location where you want to write the output data. The URI must be in the same region as the API endpoint that you are calling. The location is used as the prefix for the actual location of the output file.</p> <p>When the topic detection job is finished, the service creates an output file in a directory specific to the job. The <code>S3Uri</code> field contains the location of the output file, called <code>output.tar.gz</code>. It is a compressed archive that contains the ouput of the operation.</p>",
                                                                "maxLength": 1024,
                                                                "pattern": "s3://[a-z0-9][\\.\\-a-z0-9]{1,61}[a-z0-9](/.*)?",
                                                                "type": "string"
                                                            }
                                                        },
                                                        "required": [
                                                            "S3Uri"
                                                        ],
                                                        "type": "object"
                                                    },
                                                    "SubmitTime": {
                                                        "description": "The time that the key phrases detection job was submitted for processing.",
                                                        "format": "date-time",
                                                        "type": "string"
                                                    }
                                                },
                                                "type": "object"
                                            },
                                            "type": "array"
                                        },
                                        "NextToken": {
                                            "description": "Identifies the next page of results to return.",
                                            "minLength": 1,
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "480": {
                        "description": "InvalidRequestException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "TooManyRequestsException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "482": {
                        "description": "InvalidFilterException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "483": {
                        "description": "InternalServerException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "Filter": {
                                        "description": "Filters the jobs that are returned. You can filter jobs on their name, status, or the date and time that they were submitted. You can only set one filter at a time.",
                                        "properties": {
                                            "JobName": {
                                                "description": "Filters on the name of the job.",
                                                "maxLength": 256,
                                                "minLength": 1,
                                                "pattern": "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-%@]*)$",
                                                "type": "string"
                                            },
                                            "JobStatus": {
                                                "description": "Filters the list of jobs based on job status. Returns only jobs with the specified status.",
                                                "enum": [
                                                    "SUBMITTED",
                                                    "IN_PROGRESS",
                                                    "COMPLETED",
                                                    "FAILED",
                                                    "STOP_REQUESTED",
                                                    "STOPPED"
                                                ],
                                                "type": "string"
                                            },
                                            "SubmitTimeAfter": {
                                                "description": "Filters the list of jobs based on the time that the job was submitted for processing. Returns only jobs submitted after the specified time. Jobs are returned in descending order, newest to oldest.",
                                                "format": "date-time",
                                                "type": "string"
                                            },
                                            "SubmitTimeBefore": {
                                                "description": "Filters the list of jobs based on the time that the job was submitted for processing. Returns only jobs submitted before the specified time. Jobs are returned in ascending order, oldest to newest.",
                                                "format": "date-time",
                                                "type": "string"
                                            }
                                        },
                                        "type": "object"
                                    },
                                    "MaxResults": {
                                        "description": "The maximum number of results to return in each page. The default is 100.",
                                        "maximum": 500,
                                        "minimum": 1,
                                        "type": "integer"
                                    },
                                    "NextToken": {
                                        "description": "Identifies the next page of results to return.",
                                        "minLength": 1,
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            }
        },
        "/#ListSentimentDetectionJobs": {
            "parameters": [
                {
                    "in": "query",
                    "name": "Action",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "query",
                    "name": "Version",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Content-Sha256",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Date",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Algorithm",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Credential",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Security-Token",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Signature",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-SignedHeaders",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                }
            ],
            "post": {
                "description": "Gets a list of sentiment detection jobs that you have submitted.",
                "operationId": "ListSentimentDetectionJobs",
                "parameters": [
                    {
                        "description": "Pagination limit",
                        "in": "query",
                        "name": "MaxResults",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Pagination token",
                        "in": "query",
                        "name": "NextToken",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "NextToken": {
                                            "description": "Identifies the next page of results to return.",
                                            "minLength": 1,
                                            "type": "string"
                                        },
                                        "SentimentDetectionJobPropertiesList": {
                                            "description": "A list containing the properties of each job that is returned.",
                                            "items": {
                                                "description": "Provides information about a sentiment detection job.",
                                                "properties": {
                                                    "DataAccessRoleArn": {
                                                        "description": "The Amazon Resource Name (ARN) that gives Amazon Comprehend read access to your input data.",
                                                        "maxLength": 2048,
                                                        "minLength": 20,
                                                        "pattern": "arn:aws(-[^:]+)?:iam::[0-9]{12}:role/.+",
                                                        "type": "string"
                                                    },
                                                    "EndTime": {
                                                        "description": "The time that the sentiment detection job ended.",
                                                        "format": "date-time",
                                                        "type": "string"
                                                    },
                                                    "InputDataConfig": {
                                                        "description": "The input data configuration that you supplied when you created the sentiment detection job.",
                                                        "properties": {
                                                            "InputFormat": {
                                                                "description": "<p>Specifies how the text in an input file should be processed:</p> <ul> <li> <p> <code>ONE_DOC_PER_FILE</code> - Each file is considered a separate document. Use this option when you are processing large documents, such as newspaper articles or scientific papers.</p> </li> <li> <p> <code>ONE_DOC_PER_LINE</code> - Each line in a file is considered a separate document. Use this option when you are processing many short documents, such as text messages.</p> </li> </ul>",
                                                                "enum": [
                                                                    "ONE_DOC_PER_FILE",
                                                                    "ONE_DOC_PER_LINE"
                                                                ],
                                                                "type": "string"
                                                            },
                                                            "S3Uri": {
                                                                "description": "<p>The Amazon S3 URI for the input data. The URI must be in same region as the API endpoint that you are calling. The URI can point to a single input file or it can provide the prefix for a collection of data files. </p> <p>For example, if you use the URI <code>S3://bucketName/prefix</code>, if the prefix is a single file, Amazon Comprehend uses that file as input. If more than one file begins with the prefix, Amazon Comprehend uses all of them as input.</p>",
                                                                "maxLength": 1024,
                                                                "pattern": "s3://[a-z0-9][\\.\\-a-z0-9]{1,61}[a-z0-9](/.*)?",
                                                                "type": "string"
                                                            }
                                                        },
                                                        "required": [
                                                            "S3Uri"
                                                        ],
                                                        "type": "object"
                                                    },
                                                    "JobId": {
                                                        "description": "The identifier assigned to the sentiment detection job.",
                                                        "maxLength": 32,
                                                        "minLength": 1,
                                                        "pattern": "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-%@]*)$",
                                                        "type": "string"
                                                    },
                                                    "JobName": {
                                                        "description": "The name that you assigned to the sentiment detection job",
                                                        "maxLength": 256,
                                                        "minLength": 1,
                                                        "pattern": "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-%@]*)$",
                                                        "type": "string"
                                                    },
                                                    "JobStatus": {
                                                        "description": "The current status of the sentiment detection job. If the status is <code>FAILED</code>, the <code>Messages</code> field shows the reason for the failure.",
                                                        "enum": [
                                                            "SUBMITTED",
                                                            "IN_PROGRESS",
                                                            "COMPLETED",
                                                            "FAILED",
                                                            "STOP_REQUESTED",
                                                            "STOPPED"
                                                        ],
                                                        "type": "string"
                                                    },
                                                    "LanguageCode": {
                                                        "description": "The language code of the input documents.",
                                                        "enum": [
                                                            "en",
                                                            "es",
                                                            "fr",
                                                            "de",
                                                            "it",
                                                            "pt"
                                                        ],
                                                        "type": "string"
                                                    },
                                                    "Message": {
                                                        "description": "A description of the status of a job.",
                                                        "type": "string"
                                                    },
                                                    "OutputDataConfig": {
                                                        "description": "The output data configuration that you supplied when you created the sentiment detection job.",
                                                        "properties": {
                                                            "S3Uri": {
                                                                "description": "<p>When you use the <code>OutputDataConfig</code> object with asynchronous operations, you specify the Amazon S3 location where you want to write the output data. The URI must be in the same region as the API endpoint that you are calling. The location is used as the prefix for the actual location of the output file.</p> <p>When the topic detection job is finished, the service creates an output file in a directory specific to the job. The <code>S3Uri</code> field contains the location of the output file, called <code>output.tar.gz</code>. It is a compressed archive that contains the ouput of the operation.</p>",
                                                                "maxLength": 1024,
                                                                "pattern": "s3://[a-z0-9][\\.\\-a-z0-9]{1,61}[a-z0-9](/.*)?",
                                                                "type": "string"
                                                            }
                                                        },
                                                        "required": [
                                                            "S3Uri"
                                                        ],
                                                        "type": "object"
                                                    },
                                                    "SubmitTime": {
                                                        "description": "The time that the sentiment detection job was submitted for processing.",
                                                        "format": "date-time",
                                                        "type": "string"
                                                    }
                                                },
                                                "type": "object"
                                            },
                                            "type": "array"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "480": {
                        "description": "InvalidRequestException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "TooManyRequestsException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "482": {
                        "description": "InvalidFilterException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "483": {
                        "description": "InternalServerException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "Filter": {
                                        "description": "Filters the jobs that are returned. You can filter jobs on their name, status, or the date and time that they were submitted. You can only set one filter at a time.",
                                        "properties": {
                                            "JobName": {
                                                "description": "Filters on the name of the job.",
                                                "maxLength": 256,
                                                "minLength": 1,
                                                "pattern": "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-%@]*)$",
                                                "type": "string"
                                            },
                                            "JobStatus": {
                                                "description": "Filters the list of jobs based on job status. Returns only jobs with the specified status.",
                                                "enum": [
                                                    "SUBMITTED",
                                                    "IN_PROGRESS",
                                                    "COMPLETED",
                                                    "FAILED",
                                                    "STOP_REQUESTED",
                                                    "STOPPED"
                                                ],
                                                "type": "string"
                                            },
                                            "SubmitTimeAfter": {
                                                "description": "Filters the list of jobs based on the time that the job was submitted for processing. Returns only jobs submitted after the specified time. Jobs are returned in descending order, newest to oldest.",
                                                "format": "date-time",
                                                "type": "string"
                                            },
                                            "SubmitTimeBefore": {
                                                "description": "Filters the list of jobs based on the time that the job was submitted for processing. Returns only jobs submitted before the specified time. Jobs are returned in ascending order, oldest to newest.",
                                                "format": "date-time",
                                                "type": "string"
                                            }
                                        },
                                        "type": "object"
                                    },
                                    "MaxResults": {
                                        "description": "The maximum number of results to return in each page. The default is 100.",
                                        "maximum": 500,
                                        "minimum": 1,
                                        "type": "integer"
                                    },
                                    "NextToken": {
                                        "description": "Identifies the next page of results to return.",
                                        "minLength": 1,
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            }
        },
        "/#ListTopicsDetectionJobs": {
            "parameters": [
                {
                    "in": "query",
                    "name": "Action",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "query",
                    "name": "Version",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Content-Sha256",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Date",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Algorithm",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Credential",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Security-Token",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Signature",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-SignedHeaders",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                }
            ],
            "post": {
                "description": "Gets a list of the topic detection jobs that you have submitted.",
                "operationId": "ListTopicsDetectionJobs",
                "parameters": [
                    {
                        "description": "Pagination limit",
                        "in": "query",
                        "name": "MaxResults",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Pagination token",
                        "in": "query",
                        "name": "NextToken",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "NextToken": {
                                            "description": "Identifies the next page of results to return.",
                                            "minLength": 1,
                                            "type": "string"
                                        },
                                        "TopicsDetectionJobPropertiesList": {
                                            "description": "A list containing the properties of each job that is returned.",
                                            "items": {
                                                "description": "Provides information about a topic detection job.",
                                                "properties": {
                                                    "EndTime": {
                                                        "description": "The time that the topic detection job was completed.",
                                                        "format": "date-time",
                                                        "type": "string"
                                                    },
                                                    "InputDataConfig": {
                                                        "description": "The input data configuration supplied when you created the topic detection job.",
                                                        "properties": {
                                                            "InputFormat": {
                                                                "description": "<p>Specifies how the text in an input file should be processed:</p> <ul> <li> <p> <code>ONE_DOC_PER_FILE</code> - Each file is considered a separate document. Use this option when you are processing large documents, such as newspaper articles or scientific papers.</p> </li> <li> <p> <code>ONE_DOC_PER_LINE</code> - Each line in a file is considered a separate document. Use this option when you are processing many short documents, such as text messages.</p> </li> </ul>",
                                                                "enum": [
                                                                    "ONE_DOC_PER_FILE",
                                                                    "ONE_DOC_PER_LINE"
                                                                ],
                                                                "type": "string"
                                                            },
                                                            "S3Uri": {
                                                                "description": "<p>The Amazon S3 URI for the input data. The URI must be in same region as the API endpoint that you are calling. The URI can point to a single input file or it can provide the prefix for a collection of data files. </p> <p>For example, if you use the URI <code>S3://bucketName/prefix</code>, if the prefix is a single file, Amazon Comprehend uses that file as input. If more than one file begins with the prefix, Amazon Comprehend uses all of them as input.</p>",
                                                                "maxLength": 1024,
                                                                "pattern": "s3://[a-z0-9][\\.\\-a-z0-9]{1,61}[a-z0-9](/.*)?",
                                                                "type": "string"
                                                            }
                                                        },
                                                        "required": [
                                                            "S3Uri"
                                                        ],
                                                        "type": "object"
                                                    },
                                                    "JobId": {
                                                        "description": "The identifier assigned to the topic detection job.",
                                                        "maxLength": 32,
                                                        "minLength": 1,
                                                        "pattern": "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-%@]*)$",
                                                        "type": "string"
                                                    },
                                                    "JobName": {
                                                        "description": "The name of the topic detection job.",
                                                        "maxLength": 256,
                                                        "minLength": 1,
                                                        "pattern": "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-%@]*)$",
                                                        "type": "string"
                                                    },
                                                    "JobStatus": {
                                                        "description": "The current status of the topic detection job. If the status is <code>Failed</code>, the reason for the failure is shown in the <code>Message</code> field.",
                                                        "enum": [
                                                            "SUBMITTED",
                                                            "IN_PROGRESS",
                                                            "COMPLETED",
                                                            "FAILED",
                                                            "STOP_REQUESTED",
                                                            "STOPPED"
                                                        ],
                                                        "type": "string"
                                                    },
                                                    "Message": {
                                                        "description": "A description for the status of a job.",
                                                        "type": "string"
                                                    },
                                                    "NumberOfTopics": {
                                                        "description": "The number of topics to detect supplied when you created the topic detection job. The default is 10. ",
                                                        "type": "integer"
                                                    },
                                                    "OutputDataConfig": {
                                                        "description": "The output data configuration supplied when you created the topic detection job.",
                                                        "properties": {
                                                            "S3Uri": {
                                                                "description": "<p>When you use the <code>OutputDataConfig</code> object with asynchronous operations, you specify the Amazon S3 location where you want to write the output data. The URI must be in the same region as the API endpoint that you are calling. The location is used as the prefix for the actual location of the output file.</p> <p>When the topic detection job is finished, the service creates an output file in a directory specific to the job. The <code>S3Uri</code> field contains the location of the output file, called <code>output.tar.gz</code>. It is a compressed archive that contains the ouput of the operation.</p>",
                                                                "maxLength": 1024,
                                                                "pattern": "s3://[a-z0-9][\\.\\-a-z0-9]{1,61}[a-z0-9](/.*)?",
                                                                "type": "string"
                                                            }
                                                        },
                                                        "required": [
                                                            "S3Uri"
                                                        ],
                                                        "type": "object"
                                                    },
                                                    "SubmitTime": {
                                                        "description": "The time that the topic detection job was submitted for processing.",
                                                        "format": "date-time",
                                                        "type": "string"
                                                    }
                                                },
                                                "type": "object"
                                            },
                                            "type": "array"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "480": {
                        "description": "InvalidRequestException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "TooManyRequestsException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "482": {
                        "description": "InvalidFilterException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "483": {
                        "description": "InternalServerException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "Filter": {
                                        "description": "Filters the jobs that are returned. Jobs can be filtered on their name, status, or the date and time that they were submitted. You can set only one filter at a time.",
                                        "properties": {
                                            "JobName": {
                                                "description": "<p/>",
                                                "maxLength": 256,
                                                "minLength": 1,
                                                "pattern": "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-%@]*)$",
                                                "type": "string"
                                            },
                                            "JobStatus": {
                                                "description": "Filters the list of topic detection jobs based on job status. Returns only jobs with the specified status.",
                                                "enum": [
                                                    "SUBMITTED",
                                                    "IN_PROGRESS",
                                                    "COMPLETED",
                                                    "FAILED",
                                                    "STOP_REQUESTED",
                                                    "STOPPED"
                                                ],
                                                "type": "string"
                                            },
                                            "SubmitTimeAfter": {
                                                "description": "Filters the list of jobs based on the time that the job was submitted for processing. Only returns jobs submitted after the specified time. Jobs are returned in ascending order, oldest to newest.",
                                                "format": "date-time",
                                                "type": "string"
                                            },
                                            "SubmitTimeBefore": {
                                                "description": "Filters the list of jobs based on the time that the job was submitted for processing. Only returns jobs submitted before the specified time. Jobs are returned in descending order, newest to oldest.",
                                                "format": "date-time",
                                                "type": "string"
                                            }
                                        },
                                        "type": "object"
                                    },
                                    "MaxResults": {
                                        "description": "The maximum number of results to return in each page. The default is 100.",
                                        "maximum": 500,
                                        "minimum": 1,
                                        "type": "integer"
                                    },
                                    "NextToken": {
                                        "description": "Identifies the next page of results to return.",
                                        "minLength": 1,
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            }
        },
        "/#StartDocumentClassificationJob": {
            "parameters": [
                {
                    "in": "query",
                    "name": "Action",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "query",
                    "name": "Version",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Content-Sha256",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Date",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Algorithm",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Credential",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Security-Token",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Signature",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-SignedHeaders",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                }
            ],
            "post": {
                "description": "Starts an asynchronous document classification job. Use the operation to track the progress of the job.",
                "operationId": "StartDocumentClassificationJob",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "JobId": {
                                            "description": "The identifier generated for the job. To get the status of the job, use this identifier with the operation.",
                                            "maxLength": 32,
                                            "minLength": 1,
                                            "pattern": "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-%@]*)$",
                                            "type": "string"
                                        },
                                        "JobStatus": {
                                            "description": "<p>The status of the job:</p> <ul> <li> <p>SUBMITTED - The job has been received and queued for processing.</p> </li> <li> <p>IN_PROGRESS - Amazon Comprehend is processing the job.</p> </li> <li> <p>COMPLETED - The job was successfully completed and the output is available.</p> </li> <li> <p>FAILED - The job did not complete. For details, use the operation.</p> </li> <li> <p>STOP_REQUESTED - Amazon Comprehend has received a stop request for the job and is processing the request.</p> </li> <li> <p>STOPPED - The job was successfully stopped without completing.</p> </li> </ul>",
                                            "enum": [
                                                "SUBMITTED",
                                                "IN_PROGRESS",
                                                "COMPLETED",
                                                "FAILED",
                                                "STOP_REQUESTED",
                                                "STOPPED"
                                            ],
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "480": {
                        "description": "InvalidRequestException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "TooManyRequestsException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "482": {
                        "description": "ResourceNotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "483": {
                        "description": "ResourceUnavailableException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "484": {
                        "description": "InternalServerException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "ClientRequestToken": {
                                        "description": "A unique identifier for the request. If you do not set the client request token, Amazon Comprehend generates one.",
                                        "maxLength": 64,
                                        "minLength": 1,
                                        "pattern": "^[a-zA-Z0-9-]+$",
                                        "type": "string"
                                    },
                                    "DataAccessRoleArn": {
                                        "description": "The Amazon Resource Name (ARN) of the AWS Identity and Access Management (IAM) role that grants Amazon Comprehend read access to your input data.",
                                        "maxLength": 2048,
                                        "minLength": 20,
                                        "pattern": "arn:aws(-[^:]+)?:iam::[0-9]{12}:role/.+",
                                        "type": "string"
                                    },
                                    "DocumentClassifierArn": {
                                        "description": "The Amazon Resource Name (ARN) of the document classifier to use to process the job.",
                                        "maxLength": 256,
                                        "pattern": "arn:aws:comprehend:[a-zA-Z0-9-]*:[0-9]{12}:document-classifier/[a-zA-Z0-9](-*[a-zA-Z0-9])*",
                                        "type": "string"
                                    },
                                    "InputDataConfig": {
                                        "description": "Specifies the format and location of the input data for the job.",
                                        "properties": {
                                            "InputFormat": {
                                                "description": "<p>Specifies how the text in an input file should be processed:</p> <ul> <li> <p> <code>ONE_DOC_PER_FILE</code> - Each file is considered a separate document. Use this option when you are processing large documents, such as newspaper articles or scientific papers.</p> </li> <li> <p> <code>ONE_DOC_PER_LINE</code> - Each line in a file is considered a separate document. Use this option when you are processing many short documents, such as text messages.</p> </li> </ul>",
                                                "enum": [
                                                    "ONE_DOC_PER_FILE",
                                                    "ONE_DOC_PER_LINE"
                                                ],
                                                "type": "string"
                                            },
                                            "S3Uri": {
                                                "description": "<p>The Amazon S3 URI for the input data. The URI must be in same region as the API endpoint that you are calling. The URI can point to a single input file or it can provide the prefix for a collection of data files. </p> <p>For example, if you use the URI <code>S3://bucketName/prefix</code>, if the prefix is a single file, Amazon Comprehend uses that file as input. If more than one file begins with the prefix, Amazon Comprehend uses all of them as input.</p>",
                                                "maxLength": 1024,
                                                "pattern": "s3://[a-z0-9][\\.\\-a-z0-9]{1,61}[a-z0-9](/.*)?",
                                                "type": "string"
                                            }
                                        },
                                        "required": [
                                            "S3Uri"
                                        ],
                                        "type": "object"
                                    },
                                    "JobName": {
                                        "description": "The identifier of the job.",
                                        "maxLength": 256,
                                        "minLength": 1,
                                        "pattern": "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-%@]*)$",
                                        "type": "string"
                                    },
                                    "OutputDataConfig": {
                                        "description": "Specifies where to send the output files.",
                                        "properties": {
                                            "S3Uri": {
                                                "description": "<p>When you use the <code>OutputDataConfig</code> object with asynchronous operations, you specify the Amazon S3 location where you want to write the output data. The URI must be in the same region as the API endpoint that you are calling. The location is used as the prefix for the actual location of the output file.</p> <p>When the topic detection job is finished, the service creates an output file in a directory specific to the job. The <code>S3Uri</code> field contains the location of the output file, called <code>output.tar.gz</code>. It is a compressed archive that contains the ouput of the operation.</p>",
                                                "maxLength": 1024,
                                                "pattern": "s3://[a-z0-9][\\.\\-a-z0-9]{1,61}[a-z0-9](/.*)?",
                                                "type": "string"
                                            }
                                        },
                                        "required": [
                                            "S3Uri"
                                        ],
                                        "type": "object"
                                    }
                                },
                                "required": [
                                    "DocumentClassifierArn",
                                    "InputDataConfig",
                                    "OutputDataConfig",
                                    "DataAccessRoleArn"
                                ],
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            }
        },
        "/#StartDominantLanguageDetectionJob": {
            "parameters": [
                {
                    "in": "query",
                    "name": "Action",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "query",
                    "name": "Version",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Content-Sha256",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Date",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Algorithm",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Credential",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Security-Token",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Signature",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-SignedHeaders",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                }
            ],
            "post": {
                "description": "Starts an asynchronous dominant language detection job for a collection of documents. Use the operation to track the status of a job.",
                "operationId": "StartDominantLanguageDetectionJob",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "JobId": {
                                            "description": "The identifier generated for the job. To get the status of a job, use this identifier with the operation.",
                                            "maxLength": 32,
                                            "minLength": 1,
                                            "pattern": "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-%@]*)$",
                                            "type": "string"
                                        },
                                        "JobStatus": {
                                            "description": "<p>The status of the job. </p> <ul> <li> <p>SUBMITTED - The job has been received and is queued for processing.</p> </li> <li> <p>IN_PROGRESS - Amazon Comprehend is processing the job.</p> </li> <li> <p>COMPLETED - The job was successfully completed and the output is available.</p> </li> <li> <p>FAILED - The job did not complete. To get details, use the operation.</p> </li> </ul>",
                                            "enum": [
                                                "SUBMITTED",
                                                "IN_PROGRESS",
                                                "COMPLETED",
                                                "FAILED",
                                                "STOP_REQUESTED",
                                                "STOPPED"
                                            ],
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "480": {
                        "description": "InvalidRequestException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "TooManyRequestsException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "482": {
                        "description": "InternalServerException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "ClientRequestToken": {
                                        "description": "A unique identifier for the request. If you do not set the client request token, Amazon Comprehend generates one.",
                                        "maxLength": 64,
                                        "minLength": 1,
                                        "pattern": "^[a-zA-Z0-9-]+$",
                                        "type": "string"
                                    },
                                    "DataAccessRoleArn": {
                                        "description": "The Amazon Resource Name (ARN) of the AWS Identity and Access Management (IAM) role that grants Amazon Comprehend read access to your input data. For more information, see <a href=\"https://docs.aws.amazon.com/comprehend/latest/dg/access-control-managing-permissions.html#auth-role-permissions\">https://docs.aws.amazon.com/comprehend/latest/dg/access-control-managing-permissions.html#auth-role-permissions</a>.",
                                        "maxLength": 2048,
                                        "minLength": 20,
                                        "pattern": "arn:aws(-[^:]+)?:iam::[0-9]{12}:role/.+",
                                        "type": "string"
                                    },
                                    "InputDataConfig": {
                                        "description": "Specifies the format and location of the input data for the job.",
                                        "properties": {
                                            "InputFormat": {
                                                "description": "<p>Specifies how the text in an input file should be processed:</p> <ul> <li> <p> <code>ONE_DOC_PER_FILE</code> - Each file is considered a separate document. Use this option when you are processing large documents, such as newspaper articles or scientific papers.</p> </li> <li> <p> <code>ONE_DOC_PER_LINE</code> - Each line in a file is considered a separate document. Use this option when you are processing many short documents, such as text messages.</p> </li> </ul>",
                                                "enum": [
                                                    "ONE_DOC_PER_FILE",
                                                    "ONE_DOC_PER_LINE"
                                                ],
                                                "type": "string"
                                            },
                                            "S3Uri": {
                                                "description": "<p>The Amazon S3 URI for the input data. The URI must be in same region as the API endpoint that you are calling. The URI can point to a single input file or it can provide the prefix for a collection of data files. </p> <p>For example, if you use the URI <code>S3://bucketName/prefix</code>, if the prefix is a single file, Amazon Comprehend uses that file as input. If more than one file begins with the prefix, Amazon Comprehend uses all of them as input.</p>",
                                                "maxLength": 1024,
                                                "pattern": "s3://[a-z0-9][\\.\\-a-z0-9]{1,61}[a-z0-9](/.*)?",
                                                "type": "string"
                                            }
                                        },
                                        "required": [
                                            "S3Uri"
                                        ],
                                        "type": "object"
                                    },
                                    "JobName": {
                                        "description": "An identifier for the job.",
                                        "maxLength": 256,
                                        "minLength": 1,
                                        "pattern": "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-%@]*)$",
                                        "type": "string"
                                    },
                                    "OutputDataConfig": {
                                        "description": "Specifies where to send the output files.",
                                        "properties": {
                                            "S3Uri": {
                                                "description": "<p>When you use the <code>OutputDataConfig</code> object with asynchronous operations, you specify the Amazon S3 location where you want to write the output data. The URI must be in the same region as the API endpoint that you are calling. The location is used as the prefix for the actual location of the output file.</p> <p>When the topic detection job is finished, the service creates an output file in a directory specific to the job. The <code>S3Uri</code> field contains the location of the output file, called <code>output.tar.gz</code>. It is a compressed archive that contains the ouput of the operation.</p>",
                                                "maxLength": 1024,
                                                "pattern": "s3://[a-z0-9][\\.\\-a-z0-9]{1,61}[a-z0-9](/.*)?",
                                                "type": "string"
                                            }
                                        },
                                        "required": [
                                            "S3Uri"
                                        ],
                                        "type": "object"
                                    }
                                },
                                "required": [
                                    "InputDataConfig",
                                    "OutputDataConfig",
                                    "DataAccessRoleArn"
                                ],
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            }
        },
        "/#StartEntitiesDetectionJob": {
            "parameters": [
                {
                    "in": "query",
                    "name": "Action",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "query",
                    "name": "Version",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Content-Sha256",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Date",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Algorithm",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Credential",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Security-Token",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Signature",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-SignedHeaders",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                }
            ],
            "post": {
                "description": "<p>Starts an asynchronous entity detection job for a collection of documents. Use the operation to track the status of a job.</p> <p>This API can be used for either standard entity detection or custom entity recognition. In order to be used for custom entity recognition, the optional <code>EntityRecognizerArn</code> must be used in order to provide access to the recognizer being used to detect the custom entity.</p>",
                "operationId": "StartEntitiesDetectionJob",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "JobId": {
                                            "description": "The identifier generated for the job. To get the status of job, use this identifier with the operation.",
                                            "maxLength": 32,
                                            "minLength": 1,
                                            "pattern": "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-%@]*)$",
                                            "type": "string"
                                        },
                                        "JobStatus": {
                                            "description": "<p>The status of the job. </p> <ul> <li> <p>SUBMITTED - The job has been received and is queued for processing.</p> </li> <li> <p>IN_PROGRESS - Amazon Comprehend is processing the job.</p> </li> <li> <p>COMPLETED - The job was successfully completed and the output is available.</p> </li> <li> <p>FAILED - The job did not complete. To get details, use the operation.</p> </li> <li> <p>STOP_REQUESTED - Amazon Comprehend has received a stop request for the job and is processing the request.</p> </li> <li> <p>STOPPED - The job was successfully stopped without completing.</p> </li> </ul>",
                                            "enum": [
                                                "SUBMITTED",
                                                "IN_PROGRESS",
                                                "COMPLETED",
                                                "FAILED",
                                                "STOP_REQUESTED",
                                                "STOPPED"
                                            ],
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "480": {
                        "description": "InvalidRequestException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "TooManyRequestsException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "482": {
                        "description": "ResourceNotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "483": {
                        "description": "ResourceUnavailableException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "484": {
                        "description": "InternalServerException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "ClientRequestToken": {
                                        "description": "A unique identifier for the request. If you don't set the client request token, Amazon Comprehend generates one.",
                                        "maxLength": 64,
                                        "minLength": 1,
                                        "pattern": "^[a-zA-Z0-9-]+$",
                                        "type": "string"
                                    },
                                    "DataAccessRoleArn": {
                                        "description": "The Amazon Resource Name (ARN) of the AWS Identity and Access Management (IAM) role that grants Amazon Comprehend read access to your input data. For more information, see <a href=\"https://docs.aws.amazon.com/comprehend/latest/dg/access-control-managing-permissions.html#auth-role-permissions\">https://docs.aws.amazon.com/comprehend/latest/dg/access-control-managing-permissions.html#auth-role-permissions</a>.",
                                        "maxLength": 2048,
                                        "minLength": 20,
                                        "pattern": "arn:aws(-[^:]+)?:iam::[0-9]{12}:role/.+",
                                        "type": "string"
                                    },
                                    "EntityRecognizerArn": {
                                        "description": "The Amazon Resource Name (ARN) that identifies the specific entity recognizer to be used by the <code>StartEntitiesDetectionJob</code>. This ARN is optional and is only used for a custom entity recognition job.",
                                        "maxLength": 256,
                                        "pattern": "arn:aws:comprehend:[a-zA-Z0-9-]*:[0-9]{12}:entity-recognizer/[a-zA-Z0-9](-*[a-zA-Z0-9])*",
                                        "type": "string"
                                    },
                                    "InputDataConfig": {
                                        "description": "Specifies the format and location of the input data for the job.",
                                        "properties": {
                                            "InputFormat": {
                                                "description": "<p>Specifies how the text in an input file should be processed:</p> <ul> <li> <p> <code>ONE_DOC_PER_FILE</code> - Each file is considered a separate document. Use this option when you are processing large documents, such as newspaper articles or scientific papers.</p> </li> <li> <p> <code>ONE_DOC_PER_LINE</code> - Each line in a file is considered a separate document. Use this option when you are processing many short documents, such as text messages.</p> </li> </ul>",
                                                "enum": [
                                                    "ONE_DOC_PER_FILE",
                                                    "ONE_DOC_PER_LINE"
                                                ],
                                                "type": "string"
                                            },
                                            "S3Uri": {
                                                "description": "<p>The Amazon S3 URI for the input data. The URI must be in same region as the API endpoint that you are calling. The URI can point to a single input file or it can provide the prefix for a collection of data files. </p> <p>For example, if you use the URI <code>S3://bucketName/prefix</code>, if the prefix is a single file, Amazon Comprehend uses that file as input. If more than one file begins with the prefix, Amazon Comprehend uses all of them as input.</p>",
                                                "maxLength": 1024,
                                                "pattern": "s3://[a-z0-9][\\.\\-a-z0-9]{1,61}[a-z0-9](/.*)?",
                                                "type": "string"
                                            }
                                        },
                                        "required": [
                                            "S3Uri"
                                        ],
                                        "type": "object"
                                    },
                                    "JobName": {
                                        "description": "The identifier of the job.",
                                        "maxLength": 256,
                                        "minLength": 1,
                                        "pattern": "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-%@]*)$",
                                        "type": "string"
                                    },
                                    "LanguageCode": {
                                        "description": "The language of the input documents. All documents must be in the same language. You can specify any of the languages supported by Amazon Comprehend: English (\"en\"), Spanish (\"es\"), French (\"fr\"), German (\"de\"), Italian (\"it\"), or Portuguese (\"pt\"). If custom entities recognition is used, this parameter is ignored and the language used for training the model is used instead.",
                                        "enum": [
                                            "en",
                                            "es",
                                            "fr",
                                            "de",
                                            "it",
                                            "pt"
                                        ],
                                        "type": "string"
                                    },
                                    "OutputDataConfig": {
                                        "description": "Specifies where to send the output files.",
                                        "properties": {
                                            "S3Uri": {
                                                "description": "<p>When you use the <code>OutputDataConfig</code> object with asynchronous operations, you specify the Amazon S3 location where you want to write the output data. The URI must be in the same region as the API endpoint that you are calling. The location is used as the prefix for the actual location of the output file.</p> <p>When the topic detection job is finished, the service creates an output file in a directory specific to the job. The <code>S3Uri</code> field contains the location of the output file, called <code>output.tar.gz</code>. It is a compressed archive that contains the ouput of the operation.</p>",
                                                "maxLength": 1024,
                                                "pattern": "s3://[a-z0-9][\\.\\-a-z0-9]{1,61}[a-z0-9](/.*)?",
                                                "type": "string"
                                            }
                                        },
                                        "required": [
                                            "S3Uri"
                                        ],
                                        "type": "object"
                                    }
                                },
                                "required": [
                                    "InputDataConfig",
                                    "OutputDataConfig",
                                    "DataAccessRoleArn",
                                    "LanguageCode"
                                ],
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            }
        },
        "/#StartKeyPhrasesDetectionJob": {
            "parameters": [
                {
                    "in": "query",
                    "name": "Action",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "query",
                    "name": "Version",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Content-Sha256",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Date",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Algorithm",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Credential",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Security-Token",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Signature",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-SignedHeaders",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                }
            ],
            "post": {
                "description": "Starts an asynchronous key phrase detection job for a collection of documents. Use the operation to track the status of a job.",
                "operationId": "StartKeyPhrasesDetectionJob",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "JobId": {
                                            "description": "The identifier generated for the job. To get the status of a job, use this identifier with the operation.",
                                            "maxLength": 32,
                                            "minLength": 1,
                                            "pattern": "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-%@]*)$",
                                            "type": "string"
                                        },
                                        "JobStatus": {
                                            "description": "<p>The status of the job. </p> <ul> <li> <p>SUBMITTED - The job has been received and is queued for processing.</p> </li> <li> <p>IN_PROGRESS - Amazon Comprehend is processing the job.</p> </li> <li> <p>COMPLETED - The job was successfully completed and the output is available.</p> </li> <li> <p>FAILED - The job did not complete. To get details, use the operation.</p> </li> </ul>",
                                            "enum": [
                                                "SUBMITTED",
                                                "IN_PROGRESS",
                                                "COMPLETED",
                                                "FAILED",
                                                "STOP_REQUESTED",
                                                "STOPPED"
                                            ],
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "480": {
                        "description": "InvalidRequestException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "TooManyRequestsException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "482": {
                        "description": "InternalServerException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "ClientRequestToken": {
                                        "description": "A unique identifier for the request. If you don't set the client request token, Amazon Comprehend generates one.",
                                        "maxLength": 64,
                                        "minLength": 1,
                                        "pattern": "^[a-zA-Z0-9-]+$",
                                        "type": "string"
                                    },
                                    "DataAccessRoleArn": {
                                        "description": "The Amazon Resource Name (ARN) of the AWS Identity and Access Management (IAM) role that grants Amazon Comprehend read access to your input data. For more information, see <a href=\"https://docs.aws.amazon.com/comprehend/latest/dg/access-control-managing-permissions.html#auth-role-permissions\">https://docs.aws.amazon.com/comprehend/latest/dg/access-control-managing-permissions.html#auth-role-permissions</a>.",
                                        "maxLength": 2048,
                                        "minLength": 20,
                                        "pattern": "arn:aws(-[^:]+)?:iam::[0-9]{12}:role/.+",
                                        "type": "string"
                                    },
                                    "InputDataConfig": {
                                        "description": "Specifies the format and location of the input data for the job.",
                                        "properties": {
                                            "InputFormat": {
                                                "description": "<p>Specifies how the text in an input file should be processed:</p> <ul> <li> <p> <code>ONE_DOC_PER_FILE</code> - Each file is considered a separate document. Use this option when you are processing large documents, such as newspaper articles or scientific papers.</p> </li> <li> <p> <code>ONE_DOC_PER_LINE</code> - Each line in a file is considered a separate document. Use this option when you are processing many short documents, such as text messages.</p> </li> </ul>",
                                                "enum": [
                                                    "ONE_DOC_PER_FILE",
                                                    "ONE_DOC_PER_LINE"
                                                ],
                                                "type": "string"
                                            },
                                            "S3Uri": {
                                                "description": "<p>The Amazon S3 URI for the input data. The URI must be in same region as the API endpoint that you are calling. The URI can point to a single input file or it can provide the prefix for a collection of data files. </p> <p>For example, if you use the URI <code>S3://bucketName/prefix</code>, if the prefix is a single file, Amazon Comprehend uses that file as input. If more than one file begins with the prefix, Amazon Comprehend uses all of them as input.</p>",
                                                "maxLength": 1024,
                                                "pattern": "s3://[a-z0-9][\\.\\-a-z0-9]{1,61}[a-z0-9](/.*)?",
                                                "type": "string"
                                            }
                                        },
                                        "required": [
                                            "S3Uri"
                                        ],
                                        "type": "object"
                                    },
                                    "JobName": {
                                        "description": "The identifier of the job.",
                                        "maxLength": 256,
                                        "minLength": 1,
                                        "pattern": "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-%@]*)$",
                                        "type": "string"
                                    },
                                    "LanguageCode": {
                                        "description": "The language of the input documents. You can specify English (\"en\") or Spanish (\"es\"). All documents must be in the same language.",
                                        "enum": [
                                            "en",
                                            "es",
                                            "fr",
                                            "de",
                                            "it",
                                            "pt"
                                        ],
                                        "type": "string"
                                    },
                                    "OutputDataConfig": {
                                        "description": "Specifies where to send the output files.",
                                        "properties": {
                                            "S3Uri": {
                                                "description": "<p>When you use the <code>OutputDataConfig</code> object with asynchronous operations, you specify the Amazon S3 location where you want to write the output data. The URI must be in the same region as the API endpoint that you are calling. The location is used as the prefix for the actual location of the output file.</p> <p>When the topic detection job is finished, the service creates an output file in a directory specific to the job. The <code>S3Uri</code> field contains the location of the output file, called <code>output.tar.gz</code>. It is a compressed archive that contains the ouput of the operation.</p>",
                                                "maxLength": 1024,
                                                "pattern": "s3://[a-z0-9][\\.\\-a-z0-9]{1,61}[a-z0-9](/.*)?",
                                                "type": "string"
                                            }
                                        },
                                        "required": [
                                            "S3Uri"
                                        ],
                                        "type": "object"
                                    }
                                },
                                "required": [
                                    "InputDataConfig",
                                    "OutputDataConfig",
                                    "DataAccessRoleArn",
                                    "LanguageCode"
                                ],
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            }
        },
        "/#StartSentimentDetectionJob": {
            "parameters": [
                {
                    "in": "query",
                    "name": "Action",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "query",
                    "name": "Version",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Content-Sha256",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Date",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Algorithm",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Credential",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Security-Token",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Signature",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-SignedHeaders",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                }
            ],
            "post": {
                "description": "Starts an asynchronous sentiment detection job for a collection of documents. use the operation to track the status of a job.",
                "operationId": "StartSentimentDetectionJob",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "JobId": {
                                            "description": "The identifier generated for the job. To get the status of a job, use this identifier with the operation.",
                                            "maxLength": 32,
                                            "minLength": 1,
                                            "pattern": "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-%@]*)$",
                                            "type": "string"
                                        },
                                        "JobStatus": {
                                            "description": "<p>The status of the job. </p> <ul> <li> <p>SUBMITTED - The job has been received and is queued for processing.</p> </li> <li> <p>IN_PROGRESS - Amazon Comprehend is processing the job.</p> </li> <li> <p>COMPLETED - The job was successfully completed and the output is available.</p> </li> <li> <p>FAILED - The job did not complete. To get details, use the operation.</p> </li> </ul>",
                                            "enum": [
                                                "SUBMITTED",
                                                "IN_PROGRESS",
                                                "COMPLETED",
                                                "FAILED",
                                                "STOP_REQUESTED",
                                                "STOPPED"
                                            ],
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "480": {
                        "description": "InvalidRequestException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "TooManyRequestsException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "482": {
                        "description": "InternalServerException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "ClientRequestToken": {
                                        "description": "A unique identifier for the request. If you don't set the client request token, Amazon Comprehend generates one.",
                                        "maxLength": 64,
                                        "minLength": 1,
                                        "pattern": "^[a-zA-Z0-9-]+$",
                                        "type": "string"
                                    },
                                    "DataAccessRoleArn": {
                                        "description": "The Amazon Resource Name (ARN) of the AWS Identity and Access Management (IAM) role that grants Amazon Comprehend read access to your input data. For more information, see <a href=\"https://docs.aws.amazon.com/comprehend/latest/dg/access-control-managing-permissions.html#auth-role-permissions\">https://docs.aws.amazon.com/comprehend/latest/dg/access-control-managing-permissions.html#auth-role-permissions</a>.",
                                        "maxLength": 2048,
                                        "minLength": 20,
                                        "pattern": "arn:aws(-[^:]+)?:iam::[0-9]{12}:role/.+",
                                        "type": "string"
                                    },
                                    "InputDataConfig": {
                                        "description": "Specifies the format and location of the input data for the job.",
                                        "properties": {
                                            "InputFormat": {
                                                "description": "<p>Specifies how the text in an input file should be processed:</p> <ul> <li> <p> <code>ONE_DOC_PER_FILE</code> - Each file is considered a separate document. Use this option when you are processing large documents, such as newspaper articles or scientific papers.</p> </li> <li> <p> <code>ONE_DOC_PER_LINE</code> - Each line in a file is considered a separate document. Use this option when you are processing many short documents, such as text messages.</p> </li> </ul>",
                                                "enum": [
                                                    "ONE_DOC_PER_FILE",
                                                    "ONE_DOC_PER_LINE"
                                                ],
                                                "type": "string"
                                            },
                                            "S3Uri": {
                                                "description": "<p>The Amazon S3 URI for the input data. The URI must be in same region as the API endpoint that you are calling. The URI can point to a single input file or it can provide the prefix for a collection of data files. </p> <p>For example, if you use the URI <code>S3://bucketName/prefix</code>, if the prefix is a single file, Amazon Comprehend uses that file as input. If more than one file begins with the prefix, Amazon Comprehend uses all of them as input.</p>",
                                                "maxLength": 1024,
                                                "pattern": "s3://[a-z0-9][\\.\\-a-z0-9]{1,61}[a-z0-9](/.*)?",
                                                "type": "string"
                                            }
                                        },
                                        "required": [
                                            "S3Uri"
                                        ],
                                        "type": "object"
                                    },
                                    "JobName": {
                                        "description": "The identifier of the job.",
                                        "maxLength": 256,
                                        "minLength": 1,
                                        "pattern": "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-%@]*)$",
                                        "type": "string"
                                    },
                                    "LanguageCode": {
                                        "description": "The language of the input documents. You can specify English (\"en\") or Spanish (\"es\"). All documents must be in the same language.",
                                        "enum": [
                                            "en",
                                            "es",
                                            "fr",
                                            "de",
                                            "it",
                                            "pt"
                                        ],
                                        "type": "string"
                                    },
                                    "OutputDataConfig": {
                                        "description": "Specifies where to send the output files. ",
                                        "properties": {
                                            "S3Uri": {
                                                "description": "<p>When you use the <code>OutputDataConfig</code> object with asynchronous operations, you specify the Amazon S3 location where you want to write the output data. The URI must be in the same region as the API endpoint that you are calling. The location is used as the prefix for the actual location of the output file.</p> <p>When the topic detection job is finished, the service creates an output file in a directory specific to the job. The <code>S3Uri</code> field contains the location of the output file, called <code>output.tar.gz</code>. It is a compressed archive that contains the ouput of the operation.</p>",
                                                "maxLength": 1024,
                                                "pattern": "s3://[a-z0-9][\\.\\-a-z0-9]{1,61}[a-z0-9](/.*)?",
                                                "type": "string"
                                            }
                                        },
                                        "required": [
                                            "S3Uri"
                                        ],
                                        "type": "object"
                                    }
                                },
                                "required": [
                                    "InputDataConfig",
                                    "OutputDataConfig",
                                    "DataAccessRoleArn",
                                    "LanguageCode"
                                ],
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            }
        },
        "/#StartTopicsDetectionJob": {
            "parameters": [
                {
                    "in": "query",
                    "name": "Action",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "query",
                    "name": "Version",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Content-Sha256",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Date",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Algorithm",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Credential",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Security-Token",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Signature",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-SignedHeaders",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                }
            ],
            "post": {
                "description": "Starts an asynchronous topic detection job. Use the <code>DescribeTopicDetectionJob</code> operation to track the status of a job.",
                "operationId": "StartTopicsDetectionJob",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "JobId": {
                                            "description": "The identifier generated for the job. To get the status of the job, use this identifier with the <code>DescribeTopicDetectionJob</code> operation.",
                                            "maxLength": 32,
                                            "minLength": 1,
                                            "pattern": "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-%@]*)$",
                                            "type": "string"
                                        },
                                        "JobStatus": {
                                            "description": "<p>The status of the job: </p> <ul> <li> <p>SUBMITTED - The job has been received and is queued for processing.</p> </li> <li> <p>IN_PROGRESS - Amazon Comprehend is processing the job.</p> </li> <li> <p>COMPLETED - The job was successfully completed and the output is available.</p> </li> <li> <p>FAILED - The job did not complete. To get details, use the <code>DescribeTopicDetectionJob</code> operation.</p> </li> </ul>",
                                            "enum": [
                                                "SUBMITTED",
                                                "IN_PROGRESS",
                                                "COMPLETED",
                                                "FAILED",
                                                "STOP_REQUESTED",
                                                "STOPPED"
                                            ],
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "480": {
                        "description": "InvalidRequestException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "TooManyRequestsException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "482": {
                        "description": "InternalServerException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "ClientRequestToken": {
                                        "description": "A unique identifier for the request. If you do not set the client request token, Amazon Comprehend generates one.",
                                        "maxLength": 64,
                                        "minLength": 1,
                                        "pattern": "^[a-zA-Z0-9-]+$",
                                        "type": "string"
                                    },
                                    "DataAccessRoleArn": {
                                        "description": "The Amazon Resource Name (ARN) of the AWS Identity and Access Management (IAM) role that grants Amazon Comprehend read access to your input data. For more information, see <a href=\"https://docs.aws.amazon.com/comprehend/latest/dg/access-control-managing-permissions.html#auth-role-permissions\">https://docs.aws.amazon.com/comprehend/latest/dg/access-control-managing-permissions.html#auth-role-permissions</a>.",
                                        "maxLength": 2048,
                                        "minLength": 20,
                                        "pattern": "arn:aws(-[^:]+)?:iam::[0-9]{12}:role/.+",
                                        "type": "string"
                                    },
                                    "InputDataConfig": {
                                        "description": "Specifies the format and location of the input data for the job.",
                                        "properties": {
                                            "InputFormat": {
                                                "description": "<p>Specifies how the text in an input file should be processed:</p> <ul> <li> <p> <code>ONE_DOC_PER_FILE</code> - Each file is considered a separate document. Use this option when you are processing large documents, such as newspaper articles or scientific papers.</p> </li> <li> <p> <code>ONE_DOC_PER_LINE</code> - Each line in a file is considered a separate document. Use this option when you are processing many short documents, such as text messages.</p> </li> </ul>",
                                                "enum": [
                                                    "ONE_DOC_PER_FILE",
                                                    "ONE_DOC_PER_LINE"
                                                ],
                                                "type": "string"
                                            },
                                            "S3Uri": {
                                                "description": "<p>The Amazon S3 URI for the input data. The URI must be in same region as the API endpoint that you are calling. The URI can point to a single input file or it can provide the prefix for a collection of data files. </p> <p>For example, if you use the URI <code>S3://bucketName/prefix</code>, if the prefix is a single file, Amazon Comprehend uses that file as input. If more than one file begins with the prefix, Amazon Comprehend uses all of them as input.</p>",
                                                "maxLength": 1024,
                                                "pattern": "s3://[a-z0-9][\\.\\-a-z0-9]{1,61}[a-z0-9](/.*)?",
                                                "type": "string"
                                            }
                                        },
                                        "required": [
                                            "S3Uri"
                                        ],
                                        "type": "object"
                                    },
                                    "JobName": {
                                        "description": "The identifier of the job.",
                                        "maxLength": 256,
                                        "minLength": 1,
                                        "pattern": "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-%@]*)$",
                                        "type": "string"
                                    },
                                    "NumberOfTopics": {
                                        "description": "The number of topics to detect.",
                                        "maximum": 100,
                                        "minimum": 1,
                                        "type": "integer"
                                    },
                                    "OutputDataConfig": {
                                        "description": "Specifies where to send the output files. The output is a compressed archive with two files, <code>topic-terms.csv</code> that lists the terms associated with each topic, and <code>doc-topics.csv</code> that lists the documents associated with each topic",
                                        "properties": {
                                            "S3Uri": {
                                                "description": "<p>When you use the <code>OutputDataConfig</code> object with asynchronous operations, you specify the Amazon S3 location where you want to write the output data. The URI must be in the same region as the API endpoint that you are calling. The location is used as the prefix for the actual location of the output file.</p> <p>When the topic detection job is finished, the service creates an output file in a directory specific to the job. The <code>S3Uri</code> field contains the location of the output file, called <code>output.tar.gz</code>. It is a compressed archive that contains the ouput of the operation.</p>",
                                                "maxLength": 1024,
                                                "pattern": "s3://[a-z0-9][\\.\\-a-z0-9]{1,61}[a-z0-9](/.*)?",
                                                "type": "string"
                                            }
                                        },
                                        "required": [
                                            "S3Uri"
                                        ],
                                        "type": "object"
                                    }
                                },
                                "required": [
                                    "InputDataConfig",
                                    "OutputDataConfig",
                                    "DataAccessRoleArn"
                                ],
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            }
        },
        "/#StopDominantLanguageDetectionJob": {
            "parameters": [
                {
                    "in": "query",
                    "name": "Action",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "query",
                    "name": "Version",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Content-Sha256",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Date",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Algorithm",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Credential",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Security-Token",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Signature",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-SignedHeaders",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                }
            ],
            "post": {
                "description": "<p>Stops a dominant language detection job in progress.</p> <p>If the job state is <code>IN_PROGRESS</code> the job is marked for termination and put into the <code>STOP_REQUESTED</code> state. If the job completes before it can be stopped, it is put into the <code>COMPLETED</code> state; otherwise the job is stopped and put into the <code>STOPPED</code> state.</p> <p>If the job is in the <code>COMPLETED</code> or <code>FAILED</code> state when you call the <code>StopDominantLanguageDetectionJob</code> operation, the operation returns a 400 Internal Request Exception. </p> <p>When a job is stopped, any documents already processed are written to the output location.</p>",
                "operationId": "StopDominantLanguageDetectionJob",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "JobId": {
                                            "description": "The identifier of the dominant language detection job to stop.",
                                            "maxLength": 32,
                                            "minLength": 1,
                                            "pattern": "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-%@]*)$",
                                            "type": "string"
                                        },
                                        "JobStatus": {
                                            "description": "Either <code>STOP_REQUESTED</code> if the job is currently running, or <code>STOPPED</code> if the job was previously stopped with the <code>StopDominantLanguageDetectionJob</code> operation.",
                                            "enum": [
                                                "SUBMITTED",
                                                "IN_PROGRESS",
                                                "COMPLETED",
                                                "FAILED",
                                                "STOP_REQUESTED",
                                                "STOPPED"
                                            ],
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "480": {
                        "description": "InvalidRequestException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "JobNotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "482": {
                        "description": "InternalServerException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "JobId": {
                                        "description": "The identifier of the dominant language detection job to stop.",
                                        "maxLength": 32,
                                        "minLength": 1,
                                        "pattern": "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-%@]*)$",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "JobId"
                                ],
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            }
        },
        "/#StopEntitiesDetectionJob": {
            "parameters": [
                {
                    "in": "query",
                    "name": "Action",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "query",
                    "name": "Version",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Content-Sha256",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Date",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Algorithm",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Credential",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Security-Token",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Signature",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-SignedHeaders",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                }
            ],
            "post": {
                "description": "<p>Stops an entities detection job in progress.</p> <p>If the job state is <code>IN_PROGRESS</code> the job is marked for termination and put into the <code>STOP_REQUESTED</code> state. If the job completes before it can be stopped, it is put into the <code>COMPLETED</code> state; otherwise the job is stopped and put into the <code>STOPPED</code> state.</p> <p>If the job is in the <code>COMPLETED</code> or <code>FAILED</code> state when you call the <code>StopDominantLanguageDetectionJob</code> operation, the operation returns a 400 Internal Request Exception. </p> <p>When a job is stopped, any documents already processed are written to the output location.</p>",
                "operationId": "StopEntitiesDetectionJob",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "JobId": {
                                            "description": "The identifier of the entities detection job to stop.",
                                            "maxLength": 32,
                                            "minLength": 1,
                                            "pattern": "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-%@]*)$",
                                            "type": "string"
                                        },
                                        "JobStatus": {
                                            "description": "Either <code>STOP_REQUESTED</code> if the job is currently running, or <code>STOPPED</code> if the job was previously stopped with the <code>StopEntitiesDetectionJob</code> operation.",
                                            "enum": [
                                                "SUBMITTED",
                                                "IN_PROGRESS",
                                                "COMPLETED",
                                                "FAILED",
                                                "STOP_REQUESTED",
                                                "STOPPED"
                                            ],
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "480": {
                        "description": "InvalidRequestException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "JobNotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "482": {
                        "description": "InternalServerException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "JobId": {
                                        "description": "The identifier of the entities detection job to stop.",
                                        "maxLength": 32,
                                        "minLength": 1,
                                        "pattern": "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-%@]*)$",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "JobId"
                                ],
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            }
        },
        "/#StopKeyPhrasesDetectionJob": {
            "parameters": [
                {
                    "in": "query",
                    "name": "Action",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "query",
                    "name": "Version",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Content-Sha256",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Date",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Algorithm",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Credential",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Security-Token",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Signature",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-SignedHeaders",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                }
            ],
            "post": {
                "description": "<p>Stops a key phrases detection job in progress.</p> <p>If the job state is <code>IN_PROGRESS</code> the job is marked for termination and put into the <code>STOP_REQUESTED</code> state. If the job completes before it can be stopped, it is put into the <code>COMPLETED</code> state; otherwise the job is stopped and put into the <code>STOPPED</code> state.</p> <p>If the job is in the <code>COMPLETED</code> or <code>FAILED</code> state when you call the <code>StopDominantLanguageDetectionJob</code> operation, the operation returns a 400 Internal Request Exception. </p> <p>When a job is stopped, any documents already processed are written to the output location.</p>",
                "operationId": "StopKeyPhrasesDetectionJob",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "JobId": {
                                            "description": "The identifier of the key phrases detection job to stop.",
                                            "maxLength": 32,
                                            "minLength": 1,
                                            "pattern": "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-%@]*)$",
                                            "type": "string"
                                        },
                                        "JobStatus": {
                                            "description": "Either <code>STOP_REQUESTED</code> if the job is currently running, or <code>STOPPED</code> if the job was previously stopped with the <code>StopKeyPhrasesDetectionJob</code> operation.",
                                            "enum": [
                                                "SUBMITTED",
                                                "IN_PROGRESS",
                                                "COMPLETED",
                                                "FAILED",
                                                "STOP_REQUESTED",
                                                "STOPPED"
                                            ],
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "480": {
                        "description": "InvalidRequestException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "JobNotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "482": {
                        "description": "InternalServerException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "JobId": {
                                        "description": "The identifier of the key phrases detection job to stop.",
                                        "maxLength": 32,
                                        "minLength": 1,
                                        "pattern": "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-%@]*)$",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "JobId"
                                ],
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            }
        },
        "/#StopSentimentDetectionJob": {
            "parameters": [
                {
                    "in": "query",
                    "name": "Action",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "query",
                    "name": "Version",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Content-Sha256",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Date",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Algorithm",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Credential",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Security-Token",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Signature",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-SignedHeaders",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                }
            ],
            "post": {
                "description": "<p>Stops a sentiment detection job in progress.</p> <p>If the job state is <code>IN_PROGRESS</code> the job is marked for termination and put into the <code>STOP_REQUESTED</code> state. If the job completes before it can be stopped, it is put into the <code>COMPLETED</code> state; otherwise the job is be stopped and put into the <code>STOPPED</code> state.</p> <p>If the job is in the <code>COMPLETED</code> or <code>FAILED</code> state when you call the <code>StopDominantLanguageDetectionJob</code> operation, the operation returns a 400 Internal Request Exception. </p> <p>When a job is stopped, any documents already processed are written to the output location.</p>",
                "operationId": "StopSentimentDetectionJob",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "JobId": {
                                            "description": "The identifier of the sentiment detection job to stop.",
                                            "maxLength": 32,
                                            "minLength": 1,
                                            "pattern": "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-%@]*)$",
                                            "type": "string"
                                        },
                                        "JobStatus": {
                                            "description": "Either <code>STOP_REQUESTED</code> if the job is currently running, or <code>STOPPED</code> if the job was previously stopped with the <code>StopSentimentDetectionJob</code> operation.",
                                            "enum": [
                                                "SUBMITTED",
                                                "IN_PROGRESS",
                                                "COMPLETED",
                                                "FAILED",
                                                "STOP_REQUESTED",
                                                "STOPPED"
                                            ],
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "480": {
                        "description": "InvalidRequestException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "JobNotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "482": {
                        "description": "InternalServerException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "JobId": {
                                        "description": "The identifier of the sentiment detection job to stop.",
                                        "maxLength": 32,
                                        "minLength": 1,
                                        "pattern": "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-%@]*)$",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "JobId"
                                ],
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            }
        },
        "/#StopTrainingDocumentClassifier": {
            "parameters": [
                {
                    "in": "query",
                    "name": "Action",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "query",
                    "name": "Version",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Content-Sha256",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Date",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Algorithm",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Credential",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Security-Token",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Signature",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-SignedHeaders",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                }
            ],
            "post": {
                "description": "<p>Stops a document classifier training job while in progress.</p> <p>If the training job state is <code>TRAINING</code>, the job is marked for termination and put into the <code>STOP_REQUESTED</code> state. If the training job completes before it can be stopped, it is put into the <code>TRAINED</code>; otherwise the training job is stopped and put into the <code>STOPPED</code> state and the service sends back an HTTP 200 response with an empty HTTP body. </p>",
                "operationId": "StopTrainingDocumentClassifier",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {},
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "480": {
                        "description": "InvalidRequestException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "TooManyRequestsException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "482": {
                        "description": "ResourceNotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "483": {
                        "description": "InternalServerException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "DocumentClassifierArn": {
                                        "description": "The Amazon Resource Name (ARN) that identifies the document classifier currently being trained.",
                                        "maxLength": 256,
                                        "pattern": "arn:aws:comprehend:[a-zA-Z0-9-]*:[0-9]{12}:document-classifier/[a-zA-Z0-9](-*[a-zA-Z0-9])*",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "DocumentClassifierArn"
                                ],
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            }
        },
        "/#StopTrainingEntityRecognizer": {
            "parameters": [
                {
                    "in": "query",
                    "name": "Action",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "query",
                    "name": "Version",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Content-Sha256",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Date",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Algorithm",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Credential",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Security-Token",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Signature",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-SignedHeaders",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                }
            ],
            "post": {
                "description": "<p>Stops an entity recognizer training job while in progress.</p> <p>If the training job state is <code>TRAINING</code>, the job is marked for termination and put into the <code>STOP_REQUESTED</code> state. If the training job completes before it can be stopped, it is put into the <code>TRAINED</code>; otherwise the training job is stopped and putted into the <code>STOPPED</code> state and the service sends back an HTTP 200 response with an empty HTTP body.</p>",
                "operationId": "StopTrainingEntityRecognizer",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {},
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "480": {
                        "description": "InvalidRequestException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "TooManyRequestsException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "482": {
                        "description": "ResourceNotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "483": {
                        "description": "InternalServerException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "EntityRecognizerArn": {
                                        "description": "The Amazon Resource Name (ARN) that identifies the entity recognizer currently being trained.",
                                        "maxLength": 256,
                                        "pattern": "arn:aws:comprehend:[a-zA-Z0-9-]*:[0-9]{12}:entity-recognizer/[a-zA-Z0-9](-*[a-zA-Z0-9])*",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "EntityRecognizerArn"
                                ],
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            }
        }
    },
    "components": {
        "schemas": {
            "AnyLengthString": {
                "type": "string"
            },
            "BatchDetectDominantLanguageItemResult": {
                "description": "The result of calling the operation. The operation returns one object for each document that is successfully processed by the operation.",
                "properties": {
                    "Index": {
                        "description": "The zero-based index of the document in the input list.",
                        "type": "integer"
                    },
                    "Languages": {
                        "description": "One or more <a>DominantLanguage</a> objects describing the dominant languages in the document.",
                        "items": {
                            "description": "Returns the code for the dominant language in the input text and the level of confidence that Amazon Comprehend has in the accuracy of the detection.",
                            "properties": {
                                "LanguageCode": {
                                    "description": "The RFC 5646 language code for the dominant language. For more information about RFC 5646, see <a href=\"https://tools.ietf.org/html/rfc5646\">Tags for Identifying Languages</a> on the <i>IETF Tools</i> web site.",
                                    "minLength": 1,
                                    "type": "string"
                                },
                                "Score": {
                                    "description": "The level of confidence that Amazon Comprehend has in the accuracy of the detection.",
                                    "format": "float",
                                    "type": "number"
                                }
                            },
                            "type": "object"
                        },
                        "type": "array"
                    }
                },
                "type": "object"
            },
            "BatchDetectDominantLanguageRequest": {
                "properties": {
                    "TextList": {
                        "description": "A list containing the text of the input documents. The list can contain a maximum of 25 documents. Each document should contain at least 20 characters and must contain fewer than 5,000 bytes of UTF-8 encoded characters.",
                        "items": {
                            "minLength": 1,
                            "type": "string"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "TextList"
                ],
                "type": "object"
            },
            "BatchDetectDominantLanguageResponse": {
                "properties": {
                    "ErrorList": {
                        "description": "A list containing one object for each document that contained an error. The results are sorted in ascending order by the <code>Index</code> field and match the order of the documents in the input list. If there are no errors in the batch, the <code>ErrorList</code> is empty.",
                        "items": {
                            "description": "Describes an error that occurred while processing a document in a batch. The operation returns on <code>BatchItemError</code> object for each document that contained an error.",
                            "properties": {
                                "ErrorCode": {
                                    "description": "The numeric error code of the error.",
                                    "minLength": 1,
                                    "type": "string"
                                },
                                "ErrorMessage": {
                                    "description": "A text description of the error.",
                                    "minLength": 1,
                                    "type": "string"
                                },
                                "Index": {
                                    "description": "The zero-based index of the document in the input list.",
                                    "type": "integer"
                                }
                            },
                            "type": "object"
                        },
                        "type": "array"
                    },
                    "ResultList": {
                        "description": "A list of objects containing the results of the operation. The results are sorted in ascending order by the <code>Index</code> field and match the order of the documents in the input list. If all of the documents contain an error, the <code>ResultList</code> is empty.",
                        "items": {
                            "description": "The result of calling the operation. The operation returns one object for each document that is successfully processed by the operation.",
                            "properties": {
                                "Index": {
                                    "description": "The zero-based index of the document in the input list.",
                                    "type": "integer"
                                },
                                "Languages": {
                                    "description": "One or more <a>DominantLanguage</a> objects describing the dominant languages in the document.",
                                    "items": {
                                        "description": "Returns the code for the dominant language in the input text and the level of confidence that Amazon Comprehend has in the accuracy of the detection.",
                                        "properties": {
                                            "LanguageCode": {
                                                "description": "The RFC 5646 language code for the dominant language. For more information about RFC 5646, see <a href=\"https://tools.ietf.org/html/rfc5646\">Tags for Identifying Languages</a> on the <i>IETF Tools</i> web site.",
                                                "minLength": 1,
                                                "type": "string"
                                            },
                                            "Score": {
                                                "description": "The level of confidence that Amazon Comprehend has in the accuracy of the detection.",
                                                "format": "float",
                                                "type": "number"
                                            }
                                        },
                                        "type": "object"
                                    },
                                    "type": "array"
                                }
                            },
                            "type": "object"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "ResultList",
                    "ErrorList"
                ],
                "type": "object"
            },
            "BatchDetectEntitiesItemResult": {
                "description": "The result of calling the operation. The operation returns one object for each document that is successfully processed by the operation.",
                "properties": {
                    "Entities": {
                        "description": "One or more <a>Entity</a> objects, one for each entity detected in the document.",
                        "items": {
                            "description": "<p>Provides information about an entity. </p> <p> </p>",
                            "properties": {
                                "BeginOffset": {
                                    "description": "A character offset in the input text that shows where the entity begins (the first character is at position 0). The offset returns the position of each UTF-8 code point in the string. A <i>code point</i> is the abstract character from a particular graphical representation. For example, a multi-byte UTF-8 character maps to a single code point.",
                                    "type": "integer"
                                },
                                "EndOffset": {
                                    "description": "A character offset in the input text that shows where the entity ends. The offset returns the position of each UTF-8 code point in the string. A <i>code point</i> is the abstract character from a particular graphical representation. For example, a multi-byte UTF-8 character maps to a single code point. ",
                                    "type": "integer"
                                },
                                "Score": {
                                    "description": "The level of confidence that Amazon Comprehend has in the accuracy of the detection.",
                                    "format": "float",
                                    "type": "number"
                                },
                                "Text": {
                                    "description": "The text of the entity.",
                                    "minLength": 1,
                                    "type": "string"
                                },
                                "Type": {
                                    "description": "The entity's type.",
                                    "enum": [
                                        "PERSON",
                                        "LOCATION",
                                        "ORGANIZATION",
                                        "COMMERCIAL_ITEM",
                                        "EVENT",
                                        "DATE",
                                        "QUANTITY",
                                        "TITLE",
                                        "OTHER"
                                    ],
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        },
                        "type": "array"
                    },
                    "Index": {
                        "description": "The zero-based index of the document in the input list.",
                        "type": "integer"
                    }
                },
                "type": "object"
            },
            "BatchDetectEntitiesRequest": {
                "properties": {
                    "LanguageCode": {
                        "description": "The language of the input documents. You can specify English (\"en\") or Spanish (\"es\"). All documents must be in the same language.",
                        "enum": [
                            "en",
                            "es",
                            "fr",
                            "de",
                            "it",
                            "pt"
                        ],
                        "type": "string"
                    },
                    "TextList": {
                        "description": "A list containing the text of the input documents. The list can contain a maximum of 25 documents. Each document must contain fewer than 5,000 bytes of UTF-8 encoded characters.",
                        "items": {
                            "minLength": 1,
                            "type": "string"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "TextList",
                    "LanguageCode"
                ],
                "type": "object"
            },
            "BatchDetectEntitiesResponse": {
                "properties": {
                    "ErrorList": {
                        "description": "A list containing one object for each document that contained an error. The results are sorted in ascending order by the <code>Index</code> field and match the order of the documents in the input list. If there are no errors in the batch, the <code>ErrorList</code> is empty.",
                        "items": {
                            "description": "Describes an error that occurred while processing a document in a batch. The operation returns on <code>BatchItemError</code> object for each document that contained an error.",
                            "properties": {
                                "ErrorCode": {
                                    "description": "The numeric error code of the error.",
                                    "minLength": 1,
                                    "type": "string"
                                },
                                "ErrorMessage": {
                                    "description": "A text description of the error.",
                                    "minLength": 1,
                                    "type": "string"
                                },
                                "Index": {
                                    "description": "The zero-based index of the document in the input list.",
                                    "type": "integer"
                                }
                            },
                            "type": "object"
                        },
                        "type": "array"
                    },
                    "ResultList": {
                        "description": "A list of objects containing the results of the operation. The results are sorted in ascending order by the <code>Index</code> field and match the order of the documents in the input list. If all of the documents contain an error, the <code>ResultList</code> is empty.",
                        "items": {
                            "description": "The result of calling the operation. The operation returns one object for each document that is successfully processed by the operation.",
                            "properties": {
                                "Entities": {
                                    "description": "One or more <a>Entity</a> objects, one for each entity detected in the document.",
                                    "items": {
                                        "description": "<p>Provides information about an entity. </p> <p> </p>",
                                        "properties": {
                                            "BeginOffset": {
                                                "description": "A character offset in the input text that shows where the entity begins (the first character is at position 0). The offset returns the position of each UTF-8 code point in the string. A <i>code point</i> is the abstract character from a particular graphical representation. For example, a multi-byte UTF-8 character maps to a single code point.",
                                                "type": "integer"
                                            },
                                            "EndOffset": {
                                                "description": "A character offset in the input text that shows where the entity ends. The offset returns the position of each UTF-8 code point in the string. A <i>code point</i> is the abstract character from a particular graphical representation. For example, a multi-byte UTF-8 character maps to a single code point. ",
                                                "type": "integer"
                                            },
                                            "Score": {
                                                "description": "The level of confidence that Amazon Comprehend has in the accuracy of the detection.",
                                                "format": "float",
                                                "type": "number"
                                            },
                                            "Text": {
                                                "description": "The text of the entity.",
                                                "minLength": 1,
                                                "type": "string"
                                            },
                                            "Type": {
                                                "description": "The entity's type.",
                                                "enum": [
                                                    "PERSON",
                                                    "LOCATION",
                                                    "ORGANIZATION",
                                                    "COMMERCIAL_ITEM",
                                                    "EVENT",
                                                    "DATE",
                                                    "QUANTITY",
                                                    "TITLE",
                                                    "OTHER"
                                                ],
                                                "type": "string"
                                            }
                                        },
                                        "type": "object"
                                    },
                                    "type": "array"
                                },
                                "Index": {
                                    "description": "The zero-based index of the document in the input list.",
                                    "type": "integer"
                                }
                            },
                            "type": "object"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "ResultList",
                    "ErrorList"
                ],
                "type": "object"
            },
            "BatchDetectKeyPhrasesItemResult": {
                "description": "The result of calling the operation. The operation returns one object for each document that is successfully processed by the operation.",
                "properties": {
                    "Index": {
                        "description": "The zero-based index of the document in the input list.",
                        "type": "integer"
                    },
                    "KeyPhrases": {
                        "description": "One or more <a>KeyPhrase</a> objects, one for each key phrase detected in the document.",
                        "items": {
                            "description": "Describes a key noun phrase.",
                            "properties": {
                                "BeginOffset": {
                                    "description": "A character offset in the input text that shows where the key phrase begins (the first character is at position 0). The offset returns the position of each UTF-8 code point in the string. A <i>code point</i> is the abstract character from a particular graphical representation. For example, a multi-byte UTF-8 character maps to a single code point.",
                                    "type": "integer"
                                },
                                "EndOffset": {
                                    "description": "A character offset in the input text where the key phrase ends. The offset returns the position of each UTF-8 code point in the string. A <code>code point</code> is the abstract character from a particular graphical representation. For example, a multi-byte UTF-8 character maps to a single code point.",
                                    "type": "integer"
                                },
                                "Score": {
                                    "description": "The level of confidence that Amazon Comprehend has in the accuracy of the detection.",
                                    "format": "float",
                                    "type": "number"
                                },
                                "Text": {
                                    "description": "The text of a key noun phrase.",
                                    "minLength": 1,
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        },
                        "type": "array"
                    }
                },
                "type": "object"
            },
            "BatchDetectKeyPhrasesRequest": {
                "properties": {
                    "LanguageCode": {
                        "description": "The language of the input documents. You can specify English (\"en\") or Spanish (\"es\"). All documents must be in the same language.",
                        "enum": [
                            "en",
                            "es",
                            "fr",
                            "de",
                            "it",
                            "pt"
                        ],
                        "type": "string"
                    },
                    "TextList": {
                        "description": "A list containing the text of the input documents. The list can contain a maximum of 25 documents. Each document must contain fewer that 5,000 bytes of UTF-8 encoded characters.",
                        "items": {
                            "minLength": 1,
                            "type": "string"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "TextList",
                    "LanguageCode"
                ],
                "type": "object"
            },
            "BatchDetectKeyPhrasesResponse": {
                "properties": {
                    "ErrorList": {
                        "description": "A list containing one object for each document that contained an error. The results are sorted in ascending order by the <code>Index</code> field and match the order of the documents in the input list. If there are no errors in the batch, the <code>ErrorList</code> is empty.",
                        "items": {
                            "description": "Describes an error that occurred while processing a document in a batch. The operation returns on <code>BatchItemError</code> object for each document that contained an error.",
                            "properties": {
                                "ErrorCode": {
                                    "description": "The numeric error code of the error.",
                                    "minLength": 1,
                                    "type": "string"
                                },
                                "ErrorMessage": {
                                    "description": "A text description of the error.",
                                    "minLength": 1,
                                    "type": "string"
                                },
                                "Index": {
                                    "description": "The zero-based index of the document in the input list.",
                                    "type": "integer"
                                }
                            },
                            "type": "object"
                        },
                        "type": "array"
                    },
                    "ResultList": {
                        "description": "A list of objects containing the results of the operation. The results are sorted in ascending order by the <code>Index</code> field and match the order of the documents in the input list. If all of the documents contain an error, the <code>ResultList</code> is empty.",
                        "items": {
                            "description": "The result of calling the operation. The operation returns one object for each document that is successfully processed by the operation.",
                            "properties": {
                                "Index": {
                                    "description": "The zero-based index of the document in the input list.",
                                    "type": "integer"
                                },
                                "KeyPhrases": {
                                    "description": "One or more <a>KeyPhrase</a> objects, one for each key phrase detected in the document.",
                                    "items": {
                                        "description": "Describes a key noun phrase.",
                                        "properties": {
                                            "BeginOffset": {
                                                "description": "A character offset in the input text that shows where the key phrase begins (the first character is at position 0). The offset returns the position of each UTF-8 code point in the string. A <i>code point</i> is the abstract character from a particular graphical representation. For example, a multi-byte UTF-8 character maps to a single code point.",
                                                "type": "integer"
                                            },
                                            "EndOffset": {
                                                "description": "A character offset in the input text where the key phrase ends. The offset returns the position of each UTF-8 code point in the string. A <code>code point</code> is the abstract character from a particular graphical representation. For example, a multi-byte UTF-8 character maps to a single code point.",
                                                "type": "integer"
                                            },
                                            "Score": {
                                                "description": "The level of confidence that Amazon Comprehend has in the accuracy of the detection.",
                                                "format": "float",
                                                "type": "number"
                                            },
                                            "Text": {
                                                "description": "The text of a key noun phrase.",
                                                "minLength": 1,
                                                "type": "string"
                                            }
                                        },
                                        "type": "object"
                                    },
                                    "type": "array"
                                }
                            },
                            "type": "object"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "ResultList",
                    "ErrorList"
                ],
                "type": "object"
            },
            "BatchDetectSentimentItemResult": {
                "description": "The result of calling the operation. The operation returns one object for each document that is successfully processed by the operation.",
                "properties": {
                    "Index": {
                        "description": "The zero-based index of the document in the input list.",
                        "type": "integer"
                    },
                    "Sentiment": {
                        "description": "The sentiment detected in the document.",
                        "enum": [
                            "POSITIVE",
                            "NEGATIVE",
                            "NEUTRAL",
                            "MIXED"
                        ],
                        "type": "string"
                    },
                    "SentimentScore": {
                        "description": "The level of confidence that Amazon Comprehend has in the accuracy of its sentiment detection.",
                        "properties": {
                            "Mixed": {
                                "description": "The level of confidence that Amazon Comprehend has in the accuracy of its detection of the <code>MIXED</code> sentiment.",
                                "format": "float",
                                "type": "number"
                            },
                            "Negative": {
                                "description": "The level of confidence that Amazon Comprehend has in the accuracy of its detection of the <code>NEGATIVE</code> sentiment.",
                                "format": "float",
                                "type": "number"
                            },
                            "Neutral": {
                                "description": "The level of confidence that Amazon Comprehend has in the accuracy of its detection of the <code>NEUTRAL</code> sentiment.",
                                "format": "float",
                                "type": "number"
                            },
                            "Positive": {
                                "description": "The level of confidence that Amazon Comprehend has in the accuracy of its detection of the <code>POSITIVE</code> sentiment.",
                                "format": "float",
                                "type": "number"
                            }
                        },
                        "type": "object"
                    }
                },
                "type": "object"
            },
            "BatchDetectSentimentRequest": {
                "properties": {
                    "LanguageCode": {
                        "description": "The language of the input documents. You can specify English (\"en\") or Spanish (\"es\"). All documents must be in the same language.",
                        "enum": [
                            "en",
                            "es",
                            "fr",
                            "de",
                            "it",
                            "pt"
                        ],
                        "type": "string"
                    },
                    "TextList": {
                        "description": "A list containing the text of the input documents. The list can contain a maximum of 25 documents. Each document must contain fewer that 5,000 bytes of UTF-8 encoded characters.",
                        "items": {
                            "minLength": 1,
                            "type": "string"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "TextList",
                    "LanguageCode"
                ],
                "type": "object"
            },
            "BatchDetectSentimentResponse": {
                "properties": {
                    "ErrorList": {
                        "description": "A list containing one object for each document that contained an error. The results are sorted in ascending order by the <code>Index</code> field and match the order of the documents in the input list. If there are no errors in the batch, the <code>ErrorList</code> is empty.",
                        "items": {
                            "description": "Describes an error that occurred while processing a document in a batch. The operation returns on <code>BatchItemError</code> object for each document that contained an error.",
                            "properties": {
                                "ErrorCode": {
                                    "description": "The numeric error code of the error.",
                                    "minLength": 1,
                                    "type": "string"
                                },
                                "ErrorMessage": {
                                    "description": "A text description of the error.",
                                    "minLength": 1,
                                    "type": "string"
                                },
                                "Index": {
                                    "description": "The zero-based index of the document in the input list.",
                                    "type": "integer"
                                }
                            },
                            "type": "object"
                        },
                        "type": "array"
                    },
                    "ResultList": {
                        "description": "A list of objects containing the results of the operation. The results are sorted in ascending order by the <code>Index</code> field and match the order of the documents in the input list. If all of the documents contain an error, the <code>ResultList</code> is empty.",
                        "items": {
                            "description": "The result of calling the operation. The operation returns one object for each document that is successfully processed by the operation.",
                            "properties": {
                                "Index": {
                                    "description": "The zero-based index of the document in the input list.",
                                    "type": "integer"
                                },
                                "Sentiment": {
                                    "description": "The sentiment detected in the document.",
                                    "enum": [
                                        "POSITIVE",
                                        "NEGATIVE",
                                        "NEUTRAL",
                                        "MIXED"
                                    ],
                                    "type": "string"
                                },
                                "SentimentScore": {
                                    "description": "The level of confidence that Amazon Comprehend has in the accuracy of its sentiment detection.",
                                    "properties": {
                                        "Mixed": {
                                            "description": "The level of confidence that Amazon Comprehend has in the accuracy of its detection of the <code>MIXED</code> sentiment.",
                                            "format": "float",
                                            "type": "number"
                                        },
                                        "Negative": {
                                            "description": "The level of confidence that Amazon Comprehend has in the accuracy of its detection of the <code>NEGATIVE</code> sentiment.",
                                            "format": "float",
                                            "type": "number"
                                        },
                                        "Neutral": {
                                            "description": "The level of confidence that Amazon Comprehend has in the accuracy of its detection of the <code>NEUTRAL</code> sentiment.",
                                            "format": "float",
                                            "type": "number"
                                        },
                                        "Positive": {
                                            "description": "The level of confidence that Amazon Comprehend has in the accuracy of its detection of the <code>POSITIVE</code> sentiment.",
                                            "format": "float",
                                            "type": "number"
                                        }
                                    },
                                    "type": "object"
                                }
                            },
                            "type": "object"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "ResultList",
                    "ErrorList"
                ],
                "type": "object"
            },
            "BatchDetectSyntaxItemResult": {
                "description": "The result of calling the operation. The operation returns one object that is successfully processed by the operation.",
                "properties": {
                    "Index": {
                        "description": "The zero-based index of the document in the input list.",
                        "type": "integer"
                    },
                    "SyntaxTokens": {
                        "description": "The syntax tokens for the words in the document, one token for each word.",
                        "items": {
                            "description": "Represents a work in the input text that was recognized and assigned a part of speech. There is one syntax token record for each word in the source text.",
                            "properties": {
                                "BeginOffset": {
                                    "description": "The zero-based offset from the beginning of the source text to the first character in the word.",
                                    "type": "integer"
                                },
                                "EndOffset": {
                                    "description": "The zero-based offset from the beginning of the source text to the last character in the word.",
                                    "type": "integer"
                                },
                                "PartOfSpeech": {
                                    "description": "Provides the part of speech label and the confidence level that Amazon Comprehend has that the part of speech was correctly identified. For more information, see <a>how-syntax</a>.",
                                    "properties": {
                                        "Score": {
                                            "description": "The confidence that Amazon Comprehend has that the part of speech was correctly identified.",
                                            "format": "float",
                                            "type": "number"
                                        },
                                        "Tag": {
                                            "description": "Identifies the part of speech that the token represents.",
                                            "enum": [
                                                "ADJ",
                                                "ADP",
                                                "ADV",
                                                "AUX",
                                                "CONJ",
                                                "CCONJ",
                                                "DET",
                                                "INTJ",
                                                "NOUN",
                                                "NUM",
                                                "O",
                                                "PART",
                                                "PRON",
                                                "PROPN",
                                                "PUNCT",
                                                "SCONJ",
                                                "SYM",
                                                "VERB"
                                            ],
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                },
                                "Text": {
                                    "description": "The word that was recognized in the source text.",
                                    "minLength": 1,
                                    "type": "string"
                                },
                                "TokenId": {
                                    "description": "A unique identifier for a token.",
                                    "type": "integer"
                                }
                            },
                            "type": "object"
                        },
                        "type": "array"
                    }
                },
                "type": "object"
            },
            "BatchDetectSyntaxRequest": {
                "properties": {
                    "LanguageCode": {
                        "description": "The language of the input documents. You can specify English (\"en\") or Spanish (\"es\"). All documents must be in the same language.",
                        "enum": [
                            "en",
                            "es",
                            "fr",
                            "de",
                            "it",
                            "pt"
                        ],
                        "type": "string"
                    },
                    "TextList": {
                        "description": "A list containing the text of the input documents. The list can contain a maximum of 25 documents. Each document must contain fewer that 5,000 bytes of UTF-8 encoded characters.",
                        "items": {
                            "minLength": 1,
                            "type": "string"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "TextList",
                    "LanguageCode"
                ],
                "type": "object"
            },
            "BatchDetectSyntaxResponse": {
                "properties": {
                    "ErrorList": {
                        "description": "A list containing one object for each document that contained an error. The results are sorted in ascending order by the <code>Index</code> field and match the order of the documents in the input list. If there are no errors in the batch, the <code>ErrorList</code> is empty.",
                        "items": {
                            "description": "Describes an error that occurred while processing a document in a batch. The operation returns on <code>BatchItemError</code> object for each document that contained an error.",
                            "properties": {
                                "ErrorCode": {
                                    "description": "The numeric error code of the error.",
                                    "minLength": 1,
                                    "type": "string"
                                },
                                "ErrorMessage": {
                                    "description": "A text description of the error.",
                                    "minLength": 1,
                                    "type": "string"
                                },
                                "Index": {
                                    "description": "The zero-based index of the document in the input list.",
                                    "type": "integer"
                                }
                            },
                            "type": "object"
                        },
                        "type": "array"
                    },
                    "ResultList": {
                        "description": "A list of objects containing the results of the operation. The results are sorted in ascending order by the <code>Index</code> field and match the order of the documents in the input list. If all of the documents contain an error, the <code>ResultList</code> is empty.",
                        "items": {
                            "description": "The result of calling the operation. The operation returns one object that is successfully processed by the operation.",
                            "properties": {
                                "Index": {
                                    "description": "The zero-based index of the document in the input list.",
                                    "type": "integer"
                                },
                                "SyntaxTokens": {
                                    "description": "The syntax tokens for the words in the document, one token for each word.",
                                    "items": {
                                        "description": "Represents a work in the input text that was recognized and assigned a part of speech. There is one syntax token record for each word in the source text.",
                                        "properties": {
                                            "BeginOffset": {
                                                "description": "The zero-based offset from the beginning of the source text to the first character in the word.",
                                                "type": "integer"
                                            },
                                            "EndOffset": {
                                                "description": "The zero-based offset from the beginning of the source text to the last character in the word.",
                                                "type": "integer"
                                            },
                                            "PartOfSpeech": {
                                                "description": "Provides the part of speech label and the confidence level that Amazon Comprehend has that the part of speech was correctly identified. For more information, see <a>how-syntax</a>.",
                                                "properties": {
                                                    "Score": {
                                                        "description": "The confidence that Amazon Comprehend has that the part of speech was correctly identified.",
                                                        "format": "float",
                                                        "type": "number"
                                                    },
                                                    "Tag": {
                                                        "description": "Identifies the part of speech that the token represents.",
                                                        "enum": [
                                                            "ADJ",
                                                            "ADP",
                                                            "ADV",
                                                            "AUX",
                                                            "CONJ",
                                                            "CCONJ",
                                                            "DET",
                                                            "INTJ",
                                                            "NOUN",
                                                            "NUM",
                                                            "O",
                                                            "PART",
                                                            "PRON",
                                                            "PROPN",
                                                            "PUNCT",
                                                            "SCONJ",
                                                            "SYM",
                                                            "VERB"
                                                        ],
                                                        "type": "string"
                                                    }
                                                },
                                                "type": "object"
                                            },
                                            "Text": {
                                                "description": "The word that was recognized in the source text.",
                                                "minLength": 1,
                                                "type": "string"
                                            },
                                            "TokenId": {
                                                "description": "A unique identifier for a token.",
                                                "type": "integer"
                                            }
                                        },
                                        "type": "object"
                                    },
                                    "type": "array"
                                }
                            },
                            "type": "object"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "ResultList",
                    "ErrorList"
                ],
                "type": "object"
            },
            "BatchItemError": {
                "description": "Describes an error that occurred while processing a document in a batch. The operation returns on <code>BatchItemError</code> object for each document that contained an error.",
                "properties": {
                    "ErrorCode": {
                        "description": "The numeric error code of the error.",
                        "minLength": 1,
                        "type": "string"
                    },
                    "ErrorMessage": {
                        "description": "A text description of the error.",
                        "minLength": 1,
                        "type": "string"
                    },
                    "Index": {
                        "description": "The zero-based index of the document in the input list.",
                        "type": "integer"
                    }
                },
                "type": "object"
            },
            "BatchItemErrorList": {
                "items": {
                    "description": "Describes an error that occurred while processing a document in a batch. The operation returns on <code>BatchItemError</code> object for each document that contained an error.",
                    "properties": {
                        "ErrorCode": {
                            "description": "The numeric error code of the error.",
                            "minLength": 1,
                            "type": "string"
                        },
                        "ErrorMessage": {
                            "description": "A text description of the error.",
                            "minLength": 1,
                            "type": "string"
                        },
                        "Index": {
                            "description": "The zero-based index of the document in the input list.",
                            "type": "integer"
                        }
                    },
                    "type": "object"
                },
                "type": "array"
            },
            "BatchSizeLimitExceededException": {},
            "ClassifierEvaluationMetrics": {
                "description": "Describes the result metrics for the test data associated with an documentation classifier.",
                "properties": {
                    "Accuracy": {
                        "description": "The fraction of the labels that were correct recognized. It is computed by dividing the number of labels in the test documents that were correctly recognized by the total number of labels in the test documents.",
                        "format": "double",
                        "type": "number"
                    },
                    "F1Score": {
                        "description": "A measure of how accurate the classifier results are for the test data. It is derived from the <code>Precision</code> and <code>Recall</code> values. The <code>F1Score</code> is the harmonic average of the two scores. The highest score is 1, and the worst score is 0. ",
                        "format": "double",
                        "type": "number"
                    },
                    "Precision": {
                        "description": "A measure of the usefulness of the classifier results in the test data. High precision means that the classifier returned substantially more relevant results than irrelevant ones.",
                        "format": "double",
                        "type": "number"
                    },
                    "Recall": {
                        "description": "A measure of how complete the classifier results are for the test data. High recall means that the classifier returned most of the relevant results. ",
                        "format": "double",
                        "type": "number"
                    }
                },
                "type": "object"
            },
            "ClassifierMetadata": {
                "description": "Provides information about a document classifier.",
                "properties": {
                    "EvaluationMetrics": {
                        "description": " Describes the result metrics for the test data associated with an documentation classifier.",
                        "properties": {
                            "Accuracy": {
                                "description": "The fraction of the labels that were correct recognized. It is computed by dividing the number of labels in the test documents that were correctly recognized by the total number of labels in the test documents.",
                                "format": "double",
                                "type": "number"
                            },
                            "F1Score": {
                                "description": "A measure of how accurate the classifier results are for the test data. It is derived from the <code>Precision</code> and <code>Recall</code> values. The <code>F1Score</code> is the harmonic average of the two scores. The highest score is 1, and the worst score is 0. ",
                                "format": "double",
                                "type": "number"
                            },
                            "Precision": {
                                "description": "A measure of the usefulness of the classifier results in the test data. High precision means that the classifier returned substantially more relevant results than irrelevant ones.",
                                "format": "double",
                                "type": "number"
                            },
                            "Recall": {
                                "description": "A measure of how complete the classifier results are for the test data. High recall means that the classifier returned most of the relevant results. ",
                                "format": "double",
                                "type": "number"
                            }
                        },
                        "type": "object"
                    },
                    "NumberOfLabels": {
                        "description": "The number of labels in the input data. ",
                        "type": "integer"
                    },
                    "NumberOfTestDocuments": {
                        "description": "The number of documents in the input data that were used to test the classifier. Typically this is 10 to 20 percent of the input documents.",
                        "type": "integer"
                    },
                    "NumberOfTrainedDocuments": {
                        "description": "The number of documents in the input data that were used to train the classifier. Typically this is 80 to 90 percent of the input documents.",
                        "type": "integer"
                    }
                },
                "type": "object"
            },
            "ClientRequestTokenString": {
                "maxLength": 64,
                "minLength": 1,
                "pattern": "^[a-zA-Z0-9-]+$",
                "type": "string"
            },
            "ComprehendArnName": {
                "maxLength": 63,
                "pattern": "^[a-zA-Z0-9](-*[a-zA-Z0-9])*",
                "type": "string"
            },
            "CreateDocumentClassifierRequest": {
                "properties": {
                    "ClientRequestToken": {
                        "description": "A unique identifier for the request. If you don't set the client request token, Amazon Comprehend generates one.",
                        "maxLength": 64,
                        "minLength": 1,
                        "pattern": "^[a-zA-Z0-9-]+$",
                        "type": "string"
                    },
                    "DataAccessRoleArn": {
                        "description": "The Amazon Resource Name (ARN) of the AWS Identity and Management (IAM) role that grants Amazon Comprehend read access to your input data.",
                        "maxLength": 2048,
                        "minLength": 20,
                        "pattern": "arn:aws(-[^:]+)?:iam::[0-9]{12}:role/.+",
                        "type": "string"
                    },
                    "DocumentClassifierName": {
                        "description": "The name of the document classifier.",
                        "maxLength": 63,
                        "pattern": "^[a-zA-Z0-9](-*[a-zA-Z0-9])*",
                        "type": "string"
                    },
                    "InputDataConfig": {
                        "description": "Specifies the format and location of the input data for the job.",
                        "properties": {
                            "S3Uri": {
                                "description": "<p>The Amazon S3 URI for the input data. The S3 bucket must be in the same region as the API endpoint that you are calling. The URI can point to a single input file or it can provide the prefix for a collection of input files.</p> <p>For example, if you use the URI <code>S3://bucketName/prefix</code>, if the prefix is a single file, Amazon Comprehend uses that file as input. If more than one file begins with the prefix, Amazon Comprehend uses all of them as input.</p>",
                                "maxLength": 1024,
                                "pattern": "s3://[a-z0-9][\\.\\-a-z0-9]{1,61}[a-z0-9](/.*)?",
                                "type": "string"
                            }
                        },
                        "required": [
                            "S3Uri"
                        ],
                        "type": "object"
                    },
                    "LanguageCode": {
                        "description": "The language of the input documents. You can specify English (\"en\") or Spanish (\"es\"). All documents must be in the same language.",
                        "enum": [
                            "en",
                            "es",
                            "fr",
                            "de",
                            "it",
                            "pt"
                        ],
                        "type": "string"
                    }
                },
                "required": [
                    "DocumentClassifierName",
                    "DataAccessRoleArn",
                    "InputDataConfig",
                    "LanguageCode"
                ],
                "type": "object"
            },
            "CreateDocumentClassifierResponse": {
                "properties": {
                    "DocumentClassifierArn": {
                        "description": "The Amazon Resource Name (ARN) that identifies the document classifier.",
                        "maxLength": 256,
                        "pattern": "arn:aws:comprehend:[a-zA-Z0-9-]*:[0-9]{12}:document-classifier/[a-zA-Z0-9](-*[a-zA-Z0-9])*",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "CreateEntityRecognizerRequest": {
                "properties": {
                    "ClientRequestToken": {
                        "description": " A unique identifier for the request. If you don't set the client request token, Amazon Comprehend generates one.",
                        "maxLength": 64,
                        "minLength": 1,
                        "pattern": "^[a-zA-Z0-9-]+$",
                        "type": "string"
                    },
                    "DataAccessRoleArn": {
                        "description": "The Amazon Resource Name (ARN) of the AWS Identity and Management (IAM) role that grants Amazon Comprehend read access to your input data.",
                        "maxLength": 2048,
                        "minLength": 20,
                        "pattern": "arn:aws(-[^:]+)?:iam::[0-9]{12}:role/.+",
                        "type": "string"
                    },
                    "InputDataConfig": {
                        "description": "Specifies the format and location of the input data. The S3 bucket containing the input data must be located in the same region as the entity recognizer being created. ",
                        "properties": {
                            "Annotations": {
                                "description": "S3 location of the annotations file for an entity recognizer.",
                                "properties": {
                                    "S3Uri": {
                                        "description": " Specifies the Amazon S3 location where the annotations for an entity recognizer are located. The URI must be in the same region as the API endpoint that you are calling.",
                                        "maxLength": 1024,
                                        "pattern": "s3://[a-z0-9][\\.\\-a-z0-9]{1,61}[a-z0-9](/.*)?",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "S3Uri"
                                ],
                                "type": "object"
                            },
                            "Documents": {
                                "description": "S3 location of the documents folder for an entity recognizer",
                                "properties": {
                                    "S3Uri": {
                                        "description": " Specifies the Amazon S3 location where the training documents for an entity recognizer are located. The URI must be in the same region as the API endpoint that you are calling.",
                                        "maxLength": 1024,
                                        "pattern": "s3://[a-z0-9][\\.\\-a-z0-9]{1,61}[a-z0-9](/.*)?",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "S3Uri"
                                ],
                                "type": "object"
                            },
                            "EntityList": {
                                "description": "S3 location of the entity list for an entity recognizer.",
                                "properties": {
                                    "S3Uri": {
                                        "description": "Specifies the Amazon S3 location where the entity list is located. The URI must be in the same region as the API endpoint that you are calling.",
                                        "maxLength": 1024,
                                        "pattern": "s3://[a-z0-9][\\.\\-a-z0-9]{1,61}[a-z0-9](/.*)?",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "S3Uri"
                                ],
                                "type": "object"
                            },
                            "EntityTypes": {
                                "description": "The entity types in the input data for an entity recognizer.",
                                "items": {
                                    "description": "Information about an individual item on a list of entity types.",
                                    "properties": {
                                        "Type": {
                                            "description": "Entity type of an item on an entity type list.",
                                            "maxLength": 64,
                                            "pattern": "[_A-Z0-9]+",
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "Type"
                                    ],
                                    "type": "object"
                                },
                                "type": "array"
                            }
                        },
                        "required": [
                            "EntityTypes",
                            "Documents"
                        ],
                        "type": "object"
                    },
                    "LanguageCode": {
                        "description": " The language of the input documents. All documents must be in the same language. Only English (\"en\") is currently supported. ",
                        "enum": [
                            "en",
                            "es",
                            "fr",
                            "de",
                            "it",
                            "pt"
                        ],
                        "type": "string"
                    },
                    "RecognizerName": {
                        "description": "The name given to the newly created recognizer. Recognizer names can be a maximum of 256 characters. Alphanumeric characters, hyphens (-) and underscores (_) are allowed. The name must be unique in the account/region.",
                        "maxLength": 63,
                        "pattern": "^[a-zA-Z0-9](-*[a-zA-Z0-9])*",
                        "type": "string"
                    }
                },
                "required": [
                    "RecognizerName",
                    "DataAccessRoleArn",
                    "InputDataConfig",
                    "LanguageCode"
                ],
                "type": "object"
            },
            "CreateEntityRecognizerResponse": {
                "properties": {
                    "EntityRecognizerArn": {
                        "description": "The Amazon Resource Name (ARN) that identifies the entity recognizer.",
                        "maxLength": 256,
                        "pattern": "arn:aws:comprehend:[a-zA-Z0-9-]*:[0-9]{12}:entity-recognizer/[a-zA-Z0-9](-*[a-zA-Z0-9])*",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "DeleteDocumentClassifierRequest": {
                "properties": {
                    "DocumentClassifierArn": {
                        "description": "The Amazon Resource Name (ARN) that identifies the document classifier. ",
                        "maxLength": 256,
                        "pattern": "arn:aws:comprehend:[a-zA-Z0-9-]*:[0-9]{12}:document-classifier/[a-zA-Z0-9](-*[a-zA-Z0-9])*",
                        "type": "string"
                    }
                },
                "required": [
                    "DocumentClassifierArn"
                ],
                "type": "object"
            },
            "DeleteDocumentClassifierResponse": {
                "properties": {},
                "type": "object"
            },
            "DeleteEntityRecognizerRequest": {
                "properties": {
                    "EntityRecognizerArn": {
                        "description": "The Amazon Resource Name (ARN) that identifies the entity recognizer.",
                        "maxLength": 256,
                        "pattern": "arn:aws:comprehend:[a-zA-Z0-9-]*:[0-9]{12}:entity-recognizer/[a-zA-Z0-9](-*[a-zA-Z0-9])*",
                        "type": "string"
                    }
                },
                "required": [
                    "EntityRecognizerArn"
                ],
                "type": "object"
            },
            "DeleteEntityRecognizerResponse": {
                "properties": {},
                "type": "object"
            },
            "DescribeDocumentClassificationJobRequest": {
                "properties": {
                    "JobId": {
                        "description": "The identifier that Amazon Comprehend generated for the job. The operation returns this identifier in its response.",
                        "maxLength": 32,
                        "minLength": 1,
                        "pattern": "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-%@]*)$",
                        "type": "string"
                    }
                },
                "required": [
                    "JobId"
                ],
                "type": "object"
            },
            "DescribeDocumentClassificationJobResponse": {
                "properties": {
                    "DocumentClassificationJobProperties": {
                        "description": "An object that describes the properties associated with the document classification job.",
                        "properties": {
                            "DataAccessRoleArn": {
                                "description": "The Amazon Resource Name (ARN) of the AWS identity and Access Management (IAM) role that grants Amazon Comprehend read access to your input data.",
                                "maxLength": 2048,
                                "minLength": 20,
                                "pattern": "arn:aws(-[^:]+)?:iam::[0-9]{12}:role/.+",
                                "type": "string"
                            },
                            "DocumentClassifierArn": {
                                "description": "The Amazon Resource Name (ARN) that identifies the document classifier. ",
                                "maxLength": 256,
                                "pattern": "arn:aws:comprehend:[a-zA-Z0-9-]*:[0-9]{12}:document-classifier/[a-zA-Z0-9](-*[a-zA-Z0-9])*",
                                "type": "string"
                            },
                            "EndTime": {
                                "description": "The time that the document classification job completed.",
                                "format": "date-time",
                                "type": "string"
                            },
                            "InputDataConfig": {
                                "description": "The input data configuration that you supplied when you created the document classification job.",
                                "properties": {
                                    "InputFormat": {
                                        "description": "<p>Specifies how the text in an input file should be processed:</p> <ul> <li> <p> <code>ONE_DOC_PER_FILE</code> - Each file is considered a separate document. Use this option when you are processing large documents, such as newspaper articles or scientific papers.</p> </li> <li> <p> <code>ONE_DOC_PER_LINE</code> - Each line in a file is considered a separate document. Use this option when you are processing many short documents, such as text messages.</p> </li> </ul>",
                                        "enum": [
                                            "ONE_DOC_PER_FILE",
                                            "ONE_DOC_PER_LINE"
                                        ],
                                        "type": "string"
                                    },
                                    "S3Uri": {
                                        "description": "<p>The Amazon S3 URI for the input data. The URI must be in same region as the API endpoint that you are calling. The URI can point to a single input file or it can provide the prefix for a collection of data files. </p> <p>For example, if you use the URI <code>S3://bucketName/prefix</code>, if the prefix is a single file, Amazon Comprehend uses that file as input. If more than one file begins with the prefix, Amazon Comprehend uses all of them as input.</p>",
                                        "maxLength": 1024,
                                        "pattern": "s3://[a-z0-9][\\.\\-a-z0-9]{1,61}[a-z0-9](/.*)?",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "S3Uri"
                                ],
                                "type": "object"
                            },
                            "JobId": {
                                "description": "The identifier assigned to the document classification job.",
                                "maxLength": 32,
                                "minLength": 1,
                                "pattern": "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-%@]*)$",
                                "type": "string"
                            },
                            "JobName": {
                                "description": "The name that you assigned to the document classification job.",
                                "maxLength": 256,
                                "minLength": 1,
                                "pattern": "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-%@]*)$",
                                "type": "string"
                            },
                            "JobStatus": {
                                "description": "The current status of the document classification job. If the status is <code>FAILED</code>, the <code>Message</code> field shows the reason for the failure.",
                                "enum": [
                                    "SUBMITTED",
                                    "IN_PROGRESS",
                                    "COMPLETED",
                                    "FAILED",
                                    "STOP_REQUESTED",
                                    "STOPPED"
                                ],
                                "type": "string"
                            },
                            "Message": {
                                "description": "A description of the status of the job.",
                                "type": "string"
                            },
                            "OutputDataConfig": {
                                "description": "The output data configuration that you supplied when you created the document classification job.",
                                "properties": {
                                    "S3Uri": {
                                        "description": "<p>When you use the <code>OutputDataConfig</code> object with asynchronous operations, you specify the Amazon S3 location where you want to write the output data. The URI must be in the same region as the API endpoint that you are calling. The location is used as the prefix for the actual location of the output file.</p> <p>When the topic detection job is finished, the service creates an output file in a directory specific to the job. The <code>S3Uri</code> field contains the location of the output file, called <code>output.tar.gz</code>. It is a compressed archive that contains the ouput of the operation.</p>",
                                        "maxLength": 1024,
                                        "pattern": "s3://[a-z0-9][\\.\\-a-z0-9]{1,61}[a-z0-9](/.*)?",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "S3Uri"
                                ],
                                "type": "object"
                            },
                            "SubmitTime": {
                                "description": "The time that the document classification job was submitted for processing.",
                                "format": "date-time",
                                "type": "string"
                            }
                        },
                        "type": "object"
                    }
                },
                "type": "object"
            },
            "DescribeDocumentClassifierRequest": {
                "properties": {
                    "DocumentClassifierArn": {
                        "description": "The Amazon Resource Name (ARN) that identifies the document classifier. The operation returns this identifier in its response.",
                        "maxLength": 256,
                        "pattern": "arn:aws:comprehend:[a-zA-Z0-9-]*:[0-9]{12}:document-classifier/[a-zA-Z0-9](-*[a-zA-Z0-9])*",
                        "type": "string"
                    }
                },
                "required": [
                    "DocumentClassifierArn"
                ],
                "type": "object"
            },
            "DescribeDocumentClassifierResponse": {
                "properties": {
                    "DocumentClassifierProperties": {
                        "description": "An object that contains the properties associated with a document classifier.",
                        "properties": {
                            "ClassifierMetadata": {
                                "description": "Information about the document classifier, including the number of documents used for training the classifier, the number of documents used for test the classifier, and an accuracy rating.",
                                "properties": {
                                    "EvaluationMetrics": {
                                        "description": " Describes the result metrics for the test data associated with an documentation classifier.",
                                        "properties": {
                                            "Accuracy": {
                                                "description": "The fraction of the labels that were correct recognized. It is computed by dividing the number of labels in the test documents that were correctly recognized by the total number of labels in the test documents.",
                                                "format": "double",
                                                "type": "number"
                                            },
                                            "F1Score": {
                                                "description": "A measure of how accurate the classifier results are for the test data. It is derived from the <code>Precision</code> and <code>Recall</code> values. The <code>F1Score</code> is the harmonic average of the two scores. The highest score is 1, and the worst score is 0. ",
                                                "format": "double",
                                                "type": "number"
                                            },
                                            "Precision": {
                                                "description": "A measure of the usefulness of the classifier results in the test data. High precision means that the classifier returned substantially more relevant results than irrelevant ones.",
                                                "format": "double",
                                                "type": "number"
                                            },
                                            "Recall": {
                                                "description": "A measure of how complete the classifier results are for the test data. High recall means that the classifier returned most of the relevant results. ",
                                                "format": "double",
                                                "type": "number"
                                            }
                                        },
                                        "type": "object"
                                    },
                                    "NumberOfLabels": {
                                        "description": "The number of labels in the input data. ",
                                        "type": "integer"
                                    },
                                    "NumberOfTestDocuments": {
                                        "description": "The number of documents in the input data that were used to test the classifier. Typically this is 10 to 20 percent of the input documents.",
                                        "type": "integer"
                                    },
                                    "NumberOfTrainedDocuments": {
                                        "description": "The number of documents in the input data that were used to train the classifier. Typically this is 80 to 90 percent of the input documents.",
                                        "type": "integer"
                                    }
                                },
                                "type": "object"
                            },
                            "DataAccessRoleArn": {
                                "description": "The Amazon Resource Name (ARN) of the AWS Identity and Management (IAM) role that grants Amazon Comprehend read access to your input data.",
                                "maxLength": 2048,
                                "minLength": 20,
                                "pattern": "arn:aws(-[^:]+)?:iam::[0-9]{12}:role/.+",
                                "type": "string"
                            },
                            "DocumentClassifierArn": {
                                "description": "The Amazon Resource Name (ARN) that identifies the document classifier.",
                                "maxLength": 256,
                                "pattern": "arn:aws:comprehend:[a-zA-Z0-9-]*:[0-9]{12}:document-classifier/[a-zA-Z0-9](-*[a-zA-Z0-9])*",
                                "type": "string"
                            },
                            "EndTime": {
                                "description": "The time that training the document classifier completed.",
                                "format": "date-time",
                                "type": "string"
                            },
                            "InputDataConfig": {
                                "description": "The input data configuration that you supplied when you created the document classifier for training.",
                                "properties": {
                                    "S3Uri": {
                                        "description": "<p>The Amazon S3 URI for the input data. The S3 bucket must be in the same region as the API endpoint that you are calling. The URI can point to a single input file or it can provide the prefix for a collection of input files.</p> <p>For example, if you use the URI <code>S3://bucketName/prefix</code>, if the prefix is a single file, Amazon Comprehend uses that file as input. If more than one file begins with the prefix, Amazon Comprehend uses all of them as input.</p>",
                                        "maxLength": 1024,
                                        "pattern": "s3://[a-z0-9][\\.\\-a-z0-9]{1,61}[a-z0-9](/.*)?",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "S3Uri"
                                ],
                                "type": "object"
                            },
                            "LanguageCode": {
                                "description": "The language code for the language of the documents that the classifier was trained on.",
                                "enum": [
                                    "en",
                                    "es",
                                    "fr",
                                    "de",
                                    "it",
                                    "pt"
                                ],
                                "type": "string"
                            },
                            "Message": {
                                "description": "Additional information about the status of the classifier.",
                                "type": "string"
                            },
                            "Status": {
                                "description": "The status of the document classifier. If the status is <code>TRAINED</code> the classifier is ready to use. If the status is <code>FAILED</code> you can see additional information about why the classifier wasn't trained in the <code>Message</code> field.",
                                "enum": [
                                    "SUBMITTED",
                                    "TRAINING",
                                    "DELETING",
                                    "STOP_REQUESTED",
                                    "STOPPED",
                                    "IN_ERROR",
                                    "TRAINED"
                                ],
                                "type": "string"
                            },
                            "SubmitTime": {
                                "description": "The time that the document classifier was submitted for training.",
                                "format": "date-time",
                                "type": "string"
                            },
                            "TrainingEndTime": {
                                "description": "The time that training of the document classifier was completed. Indicates the time when the training completes on documentation classifiers. You are billed for the time interval between this time and the value of TrainingStartTime.",
                                "format": "date-time",
                                "type": "string"
                            },
                            "TrainingStartTime": {
                                "description": "Indicates the time when the training starts on documentation classifiers. You are billed for the time interval between this time and the value of TrainingEndTime. ",
                                "format": "date-time",
                                "type": "string"
                            }
                        },
                        "type": "object"
                    }
                },
                "type": "object"
            },
            "DescribeDominantLanguageDetectionJobRequest": {
                "properties": {
                    "JobId": {
                        "description": "The identifier that Amazon Comprehend generated for the job. The operation returns this identifier in its response.",
                        "maxLength": 32,
                        "minLength": 1,
                        "pattern": "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-%@]*)$",
                        "type": "string"
                    }
                },
                "required": [
                    "JobId"
                ],
                "type": "object"
            },
            "DescribeDominantLanguageDetectionJobResponse": {
                "properties": {
                    "DominantLanguageDetectionJobProperties": {
                        "description": "An object that contains the properties associated with a dominant language detection job.",
                        "properties": {
                            "DataAccessRoleArn": {
                                "description": "The Amazon Resource Name (ARN) that gives Amazon Comprehend read access to your input data.",
                                "maxLength": 2048,
                                "minLength": 20,
                                "pattern": "arn:aws(-[^:]+)?:iam::[0-9]{12}:role/.+",
                                "type": "string"
                            },
                            "EndTime": {
                                "description": "The time that the dominant language detection job completed.",
                                "format": "date-time",
                                "type": "string"
                            },
                            "InputDataConfig": {
                                "description": "The input data configuration that you supplied when you created the dominant language detection job.",
                                "properties": {
                                    "InputFormat": {
                                        "description": "<p>Specifies how the text in an input file should be processed:</p> <ul> <li> <p> <code>ONE_DOC_PER_FILE</code> - Each file is considered a separate document. Use this option when you are processing large documents, such as newspaper articles or scientific papers.</p> </li> <li> <p> <code>ONE_DOC_PER_LINE</code> - Each line in a file is considered a separate document. Use this option when you are processing many short documents, such as text messages.</p> </li> </ul>",
                                        "enum": [
                                            "ONE_DOC_PER_FILE",
                                            "ONE_DOC_PER_LINE"
                                        ],
                                        "type": "string"
                                    },
                                    "S3Uri": {
                                        "description": "<p>The Amazon S3 URI for the input data. The URI must be in same region as the API endpoint that you are calling. The URI can point to a single input file or it can provide the prefix for a collection of data files. </p> <p>For example, if you use the URI <code>S3://bucketName/prefix</code>, if the prefix is a single file, Amazon Comprehend uses that file as input. If more than one file begins with the prefix, Amazon Comprehend uses all of them as input.</p>",
                                        "maxLength": 1024,
                                        "pattern": "s3://[a-z0-9][\\.\\-a-z0-9]{1,61}[a-z0-9](/.*)?",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "S3Uri"
                                ],
                                "type": "object"
                            },
                            "JobId": {
                                "description": "The identifier assigned to the dominant language detection job.",
                                "maxLength": 32,
                                "minLength": 1,
                                "pattern": "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-%@]*)$",
                                "type": "string"
                            },
                            "JobName": {
                                "description": "The name that you assigned to the dominant language detection job.",
                                "maxLength": 256,
                                "minLength": 1,
                                "pattern": "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-%@]*)$",
                                "type": "string"
                            },
                            "JobStatus": {
                                "description": "The current status of the dominant language detection job. If the status is <code>FAILED</code>, the <code>Message</code> field shows the reason for the failure.",
                                "enum": [
                                    "SUBMITTED",
                                    "IN_PROGRESS",
                                    "COMPLETED",
                                    "FAILED",
                                    "STOP_REQUESTED",
                                    "STOPPED"
                                ],
                                "type": "string"
                            },
                            "Message": {
                                "description": "A description for the status of a job.",
                                "type": "string"
                            },
                            "OutputDataConfig": {
                                "description": "The output data configuration that you supplied when you created the dominant language detection job.",
                                "properties": {
                                    "S3Uri": {
                                        "description": "<p>When you use the <code>OutputDataConfig</code> object with asynchronous operations, you specify the Amazon S3 location where you want to write the output data. The URI must be in the same region as the API endpoint that you are calling. The location is used as the prefix for the actual location of the output file.</p> <p>When the topic detection job is finished, the service creates an output file in a directory specific to the job. The <code>S3Uri</code> field contains the location of the output file, called <code>output.tar.gz</code>. It is a compressed archive that contains the ouput of the operation.</p>",
                                        "maxLength": 1024,
                                        "pattern": "s3://[a-z0-9][\\.\\-a-z0-9]{1,61}[a-z0-9](/.*)?",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "S3Uri"
                                ],
                                "type": "object"
                            },
                            "SubmitTime": {
                                "description": "The time that the dominant language detection job was submitted for processing.",
                                "format": "date-time",
                                "type": "string"
                            }
                        },
                        "type": "object"
                    }
                },
                "type": "object"
            },
            "DescribeEntitiesDetectionJobRequest": {
                "properties": {
                    "JobId": {
                        "description": "The identifier that Amazon Comprehend generated for the job. The operation returns this identifier in its response.",
                        "maxLength": 32,
                        "minLength": 1,
                        "pattern": "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-%@]*)$",
                        "type": "string"
                    }
                },
                "required": [
                    "JobId"
                ],
                "type": "object"
            },
            "DescribeEntitiesDetectionJobResponse": {
                "properties": {
                    "EntitiesDetectionJobProperties": {
                        "description": "An object that contains the properties associated with an entities detection job.",
                        "properties": {
                            "DataAccessRoleArn": {
                                "description": "The Amazon Resource Name (ARN) that gives Amazon Comprehend read access to your input data.",
                                "maxLength": 2048,
                                "minLength": 20,
                                "pattern": "arn:aws(-[^:]+)?:iam::[0-9]{12}:role/.+",
                                "type": "string"
                            },
                            "EndTime": {
                                "description": "The time that the entities detection job completed",
                                "format": "date-time",
                                "type": "string"
                            },
                            "EntityRecognizerArn": {
                                "description": "The Amazon Resource Name (ARN) that identifies the entity recognizer.",
                                "maxLength": 256,
                                "pattern": "arn:aws:comprehend:[a-zA-Z0-9-]*:[0-9]{12}:entity-recognizer/[a-zA-Z0-9](-*[a-zA-Z0-9])*",
                                "type": "string"
                            },
                            "InputDataConfig": {
                                "description": "The input data configuration that you supplied when you created the entities detection job.",
                                "properties": {
                                    "InputFormat": {
                                        "description": "<p>Specifies how the text in an input file should be processed:</p> <ul> <li> <p> <code>ONE_DOC_PER_FILE</code> - Each file is considered a separate document. Use this option when you are processing large documents, such as newspaper articles or scientific papers.</p> </li> <li> <p> <code>ONE_DOC_PER_LINE</code> - Each line in a file is considered a separate document. Use this option when you are processing many short documents, such as text messages.</p> </li> </ul>",
                                        "enum": [
                                            "ONE_DOC_PER_FILE",
                                            "ONE_DOC_PER_LINE"
                                        ],
                                        "type": "string"
                                    },
                                    "S3Uri": {
                                        "description": "<p>The Amazon S3 URI for the input data. The URI must be in same region as the API endpoint that you are calling. The URI can point to a single input file or it can provide the prefix for a collection of data files. </p> <p>For example, if you use the URI <code>S3://bucketName/prefix</code>, if the prefix is a single file, Amazon Comprehend uses that file as input. If more than one file begins with the prefix, Amazon Comprehend uses all of them as input.</p>",
                                        "maxLength": 1024,
                                        "pattern": "s3://[a-z0-9][\\.\\-a-z0-9]{1,61}[a-z0-9](/.*)?",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "S3Uri"
                                ],
                                "type": "object"
                            },
                            "JobId": {
                                "description": "The identifier assigned to the entities detection job.",
                                "maxLength": 32,
                                "minLength": 1,
                                "pattern": "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-%@]*)$",
                                "type": "string"
                            },
                            "JobName": {
                                "description": "The name that you assigned the entities detection job.",
                                "maxLength": 256,
                                "minLength": 1,
                                "pattern": "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-%@]*)$",
                                "type": "string"
                            },
                            "JobStatus": {
                                "description": "The current status of the entities detection job. If the status is <code>FAILED</code>, the <code>Message</code> field shows the reason for the failure.",
                                "enum": [
                                    "SUBMITTED",
                                    "IN_PROGRESS",
                                    "COMPLETED",
                                    "FAILED",
                                    "STOP_REQUESTED",
                                    "STOPPED"
                                ],
                                "type": "string"
                            },
                            "LanguageCode": {
                                "description": "The language code of the input documents.",
                                "enum": [
                                    "en",
                                    "es",
                                    "fr",
                                    "de",
                                    "it",
                                    "pt"
                                ],
                                "type": "string"
                            },
                            "Message": {
                                "description": "A description of the status of a job.",
                                "type": "string"
                            },
                            "OutputDataConfig": {
                                "description": "The output data configuration that you supplied when you created the entities detection job. ",
                                "properties": {
                                    "S3Uri": {
                                        "description": "<p>When you use the <code>OutputDataConfig</code> object with asynchronous operations, you specify the Amazon S3 location where you want to write the output data. The URI must be in the same region as the API endpoint that you are calling. The location is used as the prefix for the actual location of the output file.</p> <p>When the topic detection job is finished, the service creates an output file in a directory specific to the job. The <code>S3Uri</code> field contains the location of the output file, called <code>output.tar.gz</code>. It is a compressed archive that contains the ouput of the operation.</p>",
                                        "maxLength": 1024,
                                        "pattern": "s3://[a-z0-9][\\.\\-a-z0-9]{1,61}[a-z0-9](/.*)?",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "S3Uri"
                                ],
                                "type": "object"
                            },
                            "SubmitTime": {
                                "description": "The time that the entities detection job was submitted for processing.",
                                "format": "date-time",
                                "type": "string"
                            }
                        },
                        "type": "object"
                    }
                },
                "type": "object"
            },
            "DescribeEntityRecognizerRequest": {
                "properties": {
                    "EntityRecognizerArn": {
                        "description": "The Amazon Resource Name (ARN) that identifies the entity recognizer.",
                        "maxLength": 256,
                        "pattern": "arn:aws:comprehend:[a-zA-Z0-9-]*:[0-9]{12}:entity-recognizer/[a-zA-Z0-9](-*[a-zA-Z0-9])*",
                        "type": "string"
                    }
                },
                "required": [
                    "EntityRecognizerArn"
                ],
                "type": "object"
            },
            "DescribeEntityRecognizerResponse": {
                "properties": {
                    "EntityRecognizerProperties": {
                        "description": "Describes information associated with an entity recognizer.",
                        "properties": {
                            "DataAccessRoleArn": {
                                "description": " The Amazon Resource Name (ARN) of the AWS Identity and Management (IAM) role that grants Amazon Comprehend read access to your input data.",
                                "maxLength": 2048,
                                "minLength": 20,
                                "pattern": "arn:aws(-[^:]+)?:iam::[0-9]{12}:role/.+",
                                "type": "string"
                            },
                            "EndTime": {
                                "description": "The time that the recognizer creation completed.",
                                "format": "date-time",
                                "type": "string"
                            },
                            "EntityRecognizerArn": {
                                "description": "The Amazon Resource Name (ARN) that identifies the entity recognizer.",
                                "maxLength": 256,
                                "pattern": "arn:aws:comprehend:[a-zA-Z0-9-]*:[0-9]{12}:entity-recognizer/[a-zA-Z0-9](-*[a-zA-Z0-9])*",
                                "type": "string"
                            },
                            "InputDataConfig": {
                                "description": "The input data properties of an entity recognizer.",
                                "properties": {
                                    "Annotations": {
                                        "description": "S3 location of the annotations file for an entity recognizer.",
                                        "properties": {
                                            "S3Uri": {
                                                "description": " Specifies the Amazon S3 location where the annotations for an entity recognizer are located. The URI must be in the same region as the API endpoint that you are calling.",
                                                "maxLength": 1024,
                                                "pattern": "s3://[a-z0-9][\\.\\-a-z0-9]{1,61}[a-z0-9](/.*)?",
                                                "type": "string"
                                            }
                                        },
                                        "required": [
                                            "S3Uri"
                                        ],
                                        "type": "object"
                                    },
                                    "Documents": {
                                        "description": "S3 location of the documents folder for an entity recognizer",
                                        "properties": {
                                            "S3Uri": {
                                                "description": " Specifies the Amazon S3 location where the training documents for an entity recognizer are located. The URI must be in the same region as the API endpoint that you are calling.",
                                                "maxLength": 1024,
                                                "pattern": "s3://[a-z0-9][\\.\\-a-z0-9]{1,61}[a-z0-9](/.*)?",
                                                "type": "string"
                                            }
                                        },
                                        "required": [
                                            "S3Uri"
                                        ],
                                        "type": "object"
                                    },
                                    "EntityList": {
                                        "description": "S3 location of the entity list for an entity recognizer.",
                                        "properties": {
                                            "S3Uri": {
                                                "description": "Specifies the Amazon S3 location where the entity list is located. The URI must be in the same region as the API endpoint that you are calling.",
                                                "maxLength": 1024,
                                                "pattern": "s3://[a-z0-9][\\.\\-a-z0-9]{1,61}[a-z0-9](/.*)?",
                                                "type": "string"
                                            }
                                        },
                                        "required": [
                                            "S3Uri"
                                        ],
                                        "type": "object"
                                    },
                                    "EntityTypes": {
                                        "description": "The entity types in the input data for an entity recognizer.",
                                        "items": {
                                            "description": "Information about an individual item on a list of entity types.",
                                            "properties": {
                                                "Type": {
                                                    "description": "Entity type of an item on an entity type list.",
                                                    "maxLength": 64,
                                                    "pattern": "[_A-Z0-9]+",
                                                    "type": "string"
                                                }
                                            },
                                            "required": [
                                                "Type"
                                            ],
                                            "type": "object"
                                        },
                                        "type": "array"
                                    }
                                },
                                "required": [
                                    "EntityTypes",
                                    "Documents"
                                ],
                                "type": "object"
                            },
                            "LanguageCode": {
                                "description": " The language of the input documents. All documents must be in the same language. Only English (\"en\") is currently supported.",
                                "enum": [
                                    "en",
                                    "es",
                                    "fr",
                                    "de",
                                    "it",
                                    "pt"
                                ],
                                "type": "string"
                            },
                            "Message": {
                                "description": " A description of the status of the recognizer.",
                                "type": "string"
                            },
                            "RecognizerMetadata": {
                                "description": " Provides information about an entity recognizer.",
                                "properties": {
                                    "EntityTypes": {
                                        "description": "Entity types from the metadata of an entity recognizer.",
                                        "items": {
                                            "description": "Individual item from the list of entity types in the metadata of an entity recognizer.",
                                            "properties": {
                                                "Type": {
                                                    "description": "Type of entity from the list of entity types in the metadata of an entity recognizer. ",
                                                    "type": "string"
                                                }
                                            },
                                            "type": "object"
                                        },
                                        "type": "array"
                                    },
                                    "EvaluationMetrics": {
                                        "description": " Detailed information about the accuracy of an entity recognizer.",
                                        "properties": {
                                            "F1Score": {
                                                "description": "A measure of how accurate the recognizer results are for the test data. It is derived from the <code>Precision</code> and <code>Recall</code> values. The <code>F1Score</code> is the harmonic average of the two scores. The highest score is 1, and the worst score is 0. ",
                                                "format": "double",
                                                "type": "number"
                                            },
                                            "Precision": {
                                                "description": "A measure of the usefulness of the recognizer results in the test data. High precision means that the recognizer returned substantially more relevant results than irrelevant ones. ",
                                                "format": "double",
                                                "type": "number"
                                            },
                                            "Recall": {
                                                "description": "A measure of how complete the recognizer results are for the test data. High recall means that the recognizer returned most of the relevant results.",
                                                "format": "double",
                                                "type": "number"
                                            }
                                        },
                                        "type": "object"
                                    },
                                    "NumberOfTestDocuments": {
                                        "description": " The number of documents in the input data that were used to test the entity recognizer. Typically this is 10 to 20 percent of the input documents.",
                                        "type": "integer"
                                    },
                                    "NumberOfTrainedDocuments": {
                                        "description": " The number of documents in the input data that were used to train the entity recognizer. Typically this is 80 to 90 percent of the input documents.",
                                        "type": "integer"
                                    }
                                },
                                "type": "object"
                            },
                            "Status": {
                                "description": "Provides the status of the entity recognizer.",
                                "enum": [
                                    "SUBMITTED",
                                    "TRAINING",
                                    "DELETING",
                                    "STOP_REQUESTED",
                                    "STOPPED",
                                    "IN_ERROR",
                                    "TRAINED"
                                ],
                                "type": "string"
                            },
                            "SubmitTime": {
                                "description": "The time that the recognizer was submitted for processing.",
                                "format": "date-time",
                                "type": "string"
                            },
                            "TrainingEndTime": {
                                "description": "The time that training of the entity recognizer was completed.",
                                "format": "date-time",
                                "type": "string"
                            },
                            "TrainingStartTime": {
                                "description": "The time that training of the entity recognizer started.",
                                "format": "date-time",
                                "type": "string"
                            }
                        },
                        "type": "object"
                    }
                },
                "type": "object"
            },
            "DescribeKeyPhrasesDetectionJobRequest": {
                "properties": {
                    "JobId": {
                        "description": "The identifier that Amazon Comprehend generated for the job. The operation returns this identifier in its response.",
                        "maxLength": 32,
                        "minLength": 1,
                        "pattern": "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-%@]*)$",
                        "type": "string"
                    }
                },
                "required": [
                    "JobId"
                ],
                "type": "object"
            },
            "DescribeKeyPhrasesDetectionJobResponse": {
                "properties": {
                    "KeyPhrasesDetectionJobProperties": {
                        "description": "An object that contains the properties associated with a key phrases detection job. ",
                        "properties": {
                            "DataAccessRoleArn": {
                                "description": "The Amazon Resource Name (ARN) that gives Amazon Comprehend read access to your input data.",
                                "maxLength": 2048,
                                "minLength": 20,
                                "pattern": "arn:aws(-[^:]+)?:iam::[0-9]{12}:role/.+",
                                "type": "string"
                            },
                            "EndTime": {
                                "description": "The time that the key phrases detection job completed.",
                                "format": "date-time",
                                "type": "string"
                            },
                            "InputDataConfig": {
                                "description": "The input data configuration that you supplied when you created the key phrases detection job.",
                                "properties": {
                                    "InputFormat": {
                                        "description": "<p>Specifies how the text in an input file should be processed:</p> <ul> <li> <p> <code>ONE_DOC_PER_FILE</code> - Each file is considered a separate document. Use this option when you are processing large documents, such as newspaper articles or scientific papers.</p> </li> <li> <p> <code>ONE_DOC_PER_LINE</code> - Each line in a file is considered a separate document. Use this option when you are processing many short documents, such as text messages.</p> </li> </ul>",
                                        "enum": [
                                            "ONE_DOC_PER_FILE",
                                            "ONE_DOC_PER_LINE"
                                        ],
                                        "type": "string"
                                    },
                                    "S3Uri": {
                                        "description": "<p>The Amazon S3 URI for the input data. The URI must be in same region as the API endpoint that you are calling. The URI can point to a single input file or it can provide the prefix for a collection of data files. </p> <p>For example, if you use the URI <code>S3://bucketName/prefix</code>, if the prefix is a single file, Amazon Comprehend uses that file as input. If more than one file begins with the prefix, Amazon Comprehend uses all of them as input.</p>",
                                        "maxLength": 1024,
                                        "pattern": "s3://[a-z0-9][\\.\\-a-z0-9]{1,61}[a-z0-9](/.*)?",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "S3Uri"
                                ],
                                "type": "object"
                            },
                            "JobId": {
                                "description": "The identifier assigned to the key phrases detection job.",
                                "maxLength": 32,
                                "minLength": 1,
                                "pattern": "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-%@]*)$",
                                "type": "string"
                            },
                            "JobName": {
                                "description": "The name that you assigned the key phrases detection job.",
                                "maxLength": 256,
                                "minLength": 1,
                                "pattern": "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-%@]*)$",
                                "type": "string"
                            },
                            "JobStatus": {
                                "description": "The current status of the key phrases detection job. If the status is <code>FAILED</code>, the <code>Message</code> field shows the reason for the failure.",
                                "enum": [
                                    "SUBMITTED",
                                    "IN_PROGRESS",
                                    "COMPLETED",
                                    "FAILED",
                                    "STOP_REQUESTED",
                                    "STOPPED"
                                ],
                                "type": "string"
                            },
                            "LanguageCode": {
                                "description": "The language code of the input documents.",
                                "enum": [
                                    "en",
                                    "es",
                                    "fr",
                                    "de",
                                    "it",
                                    "pt"
                                ],
                                "type": "string"
                            },
                            "Message": {
                                "description": "A description of the status of a job.",
                                "type": "string"
                            },
                            "OutputDataConfig": {
                                "description": "The output data configuration that you supplied when you created the key phrases detection job.",
                                "properties": {
                                    "S3Uri": {
                                        "description": "<p>When you use the <code>OutputDataConfig</code> object with asynchronous operations, you specify the Amazon S3 location where you want to write the output data. The URI must be in the same region as the API endpoint that you are calling. The location is used as the prefix for the actual location of the output file.</p> <p>When the topic detection job is finished, the service creates an output file in a directory specific to the job. The <code>S3Uri</code> field contains the location of the output file, called <code>output.tar.gz</code>. It is a compressed archive that contains the ouput of the operation.</p>",
                                        "maxLength": 1024,
                                        "pattern": "s3://[a-z0-9][\\.\\-a-z0-9]{1,61}[a-z0-9](/.*)?",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "S3Uri"
                                ],
                                "type": "object"
                            },
                            "SubmitTime": {
                                "description": "The time that the key phrases detection job was submitted for processing.",
                                "format": "date-time",
                                "type": "string"
                            }
                        },
                        "type": "object"
                    }
                },
                "type": "object"
            },
            "DescribeSentimentDetectionJobRequest": {
                "properties": {
                    "JobId": {
                        "description": "The identifier that Amazon Comprehend generated for the job. The operation returns this identifier in its response.",
                        "maxLength": 32,
                        "minLength": 1,
                        "pattern": "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-%@]*)$",
                        "type": "string"
                    }
                },
                "required": [
                    "JobId"
                ],
                "type": "object"
            },
            "DescribeSentimentDetectionJobResponse": {
                "properties": {
                    "SentimentDetectionJobProperties": {
                        "description": "An object that contains the properties associated with a sentiment detection job.",
                        "properties": {
                            "DataAccessRoleArn": {
                                "description": "The Amazon Resource Name (ARN) that gives Amazon Comprehend read access to your input data.",
                                "maxLength": 2048,
                                "minLength": 20,
                                "pattern": "arn:aws(-[^:]+)?:iam::[0-9]{12}:role/.+",
                                "type": "string"
                            },
                            "EndTime": {
                                "description": "The time that the sentiment detection job ended.",
                                "format": "date-time",
                                "type": "string"
                            },
                            "InputDataConfig": {
                                "description": "The input data configuration that you supplied when you created the sentiment detection job.",
                                "properties": {
                                    "InputFormat": {
                                        "description": "<p>Specifies how the text in an input file should be processed:</p> <ul> <li> <p> <code>ONE_DOC_PER_FILE</code> - Each file is considered a separate document. Use this option when you are processing large documents, such as newspaper articles or scientific papers.</p> </li> <li> <p> <code>ONE_DOC_PER_LINE</code> - Each line in a file is considered a separate document. Use this option when you are processing many short documents, such as text messages.</p> </li> </ul>",
                                        "enum": [
                                            "ONE_DOC_PER_FILE",
                                            "ONE_DOC_PER_LINE"
                                        ],
                                        "type": "string"
                                    },
                                    "S3Uri": {
                                        "description": "<p>The Amazon S3 URI for the input data. The URI must be in same region as the API endpoint that you are calling. The URI can point to a single input file or it can provide the prefix for a collection of data files. </p> <p>For example, if you use the URI <code>S3://bucketName/prefix</code>, if the prefix is a single file, Amazon Comprehend uses that file as input. If more than one file begins with the prefix, Amazon Comprehend uses all of them as input.</p>",
                                        "maxLength": 1024,
                                        "pattern": "s3://[a-z0-9][\\.\\-a-z0-9]{1,61}[a-z0-9](/.*)?",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "S3Uri"
                                ],
                                "type": "object"
                            },
                            "JobId": {
                                "description": "The identifier assigned to the sentiment detection job.",
                                "maxLength": 32,
                                "minLength": 1,
                                "pattern": "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-%@]*)$",
                                "type": "string"
                            },
                            "JobName": {
                                "description": "The name that you assigned to the sentiment detection job",
                                "maxLength": 256,
                                "minLength": 1,
                                "pattern": "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-%@]*)$",
                                "type": "string"
                            },
                            "JobStatus": {
                                "description": "The current status of the sentiment detection job. If the status is <code>FAILED</code>, the <code>Messages</code> field shows the reason for the failure.",
                                "enum": [
                                    "SUBMITTED",
                                    "IN_PROGRESS",
                                    "COMPLETED",
                                    "FAILED",
                                    "STOP_REQUESTED",
                                    "STOPPED"
                                ],
                                "type": "string"
                            },
                            "LanguageCode": {
                                "description": "The language code of the input documents.",
                                "enum": [
                                    "en",
                                    "es",
                                    "fr",
                                    "de",
                                    "it",
                                    "pt"
                                ],
                                "type": "string"
                            },
                            "Message": {
                                "description": "A description of the status of a job.",
                                "type": "string"
                            },
                            "OutputDataConfig": {
                                "description": "The output data configuration that you supplied when you created the sentiment detection job.",
                                "properties": {
                                    "S3Uri": {
                                        "description": "<p>When you use the <code>OutputDataConfig</code> object with asynchronous operations, you specify the Amazon S3 location where you want to write the output data. The URI must be in the same region as the API endpoint that you are calling. The location is used as the prefix for the actual location of the output file.</p> <p>When the topic detection job is finished, the service creates an output file in a directory specific to the job. The <code>S3Uri</code> field contains the location of the output file, called <code>output.tar.gz</code>. It is a compressed archive that contains the ouput of the operation.</p>",
                                        "maxLength": 1024,
                                        "pattern": "s3://[a-z0-9][\\.\\-a-z0-9]{1,61}[a-z0-9](/.*)?",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "S3Uri"
                                ],
                                "type": "object"
                            },
                            "SubmitTime": {
                                "description": "The time that the sentiment detection job was submitted for processing.",
                                "format": "date-time",
                                "type": "string"
                            }
                        },
                        "type": "object"
                    }
                },
                "type": "object"
            },
            "DescribeTopicsDetectionJobRequest": {
                "properties": {
                    "JobId": {
                        "description": "The identifier assigned by the user to the detection job.",
                        "maxLength": 32,
                        "minLength": 1,
                        "pattern": "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-%@]*)$",
                        "type": "string"
                    }
                },
                "required": [
                    "JobId"
                ],
                "type": "object"
            },
            "DescribeTopicsDetectionJobResponse": {
                "properties": {
                    "TopicsDetectionJobProperties": {
                        "description": "The list of properties for the requested job.",
                        "properties": {
                            "EndTime": {
                                "description": "The time that the topic detection job was completed.",
                                "format": "date-time",
                                "type": "string"
                            },
                            "InputDataConfig": {
                                "description": "The input data configuration supplied when you created the topic detection job.",
                                "properties": {
                                    "InputFormat": {
                                        "description": "<p>Specifies how the text in an input file should be processed:</p> <ul> <li> <p> <code>ONE_DOC_PER_FILE</code> - Each file is considered a separate document. Use this option when you are processing large documents, such as newspaper articles or scientific papers.</p> </li> <li> <p> <code>ONE_DOC_PER_LINE</code> - Each line in a file is considered a separate document. Use this option when you are processing many short documents, such as text messages.</p> </li> </ul>",
                                        "enum": [
                                            "ONE_DOC_PER_FILE",
                                            "ONE_DOC_PER_LINE"
                                        ],
                                        "type": "string"
                                    },
                                    "S3Uri": {
                                        "description": "<p>The Amazon S3 URI for the input data. The URI must be in same region as the API endpoint that you are calling. The URI can point to a single input file or it can provide the prefix for a collection of data files. </p> <p>For example, if you use the URI <code>S3://bucketName/prefix</code>, if the prefix is a single file, Amazon Comprehend uses that file as input. If more than one file begins with the prefix, Amazon Comprehend uses all of them as input.</p>",
                                        "maxLength": 1024,
                                        "pattern": "s3://[a-z0-9][\\.\\-a-z0-9]{1,61}[a-z0-9](/.*)?",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "S3Uri"
                                ],
                                "type": "object"
                            },
                            "JobId": {
                                "description": "The identifier assigned to the topic detection job.",
                                "maxLength": 32,
                                "minLength": 1,
                                "pattern": "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-%@]*)$",
                                "type": "string"
                            },
                            "JobName": {
                                "description": "The name of the topic detection job.",
                                "maxLength": 256,
                                "minLength": 1,
                                "pattern": "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-%@]*)$",
                                "type": "string"
                            },
                            "JobStatus": {
                                "description": "The current status of the topic detection job. If the status is <code>Failed</code>, the reason for the failure is shown in the <code>Message</code> field.",
                                "enum": [
                                    "SUBMITTED",
                                    "IN_PROGRESS",
                                    "COMPLETED",
                                    "FAILED",
                                    "STOP_REQUESTED",
                                    "STOPPED"
                                ],
                                "type": "string"
                            },
                            "Message": {
                                "description": "A description for the status of a job.",
                                "type": "string"
                            },
                            "NumberOfTopics": {
                                "description": "The number of topics to detect supplied when you created the topic detection job. The default is 10. ",
                                "type": "integer"
                            },
                            "OutputDataConfig": {
                                "description": "The output data configuration supplied when you created the topic detection job.",
                                "properties": {
                                    "S3Uri": {
                                        "description": "<p>When you use the <code>OutputDataConfig</code> object with asynchronous operations, you specify the Amazon S3 location where you want to write the output data. The URI must be in the same region as the API endpoint that you are calling. The location is used as the prefix for the actual location of the output file.</p> <p>When the topic detection job is finished, the service creates an output file in a directory specific to the job. The <code>S3Uri</code> field contains the location of the output file, called <code>output.tar.gz</code>. It is a compressed archive that contains the ouput of the operation.</p>",
                                        "maxLength": 1024,
                                        "pattern": "s3://[a-z0-9][\\.\\-a-z0-9]{1,61}[a-z0-9](/.*)?",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "S3Uri"
                                ],
                                "type": "object"
                            },
                            "SubmitTime": {
                                "description": "The time that the topic detection job was submitted for processing.",
                                "format": "date-time",
                                "type": "string"
                            }
                        },
                        "type": "object"
                    }
                },
                "type": "object"
            },
            "DetectDominantLanguageRequest": {
                "properties": {
                    "Text": {
                        "description": "A UTF-8 text string. Each string should contain at least 20 characters and must contain fewer that 5,000 bytes of UTF-8 encoded characters.",
                        "minLength": 1,
                        "type": "string"
                    }
                },
                "required": [
                    "Text"
                ],
                "type": "object"
            },
            "DetectDominantLanguageResponse": {
                "properties": {
                    "Languages": {
                        "description": "The languages that Amazon Comprehend detected in the input text. For each language, the response returns the RFC 5646 language code and the level of confidence that Amazon Comprehend has in the accuracy of its inference. For more information about RFC 5646, see <a href=\"https://tools.ietf.org/html/rfc5646\">Tags for Identifying Languages</a> on the <i>IETF Tools</i> web site.",
                        "items": {
                            "description": "Returns the code for the dominant language in the input text and the level of confidence that Amazon Comprehend has in the accuracy of the detection.",
                            "properties": {
                                "LanguageCode": {
                                    "description": "The RFC 5646 language code for the dominant language. For more information about RFC 5646, see <a href=\"https://tools.ietf.org/html/rfc5646\">Tags for Identifying Languages</a> on the <i>IETF Tools</i> web site.",
                                    "minLength": 1,
                                    "type": "string"
                                },
                                "Score": {
                                    "description": "The level of confidence that Amazon Comprehend has in the accuracy of the detection.",
                                    "format": "float",
                                    "type": "number"
                                }
                            },
                            "type": "object"
                        },
                        "type": "array"
                    }
                },
                "type": "object"
            },
            "DetectEntitiesRequest": {
                "properties": {
                    "LanguageCode": {
                        "description": "The language of the input documents. You can specify English (\"en\") or Spanish (\"es\"). All documents must be in the same language.",
                        "enum": [
                            "en",
                            "es",
                            "fr",
                            "de",
                            "it",
                            "pt"
                        ],
                        "type": "string"
                    },
                    "Text": {
                        "description": "A UTF-8 text string. Each string must contain fewer that 5,000 bytes of UTF-8 encoded characters.",
                        "minLength": 1,
                        "type": "string"
                    }
                },
                "required": [
                    "Text",
                    "LanguageCode"
                ],
                "type": "object"
            },
            "DetectEntitiesResponse": {
                "properties": {
                    "Entities": {
                        "description": "A collection of entities identified in the input text. For each entity, the response provides the entity text, entity type, where the entity text begins and ends, and the level of confidence that Amazon Comprehend has in the detection. For a list of entity types, see <a>how-entities</a>. ",
                        "items": {
                            "description": "<p>Provides information about an entity. </p> <p> </p>",
                            "properties": {
                                "BeginOffset": {
                                    "description": "A character offset in the input text that shows where the entity begins (the first character is at position 0). The offset returns the position of each UTF-8 code point in the string. A <i>code point</i> is the abstract character from a particular graphical representation. For example, a multi-byte UTF-8 character maps to a single code point.",
                                    "type": "integer"
                                },
                                "EndOffset": {
                                    "description": "A character offset in the input text that shows where the entity ends. The offset returns the position of each UTF-8 code point in the string. A <i>code point</i> is the abstract character from a particular graphical representation. For example, a multi-byte UTF-8 character maps to a single code point. ",
                                    "type": "integer"
                                },
                                "Score": {
                                    "description": "The level of confidence that Amazon Comprehend has in the accuracy of the detection.",
                                    "format": "float",
                                    "type": "number"
                                },
                                "Text": {
                                    "description": "The text of the entity.",
                                    "minLength": 1,
                                    "type": "string"
                                },
                                "Type": {
                                    "description": "The entity's type.",
                                    "enum": [
                                        "PERSON",
                                        "LOCATION",
                                        "ORGANIZATION",
                                        "COMMERCIAL_ITEM",
                                        "EVENT",
                                        "DATE",
                                        "QUANTITY",
                                        "TITLE",
                                        "OTHER"
                                    ],
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        },
                        "type": "array"
                    }
                },
                "type": "object"
            },
            "DetectKeyPhrasesRequest": {
                "properties": {
                    "LanguageCode": {
                        "description": "The language of the input documents. You can specify English (\"en\") or Spanish (\"es\"). All documents must be in the same language.",
                        "enum": [
                            "en",
                            "es",
                            "fr",
                            "de",
                            "it",
                            "pt"
                        ],
                        "type": "string"
                    },
                    "Text": {
                        "description": "A UTF-8 text string. Each string must contain fewer that 5,000 bytes of UTF-8 encoded characters.",
                        "minLength": 1,
                        "type": "string"
                    }
                },
                "required": [
                    "Text",
                    "LanguageCode"
                ],
                "type": "object"
            },
            "DetectKeyPhrasesResponse": {
                "properties": {
                    "KeyPhrases": {
                        "description": "A collection of key phrases that Amazon Comprehend identified in the input text. For each key phrase, the response provides the text of the key phrase, where the key phrase begins and ends, and the level of confidence that Amazon Comprehend has in the accuracy of the detection. ",
                        "items": {
                            "description": "Describes a key noun phrase.",
                            "properties": {
                                "BeginOffset": {
                                    "description": "A character offset in the input text that shows where the key phrase begins (the first character is at position 0). The offset returns the position of each UTF-8 code point in the string. A <i>code point</i> is the abstract character from a particular graphical representation. For example, a multi-byte UTF-8 character maps to a single code point.",
                                    "type": "integer"
                                },
                                "EndOffset": {
                                    "description": "A character offset in the input text where the key phrase ends. The offset returns the position of each UTF-8 code point in the string. A <code>code point</code> is the abstract character from a particular graphical representation. For example, a multi-byte UTF-8 character maps to a single code point.",
                                    "type": "integer"
                                },
                                "Score": {
                                    "description": "The level of confidence that Amazon Comprehend has in the accuracy of the detection.",
                                    "format": "float",
                                    "type": "number"
                                },
                                "Text": {
                                    "description": "The text of a key noun phrase.",
                                    "minLength": 1,
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        },
                        "type": "array"
                    }
                },
                "type": "object"
            },
            "DetectSentimentRequest": {
                "properties": {
                    "LanguageCode": {
                        "description": "The language of the input documents. You can specify English (\"en\") or Spanish (\"es\"). All documents must be in the same language.",
                        "enum": [
                            "en",
                            "es",
                            "fr",
                            "de",
                            "it",
                            "pt"
                        ],
                        "type": "string"
                    },
                    "Text": {
                        "description": "A UTF-8 text string. Each string must contain fewer that 5,000 bytes of UTF-8 encoded characters.",
                        "minLength": 1,
                        "type": "string"
                    }
                },
                "required": [
                    "Text",
                    "LanguageCode"
                ],
                "type": "object"
            },
            "DetectSentimentResponse": {
                "properties": {
                    "Sentiment": {
                        "description": "The inferred sentiment that Amazon Comprehend has the highest level of confidence in.",
                        "enum": [
                            "POSITIVE",
                            "NEGATIVE",
                            "NEUTRAL",
                            "MIXED"
                        ],
                        "type": "string"
                    },
                    "SentimentScore": {
                        "description": "An object that lists the sentiments, and their corresponding confidence levels.",
                        "properties": {
                            "Mixed": {
                                "description": "The level of confidence that Amazon Comprehend has in the accuracy of its detection of the <code>MIXED</code> sentiment.",
                                "format": "float",
                                "type": "number"
                            },
                            "Negative": {
                                "description": "The level of confidence that Amazon Comprehend has in the accuracy of its detection of the <code>NEGATIVE</code> sentiment.",
                                "format": "float",
                                "type": "number"
                            },
                            "Neutral": {
                                "description": "The level of confidence that Amazon Comprehend has in the accuracy of its detection of the <code>NEUTRAL</code> sentiment.",
                                "format": "float",
                                "type": "number"
                            },
                            "Positive": {
                                "description": "The level of confidence that Amazon Comprehend has in the accuracy of its detection of the <code>POSITIVE</code> sentiment.",
                                "format": "float",
                                "type": "number"
                            }
                        },
                        "type": "object"
                    }
                },
                "type": "object"
            },
            "DetectSyntaxRequest": {
                "properties": {
                    "LanguageCode": {
                        "description": "The language code of the input documents. You can specify English (\"en\") or Spanish (\"es\").",
                        "enum": [
                            "en",
                            "es",
                            "fr",
                            "de",
                            "it",
                            "pt"
                        ],
                        "type": "string"
                    },
                    "Text": {
                        "description": "A UTF-8 string. Each string must contain fewer that 5,000 bytes of UTF encoded characters.",
                        "minLength": 1,
                        "type": "string"
                    }
                },
                "required": [
                    "Text",
                    "LanguageCode"
                ],
                "type": "object"
            },
            "DetectSyntaxResponse": {
                "properties": {
                    "SyntaxTokens": {
                        "description": "A collection of syntax tokens describing the text. For each token, the response provides the text, the token type, where the text begins and ends, and the level of confidence that Amazon Comprehend has that the token is correct. For a list of token types, see <a>how-syntax</a>.",
                        "items": {
                            "description": "Represents a work in the input text that was recognized and assigned a part of speech. There is one syntax token record for each word in the source text.",
                            "properties": {
                                "BeginOffset": {
                                    "description": "The zero-based offset from the beginning of the source text to the first character in the word.",
                                    "type": "integer"
                                },
                                "EndOffset": {
                                    "description": "The zero-based offset from the beginning of the source text to the last character in the word.",
                                    "type": "integer"
                                },
                                "PartOfSpeech": {
                                    "description": "Provides the part of speech label and the confidence level that Amazon Comprehend has that the part of speech was correctly identified. For more information, see <a>how-syntax</a>.",
                                    "properties": {
                                        "Score": {
                                            "description": "The confidence that Amazon Comprehend has that the part of speech was correctly identified.",
                                            "format": "float",
                                            "type": "number"
                                        },
                                        "Tag": {
                                            "description": "Identifies the part of speech that the token represents.",
                                            "enum": [
                                                "ADJ",
                                                "ADP",
                                                "ADV",
                                                "AUX",
                                                "CONJ",
                                                "CCONJ",
                                                "DET",
                                                "INTJ",
                                                "NOUN",
                                                "NUM",
                                                "O",
                                                "PART",
                                                "PRON",
                                                "PROPN",
                                                "PUNCT",
                                                "SCONJ",
                                                "SYM",
                                                "VERB"
                                            ],
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                },
                                "Text": {
                                    "description": "The word that was recognized in the source text.",
                                    "minLength": 1,
                                    "type": "string"
                                },
                                "TokenId": {
                                    "description": "A unique identifier for a token.",
                                    "type": "integer"
                                }
                            },
                            "type": "object"
                        },
                        "type": "array"
                    }
                },
                "type": "object"
            },
            "DocumentClassificationJobFilter": {
                "description": "Provides information for filtering a list of document classification jobs. For more information, see the operation. You can provide only one filter parameter in each request.",
                "properties": {
                    "JobName": {
                        "description": "Filters on the name of the job.",
                        "maxLength": 256,
                        "minLength": 1,
                        "pattern": "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-%@]*)$",
                        "type": "string"
                    },
                    "JobStatus": {
                        "description": "Filters the list based on job status. Returns only jobs with the specified status.",
                        "enum": [
                            "SUBMITTED",
                            "IN_PROGRESS",
                            "COMPLETED",
                            "FAILED",
                            "STOP_REQUESTED",
                            "STOPPED"
                        ],
                        "type": "string"
                    },
                    "SubmitTimeAfter": {
                        "description": "Filters the list of jobs based on the time that the job was submitted for processing. Returns only jobs submitted before the specified time. Jobs are returned in descending order, newest to oldest.",
                        "format": "date-time",
                        "type": "string"
                    },
                    "SubmitTimeBefore": {
                        "description": "Filters the list of jobs based on the time that the job was submitted for processing. Returns only jobs submitted after the specified time. Jobs are returned in ascending order, oldest to newest.",
                        "format": "date-time",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "DocumentClassificationJobProperties": {
                "description": "Provides information about a document classification job.",
                "properties": {
                    "DataAccessRoleArn": {
                        "description": "The Amazon Resource Name (ARN) of the AWS identity and Access Management (IAM) role that grants Amazon Comprehend read access to your input data.",
                        "maxLength": 2048,
                        "minLength": 20,
                        "pattern": "arn:aws(-[^:]+)?:iam::[0-9]{12}:role/.+",
                        "type": "string"
                    },
                    "DocumentClassifierArn": {
                        "description": "The Amazon Resource Name (ARN) that identifies the document classifier. ",
                        "maxLength": 256,
                        "pattern": "arn:aws:comprehend:[a-zA-Z0-9-]*:[0-9]{12}:document-classifier/[a-zA-Z0-9](-*[a-zA-Z0-9])*",
                        "type": "string"
                    },
                    "EndTime": {
                        "description": "The time that the document classification job completed.",
                        "format": "date-time",
                        "type": "string"
                    },
                    "InputDataConfig": {
                        "description": "The input data configuration that you supplied when you created the document classification job.",
                        "properties": {
                            "InputFormat": {
                                "description": "<p>Specifies how the text in an input file should be processed:</p> <ul> <li> <p> <code>ONE_DOC_PER_FILE</code> - Each file is considered a separate document. Use this option when you are processing large documents, such as newspaper articles or scientific papers.</p> </li> <li> <p> <code>ONE_DOC_PER_LINE</code> - Each line in a file is considered a separate document. Use this option when you are processing many short documents, such as text messages.</p> </li> </ul>",
                                "enum": [
                                    "ONE_DOC_PER_FILE",
                                    "ONE_DOC_PER_LINE"
                                ],
                                "type": "string"
                            },
                            "S3Uri": {
                                "description": "<p>The Amazon S3 URI for the input data. The URI must be in same region as the API endpoint that you are calling. The URI can point to a single input file or it can provide the prefix for a collection of data files. </p> <p>For example, if you use the URI <code>S3://bucketName/prefix</code>, if the prefix is a single file, Amazon Comprehend uses that file as input. If more than one file begins with the prefix, Amazon Comprehend uses all of them as input.</p>",
                                "maxLength": 1024,
                                "pattern": "s3://[a-z0-9][\\.\\-a-z0-9]{1,61}[a-z0-9](/.*)?",
                                "type": "string"
                            }
                        },
                        "required": [
                            "S3Uri"
                        ],
                        "type": "object"
                    },
                    "JobId": {
                        "description": "The identifier assigned to the document classification job.",
                        "maxLength": 32,
                        "minLength": 1,
                        "pattern": "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-%@]*)$",
                        "type": "string"
                    },
                    "JobName": {
                        "description": "The name that you assigned to the document classification job.",
                        "maxLength": 256,
                        "minLength": 1,
                        "pattern": "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-%@]*)$",
                        "type": "string"
                    },
                    "JobStatus": {
                        "description": "The current status of the document classification job. If the status is <code>FAILED</code>, the <code>Message</code> field shows the reason for the failure.",
                        "enum": [
                            "SUBMITTED",
                            "IN_PROGRESS",
                            "COMPLETED",
                            "FAILED",
                            "STOP_REQUESTED",
                            "STOPPED"
                        ],
                        "type": "string"
                    },
                    "Message": {
                        "description": "A description of the status of the job.",
                        "type": "string"
                    },
                    "OutputDataConfig": {
                        "description": "The output data configuration that you supplied when you created the document classification job.",
                        "properties": {
                            "S3Uri": {
                                "description": "<p>When you use the <code>OutputDataConfig</code> object with asynchronous operations, you specify the Amazon S3 location where you want to write the output data. The URI must be in the same region as the API endpoint that you are calling. The location is used as the prefix for the actual location of the output file.</p> <p>When the topic detection job is finished, the service creates an output file in a directory specific to the job. The <code>S3Uri</code> field contains the location of the output file, called <code>output.tar.gz</code>. It is a compressed archive that contains the ouput of the operation.</p>",
                                "maxLength": 1024,
                                "pattern": "s3://[a-z0-9][\\.\\-a-z0-9]{1,61}[a-z0-9](/.*)?",
                                "type": "string"
                            }
                        },
                        "required": [
                            "S3Uri"
                        ],
                        "type": "object"
                    },
                    "SubmitTime": {
                        "description": "The time that the document classification job was submitted for processing.",
                        "format": "date-time",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "DocumentClassificationJobPropertiesList": {
                "items": {
                    "description": "Provides information about a document classification job.",
                    "properties": {
                        "DataAccessRoleArn": {
                            "description": "The Amazon Resource Name (ARN) of the AWS identity and Access Management (IAM) role that grants Amazon Comprehend read access to your input data.",
                            "maxLength": 2048,
                            "minLength": 20,
                            "pattern": "arn:aws(-[^:]+)?:iam::[0-9]{12}:role/.+",
                            "type": "string"
                        },
                        "DocumentClassifierArn": {
                            "description": "The Amazon Resource Name (ARN) that identifies the document classifier. ",
                            "maxLength": 256,
                            "pattern": "arn:aws:comprehend:[a-zA-Z0-9-]*:[0-9]{12}:document-classifier/[a-zA-Z0-9](-*[a-zA-Z0-9])*",
                            "type": "string"
                        },
                        "EndTime": {
                            "description": "The time that the document classification job completed.",
                            "format": "date-time",
                            "type": "string"
                        },
                        "InputDataConfig": {
                            "description": "The input data configuration that you supplied when you created the document classification job.",
                            "properties": {
                                "InputFormat": {
                                    "description": "<p>Specifies how the text in an input file should be processed:</p> <ul> <li> <p> <code>ONE_DOC_PER_FILE</code> - Each file is considered a separate document. Use this option when you are processing large documents, such as newspaper articles or scientific papers.</p> </li> <li> <p> <code>ONE_DOC_PER_LINE</code> - Each line in a file is considered a separate document. Use this option when you are processing many short documents, such as text messages.</p> </li> </ul>",
                                    "enum": [
                                        "ONE_DOC_PER_FILE",
                                        "ONE_DOC_PER_LINE"
                                    ],
                                    "type": "string"
                                },
                                "S3Uri": {
                                    "description": "<p>The Amazon S3 URI for the input data. The URI must be in same region as the API endpoint that you are calling. The URI can point to a single input file or it can provide the prefix for a collection of data files. </p> <p>For example, if you use the URI <code>S3://bucketName/prefix</code>, if the prefix is a single file, Amazon Comprehend uses that file as input. If more than one file begins with the prefix, Amazon Comprehend uses all of them as input.</p>",
                                    "maxLength": 1024,
                                    "pattern": "s3://[a-z0-9][\\.\\-a-z0-9]{1,61}[a-z0-9](/.*)?",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "S3Uri"
                            ],
                            "type": "object"
                        },
                        "JobId": {
                            "description": "The identifier assigned to the document classification job.",
                            "maxLength": 32,
                            "minLength": 1,
                            "pattern": "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-%@]*)$",
                            "type": "string"
                        },
                        "JobName": {
                            "description": "The name that you assigned to the document classification job.",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-%@]*)$",
                            "type": "string"
                        },
                        "JobStatus": {
                            "description": "The current status of the document classification job. If the status is <code>FAILED</code>, the <code>Message</code> field shows the reason for the failure.",
                            "enum": [
                                "SUBMITTED",
                                "IN_PROGRESS",
                                "COMPLETED",
                                "FAILED",
                                "STOP_REQUESTED",
                                "STOPPED"
                            ],
                            "type": "string"
                        },
                        "Message": {
                            "description": "A description of the status of the job.",
                            "type": "string"
                        },
                        "OutputDataConfig": {
                            "description": "The output data configuration that you supplied when you created the document classification job.",
                            "properties": {
                                "S3Uri": {
                                    "description": "<p>When you use the <code>OutputDataConfig</code> object with asynchronous operations, you specify the Amazon S3 location where you want to write the output data. The URI must be in the same region as the API endpoint that you are calling. The location is used as the prefix for the actual location of the output file.</p> <p>When the topic detection job is finished, the service creates an output file in a directory specific to the job. The <code>S3Uri</code> field contains the location of the output file, called <code>output.tar.gz</code>. It is a compressed archive that contains the ouput of the operation.</p>",
                                    "maxLength": 1024,
                                    "pattern": "s3://[a-z0-9][\\.\\-a-z0-9]{1,61}[a-z0-9](/.*)?",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "S3Uri"
                            ],
                            "type": "object"
                        },
                        "SubmitTime": {
                            "description": "The time that the document classification job was submitted for processing.",
                            "format": "date-time",
                            "type": "string"
                        }
                    },
                    "type": "object"
                },
                "type": "array"
            },
            "DocumentClassifierArn": {
                "maxLength": 256,
                "pattern": "arn:aws:comprehend:[a-zA-Z0-9-]*:[0-9]{12}:document-classifier/[a-zA-Z0-9](-*[a-zA-Z0-9])*",
                "type": "string"
            },
            "DocumentClassifierFilter": {
                "description": "Provides information for filtering a list of document classifiers. You can only specify one filtering parameter in a request. For more information, see the operation.",
                "properties": {
                    "Status": {
                        "description": "Filters the list of classifiers based on status. ",
                        "enum": [
                            "SUBMITTED",
                            "TRAINING",
                            "DELETING",
                            "STOP_REQUESTED",
                            "STOPPED",
                            "IN_ERROR",
                            "TRAINED"
                        ],
                        "type": "string"
                    },
                    "SubmitTimeAfter": {
                        "description": "Filters the list of classifiers based on the time that the classifier was submitted for processing. Returns only classifiers submitted after the specified time. Classifiers are returned in descending order, newest to oldest.",
                        "format": "date-time",
                        "type": "string"
                    },
                    "SubmitTimeBefore": {
                        "description": "Filters the list of classifiers based on the time that the classifier was submitted for processing. Returns only classifiers submitted before the specified time. Classifiers are returned in ascending order, oldest to newest.",
                        "format": "date-time",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "DocumentClassifierInputDataConfig": {
                "description": "<p>The input properties for training a document classifier. </p> <p>For more information on how the input file is formatted, see <a>how-document-classification-training-data</a>. </p>",
                "properties": {
                    "S3Uri": {
                        "description": "<p>The Amazon S3 URI for the input data. The S3 bucket must be in the same region as the API endpoint that you are calling. The URI can point to a single input file or it can provide the prefix for a collection of input files.</p> <p>For example, if you use the URI <code>S3://bucketName/prefix</code>, if the prefix is a single file, Amazon Comprehend uses that file as input. If more than one file begins with the prefix, Amazon Comprehend uses all of them as input.</p>",
                        "maxLength": 1024,
                        "pattern": "s3://[a-z0-9][\\.\\-a-z0-9]{1,61}[a-z0-9](/.*)?",
                        "type": "string"
                    }
                },
                "required": [
                    "S3Uri"
                ],
                "type": "object"
            },
            "DocumentClassifierProperties": {
                "description": "Provides information about a document classifier.",
                "properties": {
                    "ClassifierMetadata": {
                        "description": "Information about the document classifier, including the number of documents used for training the classifier, the number of documents used for test the classifier, and an accuracy rating.",
                        "properties": {
                            "EvaluationMetrics": {
                                "description": " Describes the result metrics for the test data associated with an documentation classifier.",
                                "properties": {
                                    "Accuracy": {
                                        "description": "The fraction of the labels that were correct recognized. It is computed by dividing the number of labels in the test documents that were correctly recognized by the total number of labels in the test documents.",
                                        "format": "double",
                                        "type": "number"
                                    },
                                    "F1Score": {
                                        "description": "A measure of how accurate the classifier results are for the test data. It is derived from the <code>Precision</code> and <code>Recall</code> values. The <code>F1Score</code> is the harmonic average of the two scores. The highest score is 1, and the worst score is 0. ",
                                        "format": "double",
                                        "type": "number"
                                    },
                                    "Precision": {
                                        "description": "A measure of the usefulness of the classifier results in the test data. High precision means that the classifier returned substantially more relevant results than irrelevant ones.",
                                        "format": "double",
                                        "type": "number"
                                    },
                                    "Recall": {
                                        "description": "A measure of how complete the classifier results are for the test data. High recall means that the classifier returned most of the relevant results. ",
                                        "format": "double",
                                        "type": "number"
                                    }
                                },
                                "type": "object"
                            },
                            "NumberOfLabels": {
                                "description": "The number of labels in the input data. ",
                                "type": "integer"
                            },
                            "NumberOfTestDocuments": {
                                "description": "The number of documents in the input data that were used to test the classifier. Typically this is 10 to 20 percent of the input documents.",
                                "type": "integer"
                            },
                            "NumberOfTrainedDocuments": {
                                "description": "The number of documents in the input data that were used to train the classifier. Typically this is 80 to 90 percent of the input documents.",
                                "type": "integer"
                            }
                        },
                        "type": "object"
                    },
                    "DataAccessRoleArn": {
                        "description": "The Amazon Resource Name (ARN) of the AWS Identity and Management (IAM) role that grants Amazon Comprehend read access to your input data.",
                        "maxLength": 2048,
                        "minLength": 20,
                        "pattern": "arn:aws(-[^:]+)?:iam::[0-9]{12}:role/.+",
                        "type": "string"
                    },
                    "DocumentClassifierArn": {
                        "description": "The Amazon Resource Name (ARN) that identifies the document classifier.",
                        "maxLength": 256,
                        "pattern": "arn:aws:comprehend:[a-zA-Z0-9-]*:[0-9]{12}:document-classifier/[a-zA-Z0-9](-*[a-zA-Z0-9])*",
                        "type": "string"
                    },
                    "EndTime": {
                        "description": "The time that training the document classifier completed.",
                        "format": "date-time",
                        "type": "string"
                    },
                    "InputDataConfig": {
                        "description": "The input data configuration that you supplied when you created the document classifier for training.",
                        "properties": {
                            "S3Uri": {
                                "description": "<p>The Amazon S3 URI for the input data. The S3 bucket must be in the same region as the API endpoint that you are calling. The URI can point to a single input file or it can provide the prefix for a collection of input files.</p> <p>For example, if you use the URI <code>S3://bucketName/prefix</code>, if the prefix is a single file, Amazon Comprehend uses that file as input. If more than one file begins with the prefix, Amazon Comprehend uses all of them as input.</p>",
                                "maxLength": 1024,
                                "pattern": "s3://[a-z0-9][\\.\\-a-z0-9]{1,61}[a-z0-9](/.*)?",
                                "type": "string"
                            }
                        },
                        "required": [
                            "S3Uri"
                        ],
                        "type": "object"
                    },
                    "LanguageCode": {
                        "description": "The language code for the language of the documents that the classifier was trained on.",
                        "enum": [
                            "en",
                            "es",
                            "fr",
                            "de",
                            "it",
                            "pt"
                        ],
                        "type": "string"
                    },
                    "Message": {
                        "description": "Additional information about the status of the classifier.",
                        "type": "string"
                    },
                    "Status": {
                        "description": "The status of the document classifier. If the status is <code>TRAINED</code> the classifier is ready to use. If the status is <code>FAILED</code> you can see additional information about why the classifier wasn't trained in the <code>Message</code> field.",
                        "enum": [
                            "SUBMITTED",
                            "TRAINING",
                            "DELETING",
                            "STOP_REQUESTED",
                            "STOPPED",
                            "IN_ERROR",
                            "TRAINED"
                        ],
                        "type": "string"
                    },
                    "SubmitTime": {
                        "description": "The time that the document classifier was submitted for training.",
                        "format": "date-time",
                        "type": "string"
                    },
                    "TrainingEndTime": {
                        "description": "The time that training of the document classifier was completed. Indicates the time when the training completes on documentation classifiers. You are billed for the time interval between this time and the value of TrainingStartTime.",
                        "format": "date-time",
                        "type": "string"
                    },
                    "TrainingStartTime": {
                        "description": "Indicates the time when the training starts on documentation classifiers. You are billed for the time interval between this time and the value of TrainingEndTime. ",
                        "format": "date-time",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "DocumentClassifierPropertiesList": {
                "items": {
                    "description": "Provides information about a document classifier.",
                    "properties": {
                        "ClassifierMetadata": {
                            "description": "Information about the document classifier, including the number of documents used for training the classifier, the number of documents used for test the classifier, and an accuracy rating.",
                            "properties": {
                                "EvaluationMetrics": {
                                    "description": " Describes the result metrics for the test data associated with an documentation classifier.",
                                    "properties": {
                                        "Accuracy": {
                                            "description": "The fraction of the labels that were correct recognized. It is computed by dividing the number of labels in the test documents that were correctly recognized by the total number of labels in the test documents.",
                                            "format": "double",
                                            "type": "number"
                                        },
                                        "F1Score": {
                                            "description": "A measure of how accurate the classifier results are for the test data. It is derived from the <code>Precision</code> and <code>Recall</code> values. The <code>F1Score</code> is the harmonic average of the two scores. The highest score is 1, and the worst score is 0. ",
                                            "format": "double",
                                            "type": "number"
                                        },
                                        "Precision": {
                                            "description": "A measure of the usefulness of the classifier results in the test data. High precision means that the classifier returned substantially more relevant results than irrelevant ones.",
                                            "format": "double",
                                            "type": "number"
                                        },
                                        "Recall": {
                                            "description": "A measure of how complete the classifier results are for the test data. High recall means that the classifier returned most of the relevant results. ",
                                            "format": "double",
                                            "type": "number"
                                        }
                                    },
                                    "type": "object"
                                },
                                "NumberOfLabels": {
                                    "description": "The number of labels in the input data. ",
                                    "type": "integer"
                                },
                                "NumberOfTestDocuments": {
                                    "description": "The number of documents in the input data that were used to test the classifier. Typically this is 10 to 20 percent of the input documents.",
                                    "type": "integer"
                                },
                                "NumberOfTrainedDocuments": {
                                    "description": "The number of documents in the input data that were used to train the classifier. Typically this is 80 to 90 percent of the input documents.",
                                    "type": "integer"
                                }
                            },
                            "type": "object"
                        },
                        "DataAccessRoleArn": {
                            "description": "The Amazon Resource Name (ARN) of the AWS Identity and Management (IAM) role that grants Amazon Comprehend read access to your input data.",
                            "maxLength": 2048,
                            "minLength": 20,
                            "pattern": "arn:aws(-[^:]+)?:iam::[0-9]{12}:role/.+",
                            "type": "string"
                        },
                        "DocumentClassifierArn": {
                            "description": "The Amazon Resource Name (ARN) that identifies the document classifier.",
                            "maxLength": 256,
                            "pattern": "arn:aws:comprehend:[a-zA-Z0-9-]*:[0-9]{12}:document-classifier/[a-zA-Z0-9](-*[a-zA-Z0-9])*",
                            "type": "string"
                        },
                        "EndTime": {
                            "description": "The time that training the document classifier completed.",
                            "format": "date-time",
                            "type": "string"
                        },
                        "InputDataConfig": {
                            "description": "The input data configuration that you supplied when you created the document classifier for training.",
                            "properties": {
                                "S3Uri": {
                                    "description": "<p>The Amazon S3 URI for the input data. The S3 bucket must be in the same region as the API endpoint that you are calling. The URI can point to a single input file or it can provide the prefix for a collection of input files.</p> <p>For example, if you use the URI <code>S3://bucketName/prefix</code>, if the prefix is a single file, Amazon Comprehend uses that file as input. If more than one file begins with the prefix, Amazon Comprehend uses all of them as input.</p>",
                                    "maxLength": 1024,
                                    "pattern": "s3://[a-z0-9][\\.\\-a-z0-9]{1,61}[a-z0-9](/.*)?",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "S3Uri"
                            ],
                            "type": "object"
                        },
                        "LanguageCode": {
                            "description": "The language code for the language of the documents that the classifier was trained on.",
                            "enum": [
                                "en",
                                "es",
                                "fr",
                                "de",
                                "it",
                                "pt"
                            ],
                            "type": "string"
                        },
                        "Message": {
                            "description": "Additional information about the status of the classifier.",
                            "type": "string"
                        },
                        "Status": {
                            "description": "The status of the document classifier. If the status is <code>TRAINED</code> the classifier is ready to use. If the status is <code>FAILED</code> you can see additional information about why the classifier wasn't trained in the <code>Message</code> field.",
                            "enum": [
                                "SUBMITTED",
                                "TRAINING",
                                "DELETING",
                                "STOP_REQUESTED",
                                "STOPPED",
                                "IN_ERROR",
                                "TRAINED"
                            ],
                            "type": "string"
                        },
                        "SubmitTime": {
                            "description": "The time that the document classifier was submitted for training.",
                            "format": "date-time",
                            "type": "string"
                        },
                        "TrainingEndTime": {
                            "description": "The time that training of the document classifier was completed. Indicates the time when the training completes on documentation classifiers. You are billed for the time interval between this time and the value of TrainingStartTime.",
                            "format": "date-time",
                            "type": "string"
                        },
                        "TrainingStartTime": {
                            "description": "Indicates the time when the training starts on documentation classifiers. You are billed for the time interval between this time and the value of TrainingEndTime. ",
                            "format": "date-time",
                            "type": "string"
                        }
                    },
                    "type": "object"
                },
                "type": "array"
            },
            "DominantLanguage": {
                "description": "Returns the code for the dominant language in the input text and the level of confidence that Amazon Comprehend has in the accuracy of the detection.",
                "properties": {
                    "LanguageCode": {
                        "description": "The RFC 5646 language code for the dominant language. For more information about RFC 5646, see <a href=\"https://tools.ietf.org/html/rfc5646\">Tags for Identifying Languages</a> on the <i>IETF Tools</i> web site.",
                        "minLength": 1,
                        "type": "string"
                    },
                    "Score": {
                        "description": "The level of confidence that Amazon Comprehend has in the accuracy of the detection.",
                        "format": "float",
                        "type": "number"
                    }
                },
                "type": "object"
            },
            "DominantLanguageDetectionJobFilter": {
                "description": "Provides information for filtering a list of dominant language detection jobs. For more information, see the operation.",
                "properties": {
                    "JobName": {
                        "description": "Filters on the name of the job.",
                        "maxLength": 256,
                        "minLength": 1,
                        "pattern": "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-%@]*)$",
                        "type": "string"
                    },
                    "JobStatus": {
                        "description": "Filters the list of jobs based on job status. Returns only jobs with the specified status.",
                        "enum": [
                            "SUBMITTED",
                            "IN_PROGRESS",
                            "COMPLETED",
                            "FAILED",
                            "STOP_REQUESTED",
                            "STOPPED"
                        ],
                        "type": "string"
                    },
                    "SubmitTimeAfter": {
                        "description": "Filters the list of jobs based on the time that the job was submitted for processing. Returns only jobs submitted after the specified time. Jobs are returned in descending order, newest to oldest.",
                        "format": "date-time",
                        "type": "string"
                    },
                    "SubmitTimeBefore": {
                        "description": "Filters the list of jobs based on the time that the job was submitted for processing. Returns only jobs submitted before the specified time. Jobs are returned in ascending order, oldest to newest.",
                        "format": "date-time",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "DominantLanguageDetectionJobProperties": {
                "description": "Provides information about a dominant language detection job.",
                "properties": {
                    "DataAccessRoleArn": {
                        "description": "The Amazon Resource Name (ARN) that gives Amazon Comprehend read access to your input data.",
                        "maxLength": 2048,
                        "minLength": 20,
                        "pattern": "arn:aws(-[^:]+)?:iam::[0-9]{12}:role/.+",
                        "type": "string"
                    },
                    "EndTime": {
                        "description": "The time that the dominant language detection job completed.",
                        "format": "date-time",
                        "type": "string"
                    },
                    "InputDataConfig": {
                        "description": "The input data configuration that you supplied when you created the dominant language detection job.",
                        "properties": {
                            "InputFormat": {
                                "description": "<p>Specifies how the text in an input file should be processed:</p> <ul> <li> <p> <code>ONE_DOC_PER_FILE</code> - Each file is considered a separate document. Use this option when you are processing large documents, such as newspaper articles or scientific papers.</p> </li> <li> <p> <code>ONE_DOC_PER_LINE</code> - Each line in a file is considered a separate document. Use this option when you are processing many short documents, such as text messages.</p> </li> </ul>",
                                "enum": [
                                    "ONE_DOC_PER_FILE",
                                    "ONE_DOC_PER_LINE"
                                ],
                                "type": "string"
                            },
                            "S3Uri": {
                                "description": "<p>The Amazon S3 URI for the input data. The URI must be in same region as the API endpoint that you are calling. The URI can point to a single input file or it can provide the prefix for a collection of data files. </p> <p>For example, if you use the URI <code>S3://bucketName/prefix</code>, if the prefix is a single file, Amazon Comprehend uses that file as input. If more than one file begins with the prefix, Amazon Comprehend uses all of them as input.</p>",
                                "maxLength": 1024,
                                "pattern": "s3://[a-z0-9][\\.\\-a-z0-9]{1,61}[a-z0-9](/.*)?",
                                "type": "string"
                            }
                        },
                        "required": [
                            "S3Uri"
                        ],
                        "type": "object"
                    },
                    "JobId": {
                        "description": "The identifier assigned to the dominant language detection job.",
                        "maxLength": 32,
                        "minLength": 1,
                        "pattern": "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-%@]*)$",
                        "type": "string"
                    },
                    "JobName": {
                        "description": "The name that you assigned to the dominant language detection job.",
                        "maxLength": 256,
                        "minLength": 1,
                        "pattern": "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-%@]*)$",
                        "type": "string"
                    },
                    "JobStatus": {
                        "description": "The current status of the dominant language detection job. If the status is <code>FAILED</code>, the <code>Message</code> field shows the reason for the failure.",
                        "enum": [
                            "SUBMITTED",
                            "IN_PROGRESS",
                            "COMPLETED",
                            "FAILED",
                            "STOP_REQUESTED",
                            "STOPPED"
                        ],
                        "type": "string"
                    },
                    "Message": {
                        "description": "A description for the status of a job.",
                        "type": "string"
                    },
                    "OutputDataConfig": {
                        "description": "The output data configuration that you supplied when you created the dominant language detection job.",
                        "properties": {
                            "S3Uri": {
                                "description": "<p>When you use the <code>OutputDataConfig</code> object with asynchronous operations, you specify the Amazon S3 location where you want to write the output data. The URI must be in the same region as the API endpoint that you are calling. The location is used as the prefix for the actual location of the output file.</p> <p>When the topic detection job is finished, the service creates an output file in a directory specific to the job. The <code>S3Uri</code> field contains the location of the output file, called <code>output.tar.gz</code>. It is a compressed archive that contains the ouput of the operation.</p>",
                                "maxLength": 1024,
                                "pattern": "s3://[a-z0-9][\\.\\-a-z0-9]{1,61}[a-z0-9](/.*)?",
                                "type": "string"
                            }
                        },
                        "required": [
                            "S3Uri"
                        ],
                        "type": "object"
                    },
                    "SubmitTime": {
                        "description": "The time that the dominant language detection job was submitted for processing.",
                        "format": "date-time",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "DominantLanguageDetectionJobPropertiesList": {
                "items": {
                    "description": "Provides information about a dominant language detection job.",
                    "properties": {
                        "DataAccessRoleArn": {
                            "description": "The Amazon Resource Name (ARN) that gives Amazon Comprehend read access to your input data.",
                            "maxLength": 2048,
                            "minLength": 20,
                            "pattern": "arn:aws(-[^:]+)?:iam::[0-9]{12}:role/.+",
                            "type": "string"
                        },
                        "EndTime": {
                            "description": "The time that the dominant language detection job completed.",
                            "format": "date-time",
                            "type": "string"
                        },
                        "InputDataConfig": {
                            "description": "The input data configuration that you supplied when you created the dominant language detection job.",
                            "properties": {
                                "InputFormat": {
                                    "description": "<p>Specifies how the text in an input file should be processed:</p> <ul> <li> <p> <code>ONE_DOC_PER_FILE</code> - Each file is considered a separate document. Use this option when you are processing large documents, such as newspaper articles or scientific papers.</p> </li> <li> <p> <code>ONE_DOC_PER_LINE</code> - Each line in a file is considered a separate document. Use this option when you are processing many short documents, such as text messages.</p> </li> </ul>",
                                    "enum": [
                                        "ONE_DOC_PER_FILE",
                                        "ONE_DOC_PER_LINE"
                                    ],
                                    "type": "string"
                                },
                                "S3Uri": {
                                    "description": "<p>The Amazon S3 URI for the input data. The URI must be in same region as the API endpoint that you are calling. The URI can point to a single input file or it can provide the prefix for a collection of data files. </p> <p>For example, if you use the URI <code>S3://bucketName/prefix</code>, if the prefix is a single file, Amazon Comprehend uses that file as input. If more than one file begins with the prefix, Amazon Comprehend uses all of them as input.</p>",
                                    "maxLength": 1024,
                                    "pattern": "s3://[a-z0-9][\\.\\-a-z0-9]{1,61}[a-z0-9](/.*)?",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "S3Uri"
                            ],
                            "type": "object"
                        },
                        "JobId": {
                            "description": "The identifier assigned to the dominant language detection job.",
                            "maxLength": 32,
                            "minLength": 1,
                            "pattern": "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-%@]*)$",
                            "type": "string"
                        },
                        "JobName": {
                            "description": "The name that you assigned to the dominant language detection job.",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-%@]*)$",
                            "type": "string"
                        },
                        "JobStatus": {
                            "description": "The current status of the dominant language detection job. If the status is <code>FAILED</code>, the <code>Message</code> field shows the reason for the failure.",
                            "enum": [
                                "SUBMITTED",
                                "IN_PROGRESS",
                                "COMPLETED",
                                "FAILED",
                                "STOP_REQUESTED",
                                "STOPPED"
                            ],
                            "type": "string"
                        },
                        "Message": {
                            "description": "A description for the status of a job.",
                            "type": "string"
                        },
                        "OutputDataConfig": {
                            "description": "The output data configuration that you supplied when you created the dominant language detection job.",
                            "properties": {
                                "S3Uri": {
                                    "description": "<p>When you use the <code>OutputDataConfig</code> object with asynchronous operations, you specify the Amazon S3 location where you want to write the output data. The URI must be in the same region as the API endpoint that you are calling. The location is used as the prefix for the actual location of the output file.</p> <p>When the topic detection job is finished, the service creates an output file in a directory specific to the job. The <code>S3Uri</code> field contains the location of the output file, called <code>output.tar.gz</code>. It is a compressed archive that contains the ouput of the operation.</p>",
                                    "maxLength": 1024,
                                    "pattern": "s3://[a-z0-9][\\.\\-a-z0-9]{1,61}[a-z0-9](/.*)?",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "S3Uri"
                            ],
                            "type": "object"
                        },
                        "SubmitTime": {
                            "description": "The time that the dominant language detection job was submitted for processing.",
                            "format": "date-time",
                            "type": "string"
                        }
                    },
                    "type": "object"
                },
                "type": "array"
            },
            "Double": {
                "format": "double",
                "type": "number"
            },
            "EntitiesDetectionJobFilter": {
                "description": "Provides information for filtering a list of dominant language detection jobs. For more information, see the operation.",
                "properties": {
                    "JobName": {
                        "description": "Filters on the name of the job.",
                        "maxLength": 256,
                        "minLength": 1,
                        "pattern": "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-%@]*)$",
                        "type": "string"
                    },
                    "JobStatus": {
                        "description": "Filters the list of jobs based on job status. Returns only jobs with the specified status.",
                        "enum": [
                            "SUBMITTED",
                            "IN_PROGRESS",
                            "COMPLETED",
                            "FAILED",
                            "STOP_REQUESTED",
                            "STOPPED"
                        ],
                        "type": "string"
                    },
                    "SubmitTimeAfter": {
                        "description": "Filters the list of jobs based on the time that the job was submitted for processing. Returns only jobs submitted after the specified time. Jobs are returned in descending order, newest to oldest.",
                        "format": "date-time",
                        "type": "string"
                    },
                    "SubmitTimeBefore": {
                        "description": "Filters the list of jobs based on the time that the job was submitted for processing. Returns only jobs submitted before the specified time. Jobs are returned in ascending order, oldest to newest.",
                        "format": "date-time",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "EntitiesDetectionJobProperties": {
                "description": "Provides information about an entities detection job.",
                "properties": {
                    "DataAccessRoleArn": {
                        "description": "The Amazon Resource Name (ARN) that gives Amazon Comprehend read access to your input data.",
                        "maxLength": 2048,
                        "minLength": 20,
                        "pattern": "arn:aws(-[^:]+)?:iam::[0-9]{12}:role/.+",
                        "type": "string"
                    },
                    "EndTime": {
                        "description": "The time that the entities detection job completed",
                        "format": "date-time",
                        "type": "string"
                    },
                    "EntityRecognizerArn": {
                        "description": "The Amazon Resource Name (ARN) that identifies the entity recognizer.",
                        "maxLength": 256,
                        "pattern": "arn:aws:comprehend:[a-zA-Z0-9-]*:[0-9]{12}:entity-recognizer/[a-zA-Z0-9](-*[a-zA-Z0-9])*",
                        "type": "string"
                    },
                    "InputDataConfig": {
                        "description": "The input data configuration that you supplied when you created the entities detection job.",
                        "properties": {
                            "InputFormat": {
                                "description": "<p>Specifies how the text in an input file should be processed:</p> <ul> <li> <p> <code>ONE_DOC_PER_FILE</code> - Each file is considered a separate document. Use this option when you are processing large documents, such as newspaper articles or scientific papers.</p> </li> <li> <p> <code>ONE_DOC_PER_LINE</code> - Each line in a file is considered a separate document. Use this option when you are processing many short documents, such as text messages.</p> </li> </ul>",
                                "enum": [
                                    "ONE_DOC_PER_FILE",
                                    "ONE_DOC_PER_LINE"
                                ],
                                "type": "string"
                            },
                            "S3Uri": {
                                "description": "<p>The Amazon S3 URI for the input data. The URI must be in same region as the API endpoint that you are calling. The URI can point to a single input file or it can provide the prefix for a collection of data files. </p> <p>For example, if you use the URI <code>S3://bucketName/prefix</code>, if the prefix is a single file, Amazon Comprehend uses that file as input. If more than one file begins with the prefix, Amazon Comprehend uses all of them as input.</p>",
                                "maxLength": 1024,
                                "pattern": "s3://[a-z0-9][\\.\\-a-z0-9]{1,61}[a-z0-9](/.*)?",
                                "type": "string"
                            }
                        },
                        "required": [
                            "S3Uri"
                        ],
                        "type": "object"
                    },
                    "JobId": {
                        "description": "The identifier assigned to the entities detection job.",
                        "maxLength": 32,
                        "minLength": 1,
                        "pattern": "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-%@]*)$",
                        "type": "string"
                    },
                    "JobName": {
                        "description": "The name that you assigned the entities detection job.",
                        "maxLength": 256,
                        "minLength": 1,
                        "pattern": "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-%@]*)$",
                        "type": "string"
                    },
                    "JobStatus": {
                        "description": "The current status of the entities detection job. If the status is <code>FAILED</code>, the <code>Message</code> field shows the reason for the failure.",
                        "enum": [
                            "SUBMITTED",
                            "IN_PROGRESS",
                            "COMPLETED",
                            "FAILED",
                            "STOP_REQUESTED",
                            "STOPPED"
                        ],
                        "type": "string"
                    },
                    "LanguageCode": {
                        "description": "The language code of the input documents.",
                        "enum": [
                            "en",
                            "es",
                            "fr",
                            "de",
                            "it",
                            "pt"
                        ],
                        "type": "string"
                    },
                    "Message": {
                        "description": "A description of the status of a job.",
                        "type": "string"
                    },
                    "OutputDataConfig": {
                        "description": "The output data configuration that you supplied when you created the entities detection job. ",
                        "properties": {
                            "S3Uri": {
                                "description": "<p>When you use the <code>OutputDataConfig</code> object with asynchronous operations, you specify the Amazon S3 location where you want to write the output data. The URI must be in the same region as the API endpoint that you are calling. The location is used as the prefix for the actual location of the output file.</p> <p>When the topic detection job is finished, the service creates an output file in a directory specific to the job. The <code>S3Uri</code> field contains the location of the output file, called <code>output.tar.gz</code>. It is a compressed archive that contains the ouput of the operation.</p>",
                                "maxLength": 1024,
                                "pattern": "s3://[a-z0-9][\\.\\-a-z0-9]{1,61}[a-z0-9](/.*)?",
                                "type": "string"
                            }
                        },
                        "required": [
                            "S3Uri"
                        ],
                        "type": "object"
                    },
                    "SubmitTime": {
                        "description": "The time that the entities detection job was submitted for processing.",
                        "format": "date-time",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "EntitiesDetectionJobPropertiesList": {
                "items": {
                    "description": "Provides information about an entities detection job.",
                    "properties": {
                        "DataAccessRoleArn": {
                            "description": "The Amazon Resource Name (ARN) that gives Amazon Comprehend read access to your input data.",
                            "maxLength": 2048,
                            "minLength": 20,
                            "pattern": "arn:aws(-[^:]+)?:iam::[0-9]{12}:role/.+",
                            "type": "string"
                        },
                        "EndTime": {
                            "description": "The time that the entities detection job completed",
                            "format": "date-time",
                            "type": "string"
                        },
                        "EntityRecognizerArn": {
                            "description": "The Amazon Resource Name (ARN) that identifies the entity recognizer.",
                            "maxLength": 256,
                            "pattern": "arn:aws:comprehend:[a-zA-Z0-9-]*:[0-9]{12}:entity-recognizer/[a-zA-Z0-9](-*[a-zA-Z0-9])*",
                            "type": "string"
                        },
                        "InputDataConfig": {
                            "description": "The input data configuration that you supplied when you created the entities detection job.",
                            "properties": {
                                "InputFormat": {
                                    "description": "<p>Specifies how the text in an input file should be processed:</p> <ul> <li> <p> <code>ONE_DOC_PER_FILE</code> - Each file is considered a separate document. Use this option when you are processing large documents, such as newspaper articles or scientific papers.</p> </li> <li> <p> <code>ONE_DOC_PER_LINE</code> - Each line in a file is considered a separate document. Use this option when you are processing many short documents, such as text messages.</p> </li> </ul>",
                                    "enum": [
                                        "ONE_DOC_PER_FILE",
                                        "ONE_DOC_PER_LINE"
                                    ],
                                    "type": "string"
                                },
                                "S3Uri": {
                                    "description": "<p>The Amazon S3 URI for the input data. The URI must be in same region as the API endpoint that you are calling. The URI can point to a single input file or it can provide the prefix for a collection of data files. </p> <p>For example, if you use the URI <code>S3://bucketName/prefix</code>, if the prefix is a single file, Amazon Comprehend uses that file as input. If more than one file begins with the prefix, Amazon Comprehend uses all of them as input.</p>",
                                    "maxLength": 1024,
                                    "pattern": "s3://[a-z0-9][\\.\\-a-z0-9]{1,61}[a-z0-9](/.*)?",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "S3Uri"
                            ],
                            "type": "object"
                        },
                        "JobId": {
                            "description": "The identifier assigned to the entities detection job.",
                            "maxLength": 32,
                            "minLength": 1,
                            "pattern": "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-%@]*)$",
                            "type": "string"
                        },
                        "JobName": {
                            "description": "The name that you assigned the entities detection job.",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-%@]*)$",
                            "type": "string"
                        },
                        "JobStatus": {
                            "description": "The current status of the entities detection job. If the status is <code>FAILED</code>, the <code>Message</code> field shows the reason for the failure.",
                            "enum": [
                                "SUBMITTED",
                                "IN_PROGRESS",
                                "COMPLETED",
                                "FAILED",
                                "STOP_REQUESTED",
                                "STOPPED"
                            ],
                            "type": "string"
                        },
                        "LanguageCode": {
                            "description": "The language code of the input documents.",
                            "enum": [
                                "en",
                                "es",
                                "fr",
                                "de",
                                "it",
                                "pt"
                            ],
                            "type": "string"
                        },
                        "Message": {
                            "description": "A description of the status of a job.",
                            "type": "string"
                        },
                        "OutputDataConfig": {
                            "description": "The output data configuration that you supplied when you created the entities detection job. ",
                            "properties": {
                                "S3Uri": {
                                    "description": "<p>When you use the <code>OutputDataConfig</code> object with asynchronous operations, you specify the Amazon S3 location where you want to write the output data. The URI must be in the same region as the API endpoint that you are calling. The location is used as the prefix for the actual location of the output file.</p> <p>When the topic detection job is finished, the service creates an output file in a directory specific to the job. The <code>S3Uri</code> field contains the location of the output file, called <code>output.tar.gz</code>. It is a compressed archive that contains the ouput of the operation.</p>",
                                    "maxLength": 1024,
                                    "pattern": "s3://[a-z0-9][\\.\\-a-z0-9]{1,61}[a-z0-9](/.*)?",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "S3Uri"
                            ],
                            "type": "object"
                        },
                        "SubmitTime": {
                            "description": "The time that the entities detection job was submitted for processing.",
                            "format": "date-time",
                            "type": "string"
                        }
                    },
                    "type": "object"
                },
                "type": "array"
            },
            "Entity": {
                "description": "<p>Provides information about an entity. </p> <p> </p>",
                "properties": {
                    "BeginOffset": {
                        "description": "A character offset in the input text that shows where the entity begins (the first character is at position 0). The offset returns the position of each UTF-8 code point in the string. A <i>code point</i> is the abstract character from a particular graphical representation. For example, a multi-byte UTF-8 character maps to a single code point.",
                        "type": "integer"
                    },
                    "EndOffset": {
                        "description": "A character offset in the input text that shows where the entity ends. The offset returns the position of each UTF-8 code point in the string. A <i>code point</i> is the abstract character from a particular graphical representation. For example, a multi-byte UTF-8 character maps to a single code point. ",
                        "type": "integer"
                    },
                    "Score": {
                        "description": "The level of confidence that Amazon Comprehend has in the accuracy of the detection.",
                        "format": "float",
                        "type": "number"
                    },
                    "Text": {
                        "description": "The text of the entity.",
                        "minLength": 1,
                        "type": "string"
                    },
                    "Type": {
                        "description": "The entity's type.",
                        "enum": [
                            "PERSON",
                            "LOCATION",
                            "ORGANIZATION",
                            "COMMERCIAL_ITEM",
                            "EVENT",
                            "DATE",
                            "QUANTITY",
                            "TITLE",
                            "OTHER"
                        ],
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "EntityRecognizerAnnotations": {
                "description": "Describes the annotations associated with a entity recognizer.",
                "properties": {
                    "S3Uri": {
                        "description": " Specifies the Amazon S3 location where the annotations for an entity recognizer are located. The URI must be in the same region as the API endpoint that you are calling.",
                        "maxLength": 1024,
                        "pattern": "s3://[a-z0-9][\\.\\-a-z0-9]{1,61}[a-z0-9](/.*)?",
                        "type": "string"
                    }
                },
                "required": [
                    "S3Uri"
                ],
                "type": "object"
            },
            "EntityRecognizerArn": {
                "maxLength": 256,
                "pattern": "arn:aws:comprehend:[a-zA-Z0-9-]*:[0-9]{12}:entity-recognizer/[a-zA-Z0-9](-*[a-zA-Z0-9])*",
                "type": "string"
            },
            "EntityRecognizerDocuments": {
                "description": "Describes the training documents submitted with an entity recognizer.",
                "properties": {
                    "S3Uri": {
                        "description": " Specifies the Amazon S3 location where the training documents for an entity recognizer are located. The URI must be in the same region as the API endpoint that you are calling.",
                        "maxLength": 1024,
                        "pattern": "s3://[a-z0-9][\\.\\-a-z0-9]{1,61}[a-z0-9](/.*)?",
                        "type": "string"
                    }
                },
                "required": [
                    "S3Uri"
                ],
                "type": "object"
            },
            "EntityRecognizerEntityList": {
                "description": "Describes the entity recognizer submitted with an entity recognizer.",
                "properties": {
                    "S3Uri": {
                        "description": "Specifies the Amazon S3 location where the entity list is located. The URI must be in the same region as the API endpoint that you are calling.",
                        "maxLength": 1024,
                        "pattern": "s3://[a-z0-9][\\.\\-a-z0-9]{1,61}[a-z0-9](/.*)?",
                        "type": "string"
                    }
                },
                "required": [
                    "S3Uri"
                ],
                "type": "object"
            },
            "EntityRecognizerEvaluationMetrics": {
                "description": " Detailed information about the accuracy of an entity recognizer. ",
                "properties": {
                    "F1Score": {
                        "description": "A measure of how accurate the recognizer results are for the test data. It is derived from the <code>Precision</code> and <code>Recall</code> values. The <code>F1Score</code> is the harmonic average of the two scores. The highest score is 1, and the worst score is 0. ",
                        "format": "double",
                        "type": "number"
                    },
                    "Precision": {
                        "description": "A measure of the usefulness of the recognizer results in the test data. High precision means that the recognizer returned substantially more relevant results than irrelevant ones. ",
                        "format": "double",
                        "type": "number"
                    },
                    "Recall": {
                        "description": "A measure of how complete the recognizer results are for the test data. High recall means that the recognizer returned most of the relevant results.",
                        "format": "double",
                        "type": "number"
                    }
                },
                "type": "object"
            },
            "EntityRecognizerFilter": {
                "description": "Provides information for filtering a list of entity recognizers. You can only specify one filtering parameter in a request. For more information, see the operation./&gt;",
                "properties": {
                    "Status": {
                        "description": "The status of an entity recognizer.",
                        "enum": [
                            "SUBMITTED",
                            "TRAINING",
                            "DELETING",
                            "STOP_REQUESTED",
                            "STOPPED",
                            "IN_ERROR",
                            "TRAINED"
                        ],
                        "type": "string"
                    },
                    "SubmitTimeAfter": {
                        "description": "Filters the list of entities based on the time that the list was submitted for processing. Returns only jobs submitted after the specified time. Jobs are returned in ascending order, oldest to newest.",
                        "format": "date-time",
                        "type": "string"
                    },
                    "SubmitTimeBefore": {
                        "description": "Filters the list of entities based on the time that the list was submitted for processing. Returns only jobs submitted before the specified time. Jobs are returned in descending order, newest to oldest.",
                        "format": "date-time",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "EntityRecognizerInputDataConfig": {
                "description": "Specifies the format and location of the input data.",
                "properties": {
                    "Annotations": {
                        "description": "S3 location of the annotations file for an entity recognizer.",
                        "properties": {
                            "S3Uri": {
                                "description": " Specifies the Amazon S3 location where the annotations for an entity recognizer are located. The URI must be in the same region as the API endpoint that you are calling.",
                                "maxLength": 1024,
                                "pattern": "s3://[a-z0-9][\\.\\-a-z0-9]{1,61}[a-z0-9](/.*)?",
                                "type": "string"
                            }
                        },
                        "required": [
                            "S3Uri"
                        ],
                        "type": "object"
                    },
                    "Documents": {
                        "description": "S3 location of the documents folder for an entity recognizer",
                        "properties": {
                            "S3Uri": {
                                "description": " Specifies the Amazon S3 location where the training documents for an entity recognizer are located. The URI must be in the same region as the API endpoint that you are calling.",
                                "maxLength": 1024,
                                "pattern": "s3://[a-z0-9][\\.\\-a-z0-9]{1,61}[a-z0-9](/.*)?",
                                "type": "string"
                            }
                        },
                        "required": [
                            "S3Uri"
                        ],
                        "type": "object"
                    },
                    "EntityList": {
                        "description": "S3 location of the entity list for an entity recognizer.",
                        "properties": {
                            "S3Uri": {
                                "description": "Specifies the Amazon S3 location where the entity list is located. The URI must be in the same region as the API endpoint that you are calling.",
                                "maxLength": 1024,
                                "pattern": "s3://[a-z0-9][\\.\\-a-z0-9]{1,61}[a-z0-9](/.*)?",
                                "type": "string"
                            }
                        },
                        "required": [
                            "S3Uri"
                        ],
                        "type": "object"
                    },
                    "EntityTypes": {
                        "description": "The entity types in the input data for an entity recognizer.",
                        "items": {
                            "description": "Information about an individual item on a list of entity types.",
                            "properties": {
                                "Type": {
                                    "description": "Entity type of an item on an entity type list.",
                                    "maxLength": 64,
                                    "pattern": "[_A-Z0-9]+",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "Type"
                            ],
                            "type": "object"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "EntityTypes",
                    "Documents"
                ],
                "type": "object"
            },
            "EntityRecognizerMetadata": {
                "description": "Detailed information about an entity recognizer.",
                "properties": {
                    "EntityTypes": {
                        "description": "Entity types from the metadata of an entity recognizer.",
                        "items": {
                            "description": "Individual item from the list of entity types in the metadata of an entity recognizer.",
                            "properties": {
                                "Type": {
                                    "description": "Type of entity from the list of entity types in the metadata of an entity recognizer. ",
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        },
                        "type": "array"
                    },
                    "EvaluationMetrics": {
                        "description": " Detailed information about the accuracy of an entity recognizer.",
                        "properties": {
                            "F1Score": {
                                "description": "A measure of how accurate the recognizer results are for the test data. It is derived from the <code>Precision</code> and <code>Recall</code> values. The <code>F1Score</code> is the harmonic average of the two scores. The highest score is 1, and the worst score is 0. ",
                                "format": "double",
                                "type": "number"
                            },
                            "Precision": {
                                "description": "A measure of the usefulness of the recognizer results in the test data. High precision means that the recognizer returned substantially more relevant results than irrelevant ones. ",
                                "format": "double",
                                "type": "number"
                            },
                            "Recall": {
                                "description": "A measure of how complete the recognizer results are for the test data. High recall means that the recognizer returned most of the relevant results.",
                                "format": "double",
                                "type": "number"
                            }
                        },
                        "type": "object"
                    },
                    "NumberOfTestDocuments": {
                        "description": " The number of documents in the input data that were used to test the entity recognizer. Typically this is 10 to 20 percent of the input documents.",
                        "type": "integer"
                    },
                    "NumberOfTrainedDocuments": {
                        "description": " The number of documents in the input data that were used to train the entity recognizer. Typically this is 80 to 90 percent of the input documents.",
                        "type": "integer"
                    }
                },
                "type": "object"
            },
            "EntityRecognizerMetadataEntityTypesList": {
                "items": {
                    "description": "Individual item from the list of entity types in the metadata of an entity recognizer.",
                    "properties": {
                        "Type": {
                            "description": "Type of entity from the list of entity types in the metadata of an entity recognizer. ",
                            "type": "string"
                        }
                    },
                    "type": "object"
                },
                "type": "array"
            },
            "EntityRecognizerMetadataEntityTypesListItem": {
                "description": "Individual item from the list of entity types in the metadata of an entity recognizer.",
                "properties": {
                    "Type": {
                        "description": "Type of entity from the list of entity types in the metadata of an entity recognizer. ",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "EntityRecognizerProperties": {
                "description": "Describes information about an entity recognizer.",
                "properties": {
                    "DataAccessRoleArn": {
                        "description": " The Amazon Resource Name (ARN) of the AWS Identity and Management (IAM) role that grants Amazon Comprehend read access to your input data.",
                        "maxLength": 2048,
                        "minLength": 20,
                        "pattern": "arn:aws(-[^:]+)?:iam::[0-9]{12}:role/.+",
                        "type": "string"
                    },
                    "EndTime": {
                        "description": "The time that the recognizer creation completed.",
                        "format": "date-time",
                        "type": "string"
                    },
                    "EntityRecognizerArn": {
                        "description": "The Amazon Resource Name (ARN) that identifies the entity recognizer.",
                        "maxLength": 256,
                        "pattern": "arn:aws:comprehend:[a-zA-Z0-9-]*:[0-9]{12}:entity-recognizer/[a-zA-Z0-9](-*[a-zA-Z0-9])*",
                        "type": "string"
                    },
                    "InputDataConfig": {
                        "description": "The input data properties of an entity recognizer.",
                        "properties": {
                            "Annotations": {
                                "description": "S3 location of the annotations file for an entity recognizer.",
                                "properties": {
                                    "S3Uri": {
                                        "description": " Specifies the Amazon S3 location where the annotations for an entity recognizer are located. The URI must be in the same region as the API endpoint that you are calling.",
                                        "maxLength": 1024,
                                        "pattern": "s3://[a-z0-9][\\.\\-a-z0-9]{1,61}[a-z0-9](/.*)?",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "S3Uri"
                                ],
                                "type": "object"
                            },
                            "Documents": {
                                "description": "S3 location of the documents folder for an entity recognizer",
                                "properties": {
                                    "S3Uri": {
                                        "description": " Specifies the Amazon S3 location where the training documents for an entity recognizer are located. The URI must be in the same region as the API endpoint that you are calling.",
                                        "maxLength": 1024,
                                        "pattern": "s3://[a-z0-9][\\.\\-a-z0-9]{1,61}[a-z0-9](/.*)?",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "S3Uri"
                                ],
                                "type": "object"
                            },
                            "EntityList": {
                                "description": "S3 location of the entity list for an entity recognizer.",
                                "properties": {
                                    "S3Uri": {
                                        "description": "Specifies the Amazon S3 location where the entity list is located. The URI must be in the same region as the API endpoint that you are calling.",
                                        "maxLength": 1024,
                                        "pattern": "s3://[a-z0-9][\\.\\-a-z0-9]{1,61}[a-z0-9](/.*)?",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "S3Uri"
                                ],
                                "type": "object"
                            },
                            "EntityTypes": {
                                "description": "The entity types in the input data for an entity recognizer.",
                                "items": {
                                    "description": "Information about an individual item on a list of entity types.",
                                    "properties": {
                                        "Type": {
                                            "description": "Entity type of an item on an entity type list.",
                                            "maxLength": 64,
                                            "pattern": "[_A-Z0-9]+",
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "Type"
                                    ],
                                    "type": "object"
                                },
                                "type": "array"
                            }
                        },
                        "required": [
                            "EntityTypes",
                            "Documents"
                        ],
                        "type": "object"
                    },
                    "LanguageCode": {
                        "description": " The language of the input documents. All documents must be in the same language. Only English (\"en\") is currently supported.",
                        "enum": [
                            "en",
                            "es",
                            "fr",
                            "de",
                            "it",
                            "pt"
                        ],
                        "type": "string"
                    },
                    "Message": {
                        "description": " A description of the status of the recognizer.",
                        "type": "string"
                    },
                    "RecognizerMetadata": {
                        "description": " Provides information about an entity recognizer.",
                        "properties": {
                            "EntityTypes": {
                                "description": "Entity types from the metadata of an entity recognizer.",
                                "items": {
                                    "description": "Individual item from the list of entity types in the metadata of an entity recognizer.",
                                    "properties": {
                                        "Type": {
                                            "description": "Type of entity from the list of entity types in the metadata of an entity recognizer. ",
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                },
                                "type": "array"
                            },
                            "EvaluationMetrics": {
                                "description": " Detailed information about the accuracy of an entity recognizer.",
                                "properties": {
                                    "F1Score": {
                                        "description": "A measure of how accurate the recognizer results are for the test data. It is derived from the <code>Precision</code> and <code>Recall</code> values. The <code>F1Score</code> is the harmonic average of the two scores. The highest score is 1, and the worst score is 0. ",
                                        "format": "double",
                                        "type": "number"
                                    },
                                    "Precision": {
                                        "description": "A measure of the usefulness of the recognizer results in the test data. High precision means that the recognizer returned substantially more relevant results than irrelevant ones. ",
                                        "format": "double",
                                        "type": "number"
                                    },
                                    "Recall": {
                                        "description": "A measure of how complete the recognizer results are for the test data. High recall means that the recognizer returned most of the relevant results.",
                                        "format": "double",
                                        "type": "number"
                                    }
                                },
                                "type": "object"
                            },
                            "NumberOfTestDocuments": {
                                "description": " The number of documents in the input data that were used to test the entity recognizer. Typically this is 10 to 20 percent of the input documents.",
                                "type": "integer"
                            },
                            "NumberOfTrainedDocuments": {
                                "description": " The number of documents in the input data that were used to train the entity recognizer. Typically this is 80 to 90 percent of the input documents.",
                                "type": "integer"
                            }
                        },
                        "type": "object"
                    },
                    "Status": {
                        "description": "Provides the status of the entity recognizer.",
                        "enum": [
                            "SUBMITTED",
                            "TRAINING",
                            "DELETING",
                            "STOP_REQUESTED",
                            "STOPPED",
                            "IN_ERROR",
                            "TRAINED"
                        ],
                        "type": "string"
                    },
                    "SubmitTime": {
                        "description": "The time that the recognizer was submitted for processing.",
                        "format": "date-time",
                        "type": "string"
                    },
                    "TrainingEndTime": {
                        "description": "The time that training of the entity recognizer was completed.",
                        "format": "date-time",
                        "type": "string"
                    },
                    "TrainingStartTime": {
                        "description": "The time that training of the entity recognizer started.",
                        "format": "date-time",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "EntityRecognizerPropertiesList": {
                "items": {
                    "description": "Describes information about an entity recognizer.",
                    "properties": {
                        "DataAccessRoleArn": {
                            "description": " The Amazon Resource Name (ARN) of the AWS Identity and Management (IAM) role that grants Amazon Comprehend read access to your input data.",
                            "maxLength": 2048,
                            "minLength": 20,
                            "pattern": "arn:aws(-[^:]+)?:iam::[0-9]{12}:role/.+",
                            "type": "string"
                        },
                        "EndTime": {
                            "description": "The time that the recognizer creation completed.",
                            "format": "date-time",
                            "type": "string"
                        },
                        "EntityRecognizerArn": {
                            "description": "The Amazon Resource Name (ARN) that identifies the entity recognizer.",
                            "maxLength": 256,
                            "pattern": "arn:aws:comprehend:[a-zA-Z0-9-]*:[0-9]{12}:entity-recognizer/[a-zA-Z0-9](-*[a-zA-Z0-9])*",
                            "type": "string"
                        },
                        "InputDataConfig": {
                            "description": "The input data properties of an entity recognizer.",
                            "properties": {
                                "Annotations": {
                                    "description": "S3 location of the annotations file for an entity recognizer.",
                                    "properties": {
                                        "S3Uri": {
                                            "description": " Specifies the Amazon S3 location where the annotations for an entity recognizer are located. The URI must be in the same region as the API endpoint that you are calling.",
                                            "maxLength": 1024,
                                            "pattern": "s3://[a-z0-9][\\.\\-a-z0-9]{1,61}[a-z0-9](/.*)?",
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "S3Uri"
                                    ],
                                    "type": "object"
                                },
                                "Documents": {
                                    "description": "S3 location of the documents folder for an entity recognizer",
                                    "properties": {
                                        "S3Uri": {
                                            "description": " Specifies the Amazon S3 location where the training documents for an entity recognizer are located. The URI must be in the same region as the API endpoint that you are calling.",
                                            "maxLength": 1024,
                                            "pattern": "s3://[a-z0-9][\\.\\-a-z0-9]{1,61}[a-z0-9](/.*)?",
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "S3Uri"
                                    ],
                                    "type": "object"
                                },
                                "EntityList": {
                                    "description": "S3 location of the entity list for an entity recognizer.",
                                    "properties": {
                                        "S3Uri": {
                                            "description": "Specifies the Amazon S3 location where the entity list is located. The URI must be in the same region as the API endpoint that you are calling.",
                                            "maxLength": 1024,
                                            "pattern": "s3://[a-z0-9][\\.\\-a-z0-9]{1,61}[a-z0-9](/.*)?",
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "S3Uri"
                                    ],
                                    "type": "object"
                                },
                                "EntityTypes": {
                                    "description": "The entity types in the input data for an entity recognizer.",
                                    "items": {
                                        "description": "Information about an individual item on a list of entity types.",
                                        "properties": {
                                            "Type": {
                                                "description": "Entity type of an item on an entity type list.",
                                                "maxLength": 64,
                                                "pattern": "[_A-Z0-9]+",
                                                "type": "string"
                                            }
                                        },
                                        "required": [
                                            "Type"
                                        ],
                                        "type": "object"
                                    },
                                    "type": "array"
                                }
                            },
                            "required": [
                                "EntityTypes",
                                "Documents"
                            ],
                            "type": "object"
                        },
                        "LanguageCode": {
                            "description": " The language of the input documents. All documents must be in the same language. Only English (\"en\") is currently supported.",
                            "enum": [
                                "en",
                                "es",
                                "fr",
                                "de",
                                "it",
                                "pt"
                            ],
                            "type": "string"
                        },
                        "Message": {
                            "description": " A description of the status of the recognizer.",
                            "type": "string"
                        },
                        "RecognizerMetadata": {
                            "description": " Provides information about an entity recognizer.",
                            "properties": {
                                "EntityTypes": {
                                    "description": "Entity types from the metadata of an entity recognizer.",
                                    "items": {
                                        "description": "Individual item from the list of entity types in the metadata of an entity recognizer.",
                                        "properties": {
                                            "Type": {
                                                "description": "Type of entity from the list of entity types in the metadata of an entity recognizer. ",
                                                "type": "string"
                                            }
                                        },
                                        "type": "object"
                                    },
                                    "type": "array"
                                },
                                "EvaluationMetrics": {
                                    "description": " Detailed information about the accuracy of an entity recognizer.",
                                    "properties": {
                                        "F1Score": {
                                            "description": "A measure of how accurate the recognizer results are for the test data. It is derived from the <code>Precision</code> and <code>Recall</code> values. The <code>F1Score</code> is the harmonic average of the two scores. The highest score is 1, and the worst score is 0. ",
                                            "format": "double",
                                            "type": "number"
                                        },
                                        "Precision": {
                                            "description": "A measure of the usefulness of the recognizer results in the test data. High precision means that the recognizer returned substantially more relevant results than irrelevant ones. ",
                                            "format": "double",
                                            "type": "number"
                                        },
                                        "Recall": {
                                            "description": "A measure of how complete the recognizer results are for the test data. High recall means that the recognizer returned most of the relevant results.",
                                            "format": "double",
                                            "type": "number"
                                        }
                                    },
                                    "type": "object"
                                },
                                "NumberOfTestDocuments": {
                                    "description": " The number of documents in the input data that were used to test the entity recognizer. Typically this is 10 to 20 percent of the input documents.",
                                    "type": "integer"
                                },
                                "NumberOfTrainedDocuments": {
                                    "description": " The number of documents in the input data that were used to train the entity recognizer. Typically this is 80 to 90 percent of the input documents.",
                                    "type": "integer"
                                }
                            },
                            "type": "object"
                        },
                        "Status": {
                            "description": "Provides the status of the entity recognizer.",
                            "enum": [
                                "SUBMITTED",
                                "TRAINING",
                                "DELETING",
                                "STOP_REQUESTED",
                                "STOPPED",
                                "IN_ERROR",
                                "TRAINED"
                            ],
                            "type": "string"
                        },
                        "SubmitTime": {
                            "description": "The time that the recognizer was submitted for processing.",
                            "format": "date-time",
                            "type": "string"
                        },
                        "TrainingEndTime": {
                            "description": "The time that training of the entity recognizer was completed.",
                            "format": "date-time",
                            "type": "string"
                        },
                        "TrainingStartTime": {
                            "description": "The time that training of the entity recognizer started.",
                            "format": "date-time",
                            "type": "string"
                        }
                    },
                    "type": "object"
                },
                "type": "array"
            },
            "EntityType": {
                "enum": [
                    "PERSON",
                    "LOCATION",
                    "ORGANIZATION",
                    "COMMERCIAL_ITEM",
                    "EVENT",
                    "DATE",
                    "QUANTITY",
                    "TITLE",
                    "OTHER"
                ],
                "type": "string"
            },
            "EntityTypeName": {
                "maxLength": 64,
                "pattern": "[_A-Z0-9]+",
                "type": "string"
            },
            "EntityTypesList": {
                "items": {
                    "description": "Information about an individual item on a list of entity types.",
                    "properties": {
                        "Type": {
                            "description": "Entity type of an item on an entity type list.",
                            "maxLength": 64,
                            "pattern": "[_A-Z0-9]+",
                            "type": "string"
                        }
                    },
                    "required": [
                        "Type"
                    ],
                    "type": "object"
                },
                "type": "array"
            },
            "EntityTypesListItem": {
                "description": "Information about an individual item on a list of entity types.",
                "properties": {
                    "Type": {
                        "description": "Entity type of an item on an entity type list.",
                        "maxLength": 64,
                        "pattern": "[_A-Z0-9]+",
                        "type": "string"
                    }
                },
                "required": [
                    "Type"
                ],
                "type": "object"
            },
            "Float": {
                "format": "float",
                "type": "number"
            },
            "IamRoleArn": {
                "maxLength": 2048,
                "minLength": 20,
                "pattern": "arn:aws(-[^:]+)?:iam::[0-9]{12}:role/.+",
                "type": "string"
            },
            "InputDataConfig": {
                "description": "The input properties for a topic detection job.",
                "properties": {
                    "InputFormat": {
                        "description": "<p>Specifies how the text in an input file should be processed:</p> <ul> <li> <p> <code>ONE_DOC_PER_FILE</code> - Each file is considered a separate document. Use this option when you are processing large documents, such as newspaper articles or scientific papers.</p> </li> <li> <p> <code>ONE_DOC_PER_LINE</code> - Each line in a file is considered a separate document. Use this option when you are processing many short documents, such as text messages.</p> </li> </ul>",
                        "enum": [
                            "ONE_DOC_PER_FILE",
                            "ONE_DOC_PER_LINE"
                        ],
                        "type": "string"
                    },
                    "S3Uri": {
                        "description": "<p>The Amazon S3 URI for the input data. The URI must be in same region as the API endpoint that you are calling. The URI can point to a single input file or it can provide the prefix for a collection of data files. </p> <p>For example, if you use the URI <code>S3://bucketName/prefix</code>, if the prefix is a single file, Amazon Comprehend uses that file as input. If more than one file begins with the prefix, Amazon Comprehend uses all of them as input.</p>",
                        "maxLength": 1024,
                        "pattern": "s3://[a-z0-9][\\.\\-a-z0-9]{1,61}[a-z0-9](/.*)?",
                        "type": "string"
                    }
                },
                "required": [
                    "S3Uri"
                ],
                "type": "object"
            },
            "InputFormat": {
                "enum": [
                    "ONE_DOC_PER_FILE",
                    "ONE_DOC_PER_LINE"
                ],
                "type": "string"
            },
            "Integer": {
                "type": "integer"
            },
            "InternalServerException": {},
            "InvalidFilterException": {},
            "InvalidRequestException": {},
            "JobId": {
                "maxLength": 32,
                "minLength": 1,
                "pattern": "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-%@]*)$",
                "type": "string"
            },
            "JobName": {
                "maxLength": 256,
                "minLength": 1,
                "pattern": "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-%@]*)$",
                "type": "string"
            },
            "JobNotFoundException": {},
            "JobStatus": {
                "enum": [
                    "SUBMITTED",
                    "IN_PROGRESS",
                    "COMPLETED",
                    "FAILED",
                    "STOP_REQUESTED",
                    "STOPPED"
                ],
                "type": "string"
            },
            "KeyPhrase": {
                "description": "Describes a key noun phrase.",
                "properties": {
                    "BeginOffset": {
                        "description": "A character offset in the input text that shows where the key phrase begins (the first character is at position 0). The offset returns the position of each UTF-8 code point in the string. A <i>code point</i> is the abstract character from a particular graphical representation. For example, a multi-byte UTF-8 character maps to a single code point.",
                        "type": "integer"
                    },
                    "EndOffset": {
                        "description": "A character offset in the input text where the key phrase ends. The offset returns the position of each UTF-8 code point in the string. A <code>code point</code> is the abstract character from a particular graphical representation. For example, a multi-byte UTF-8 character maps to a single code point.",
                        "type": "integer"
                    },
                    "Score": {
                        "description": "The level of confidence that Amazon Comprehend has in the accuracy of the detection.",
                        "format": "float",
                        "type": "number"
                    },
                    "Text": {
                        "description": "The text of a key noun phrase.",
                        "minLength": 1,
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "KeyPhrasesDetectionJobFilter": {
                "description": "Provides information for filtering a list of dominant language detection jobs. For more information, see the operation.",
                "properties": {
                    "JobName": {
                        "description": "Filters on the name of the job.",
                        "maxLength": 256,
                        "minLength": 1,
                        "pattern": "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-%@]*)$",
                        "type": "string"
                    },
                    "JobStatus": {
                        "description": "Filters the list of jobs based on job status. Returns only jobs with the specified status.",
                        "enum": [
                            "SUBMITTED",
                            "IN_PROGRESS",
                            "COMPLETED",
                            "FAILED",
                            "STOP_REQUESTED",
                            "STOPPED"
                        ],
                        "type": "string"
                    },
                    "SubmitTimeAfter": {
                        "description": "Filters the list of jobs based on the time that the job was submitted for processing. Returns only jobs submitted after the specified time. Jobs are returned in descending order, newest to oldest.",
                        "format": "date-time",
                        "type": "string"
                    },
                    "SubmitTimeBefore": {
                        "description": "Filters the list of jobs based on the time that the job was submitted for processing. Returns only jobs submitted before the specified time. Jobs are returned in ascending order, oldest to newest.",
                        "format": "date-time",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "KeyPhrasesDetectionJobProperties": {
                "description": "Provides information about a key phrases detection job.",
                "properties": {
                    "DataAccessRoleArn": {
                        "description": "The Amazon Resource Name (ARN) that gives Amazon Comprehend read access to your input data.",
                        "maxLength": 2048,
                        "minLength": 20,
                        "pattern": "arn:aws(-[^:]+)?:iam::[0-9]{12}:role/.+",
                        "type": "string"
                    },
                    "EndTime": {
                        "description": "The time that the key phrases detection job completed.",
                        "format": "date-time",
                        "type": "string"
                    },
                    "InputDataConfig": {
                        "description": "The input data configuration that you supplied when you created the key phrases detection job.",
                        "properties": {
                            "InputFormat": {
                                "description": "<p>Specifies how the text in an input file should be processed:</p> <ul> <li> <p> <code>ONE_DOC_PER_FILE</code> - Each file is considered a separate document. Use this option when you are processing large documents, such as newspaper articles or scientific papers.</p> </li> <li> <p> <code>ONE_DOC_PER_LINE</code> - Each line in a file is considered a separate document. Use this option when you are processing many short documents, such as text messages.</p> </li> </ul>",
                                "enum": [
                                    "ONE_DOC_PER_FILE",
                                    "ONE_DOC_PER_LINE"
                                ],
                                "type": "string"
                            },
                            "S3Uri": {
                                "description": "<p>The Amazon S3 URI for the input data. The URI must be in same region as the API endpoint that you are calling. The URI can point to a single input file or it can provide the prefix for a collection of data files. </p> <p>For example, if you use the URI <code>S3://bucketName/prefix</code>, if the prefix is a single file, Amazon Comprehend uses that file as input. If more than one file begins with the prefix, Amazon Comprehend uses all of them as input.</p>",
                                "maxLength": 1024,
                                "pattern": "s3://[a-z0-9][\\.\\-a-z0-9]{1,61}[a-z0-9](/.*)?",
                                "type": "string"
                            }
                        },
                        "required": [
                            "S3Uri"
                        ],
                        "type": "object"
                    },
                    "JobId": {
                        "description": "The identifier assigned to the key phrases detection job.",
                        "maxLength": 32,
                        "minLength": 1,
                        "pattern": "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-%@]*)$",
                        "type": "string"
                    },
                    "JobName": {
                        "description": "The name that you assigned the key phrases detection job.",
                        "maxLength": 256,
                        "minLength": 1,
                        "pattern": "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-%@]*)$",
                        "type": "string"
                    },
                    "JobStatus": {
                        "description": "The current status of the key phrases detection job. If the status is <code>FAILED</code>, the <code>Message</code> field shows the reason for the failure.",
                        "enum": [
                            "SUBMITTED",
                            "IN_PROGRESS",
                            "COMPLETED",
                            "FAILED",
                            "STOP_REQUESTED",
                            "STOPPED"
                        ],
                        "type": "string"
                    },
                    "LanguageCode": {
                        "description": "The language code of the input documents.",
                        "enum": [
                            "en",
                            "es",
                            "fr",
                            "de",
                            "it",
                            "pt"
                        ],
                        "type": "string"
                    },
                    "Message": {
                        "description": "A description of the status of a job.",
                        "type": "string"
                    },
                    "OutputDataConfig": {
                        "description": "The output data configuration that you supplied when you created the key phrases detection job.",
                        "properties": {
                            "S3Uri": {
                                "description": "<p>When you use the <code>OutputDataConfig</code> object with asynchronous operations, you specify the Amazon S3 location where you want to write the output data. The URI must be in the same region as the API endpoint that you are calling. The location is used as the prefix for the actual location of the output file.</p> <p>When the topic detection job is finished, the service creates an output file in a directory specific to the job. The <code>S3Uri</code> field contains the location of the output file, called <code>output.tar.gz</code>. It is a compressed archive that contains the ouput of the operation.</p>",
                                "maxLength": 1024,
                                "pattern": "s3://[a-z0-9][\\.\\-a-z0-9]{1,61}[a-z0-9](/.*)?",
                                "type": "string"
                            }
                        },
                        "required": [
                            "S3Uri"
                        ],
                        "type": "object"
                    },
                    "SubmitTime": {
                        "description": "The time that the key phrases detection job was submitted for processing.",
                        "format": "date-time",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "KeyPhrasesDetectionJobPropertiesList": {
                "items": {
                    "description": "Provides information about a key phrases detection job.",
                    "properties": {
                        "DataAccessRoleArn": {
                            "description": "The Amazon Resource Name (ARN) that gives Amazon Comprehend read access to your input data.",
                            "maxLength": 2048,
                            "minLength": 20,
                            "pattern": "arn:aws(-[^:]+)?:iam::[0-9]{12}:role/.+",
                            "type": "string"
                        },
                        "EndTime": {
                            "description": "The time that the key phrases detection job completed.",
                            "format": "date-time",
                            "type": "string"
                        },
                        "InputDataConfig": {
                            "description": "The input data configuration that you supplied when you created the key phrases detection job.",
                            "properties": {
                                "InputFormat": {
                                    "description": "<p>Specifies how the text in an input file should be processed:</p> <ul> <li> <p> <code>ONE_DOC_PER_FILE</code> - Each file is considered a separate document. Use this option when you are processing large documents, such as newspaper articles or scientific papers.</p> </li> <li> <p> <code>ONE_DOC_PER_LINE</code> - Each line in a file is considered a separate document. Use this option when you are processing many short documents, such as text messages.</p> </li> </ul>",
                                    "enum": [
                                        "ONE_DOC_PER_FILE",
                                        "ONE_DOC_PER_LINE"
                                    ],
                                    "type": "string"
                                },
                                "S3Uri": {
                                    "description": "<p>The Amazon S3 URI for the input data. The URI must be in same region as the API endpoint that you are calling. The URI can point to a single input file or it can provide the prefix for a collection of data files. </p> <p>For example, if you use the URI <code>S3://bucketName/prefix</code>, if the prefix is a single file, Amazon Comprehend uses that file as input. If more than one file begins with the prefix, Amazon Comprehend uses all of them as input.</p>",
                                    "maxLength": 1024,
                                    "pattern": "s3://[a-z0-9][\\.\\-a-z0-9]{1,61}[a-z0-9](/.*)?",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "S3Uri"
                            ],
                            "type": "object"
                        },
                        "JobId": {
                            "description": "The identifier assigned to the key phrases detection job.",
                            "maxLength": 32,
                            "minLength": 1,
                            "pattern": "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-%@]*)$",
                            "type": "string"
                        },
                        "JobName": {
                            "description": "The name that you assigned the key phrases detection job.",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-%@]*)$",
                            "type": "string"
                        },
                        "JobStatus": {
                            "description": "The current status of the key phrases detection job. If the status is <code>FAILED</code>, the <code>Message</code> field shows the reason for the failure.",
                            "enum": [
                                "SUBMITTED",
                                "IN_PROGRESS",
                                "COMPLETED",
                                "FAILED",
                                "STOP_REQUESTED",
                                "STOPPED"
                            ],
                            "type": "string"
                        },
                        "LanguageCode": {
                            "description": "The language code of the input documents.",
                            "enum": [
                                "en",
                                "es",
                                "fr",
                                "de",
                                "it",
                                "pt"
                            ],
                            "type": "string"
                        },
                        "Message": {
                            "description": "A description of the status of a job.",
                            "type": "string"
                        },
                        "OutputDataConfig": {
                            "description": "The output data configuration that you supplied when you created the key phrases detection job.",
                            "properties": {
                                "S3Uri": {
                                    "description": "<p>When you use the <code>OutputDataConfig</code> object with asynchronous operations, you specify the Amazon S3 location where you want to write the output data. The URI must be in the same region as the API endpoint that you are calling. The location is used as the prefix for the actual location of the output file.</p> <p>When the topic detection job is finished, the service creates an output file in a directory specific to the job. The <code>S3Uri</code> field contains the location of the output file, called <code>output.tar.gz</code>. It is a compressed archive that contains the ouput of the operation.</p>",
                                    "maxLength": 1024,
                                    "pattern": "s3://[a-z0-9][\\.\\-a-z0-9]{1,61}[a-z0-9](/.*)?",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "S3Uri"
                            ],
                            "type": "object"
                        },
                        "SubmitTime": {
                            "description": "The time that the key phrases detection job was submitted for processing.",
                            "format": "date-time",
                            "type": "string"
                        }
                    },
                    "type": "object"
                },
                "type": "array"
            },
            "LanguageCode": {
                "enum": [
                    "en",
                    "es",
                    "fr",
                    "de",
                    "it",
                    "pt"
                ],
                "type": "string"
            },
            "ListDocumentClassificationJobsRequest": {
                "properties": {
                    "Filter": {
                        "description": "Filters the jobs that are returned. You can filter jobs on their names, status, or the date and time that they were submitted. You can only set one filter at a time.",
                        "properties": {
                            "JobName": {
                                "description": "Filters on the name of the job.",
                                "maxLength": 256,
                                "minLength": 1,
                                "pattern": "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-%@]*)$",
                                "type": "string"
                            },
                            "JobStatus": {
                                "description": "Filters the list based on job status. Returns only jobs with the specified status.",
                                "enum": [
                                    "SUBMITTED",
                                    "IN_PROGRESS",
                                    "COMPLETED",
                                    "FAILED",
                                    "STOP_REQUESTED",
                                    "STOPPED"
                                ],
                                "type": "string"
                            },
                            "SubmitTimeAfter": {
                                "description": "Filters the list of jobs based on the time that the job was submitted for processing. Returns only jobs submitted before the specified time. Jobs are returned in descending order, newest to oldest.",
                                "format": "date-time",
                                "type": "string"
                            },
                            "SubmitTimeBefore": {
                                "description": "Filters the list of jobs based on the time that the job was submitted for processing. Returns only jobs submitted after the specified time. Jobs are returned in ascending order, oldest to newest.",
                                "format": "date-time",
                                "type": "string"
                            }
                        },
                        "type": "object"
                    },
                    "MaxResults": {
                        "description": "The maximum number of results to return in each page. The default is 100.",
                        "maximum": 500,
                        "minimum": 1,
                        "type": "integer"
                    },
                    "NextToken": {
                        "description": "Identifies the next page of results to return.",
                        "minLength": 1,
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "ListDocumentClassificationJobsResponse": {
                "properties": {
                    "DocumentClassificationJobPropertiesList": {
                        "description": "A list containing the properties of each job returned.",
                        "items": {
                            "description": "Provides information about a document classification job.",
                            "properties": {
                                "DataAccessRoleArn": {
                                    "description": "The Amazon Resource Name (ARN) of the AWS identity and Access Management (IAM) role that grants Amazon Comprehend read access to your input data.",
                                    "maxLength": 2048,
                                    "minLength": 20,
                                    "pattern": "arn:aws(-[^:]+)?:iam::[0-9]{12}:role/.+",
                                    "type": "string"
                                },
                                "DocumentClassifierArn": {
                                    "description": "The Amazon Resource Name (ARN) that identifies the document classifier. ",
                                    "maxLength": 256,
                                    "pattern": "arn:aws:comprehend:[a-zA-Z0-9-]*:[0-9]{12}:document-classifier/[a-zA-Z0-9](-*[a-zA-Z0-9])*",
                                    "type": "string"
                                },
                                "EndTime": {
                                    "description": "The time that the document classification job completed.",
                                    "format": "date-time",
                                    "type": "string"
                                },
                                "InputDataConfig": {
                                    "description": "The input data configuration that you supplied when you created the document classification job.",
                                    "properties": {
                                        "InputFormat": {
                                            "description": "<p>Specifies how the text in an input file should be processed:</p> <ul> <li> <p> <code>ONE_DOC_PER_FILE</code> - Each file is considered a separate document. Use this option when you are processing large documents, such as newspaper articles or scientific papers.</p> </li> <li> <p> <code>ONE_DOC_PER_LINE</code> - Each line in a file is considered a separate document. Use this option when you are processing many short documents, such as text messages.</p> </li> </ul>",
                                            "enum": [
                                                "ONE_DOC_PER_FILE",
                                                "ONE_DOC_PER_LINE"
                                            ],
                                            "type": "string"
                                        },
                                        "S3Uri": {
                                            "description": "<p>The Amazon S3 URI for the input data. The URI must be in same region as the API endpoint that you are calling. The URI can point to a single input file or it can provide the prefix for a collection of data files. </p> <p>For example, if you use the URI <code>S3://bucketName/prefix</code>, if the prefix is a single file, Amazon Comprehend uses that file as input. If more than one file begins with the prefix, Amazon Comprehend uses all of them as input.</p>",
                                            "maxLength": 1024,
                                            "pattern": "s3://[a-z0-9][\\.\\-a-z0-9]{1,61}[a-z0-9](/.*)?",
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "S3Uri"
                                    ],
                                    "type": "object"
                                },
                                "JobId": {
                                    "description": "The identifier assigned to the document classification job.",
                                    "maxLength": 32,
                                    "minLength": 1,
                                    "pattern": "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-%@]*)$",
                                    "type": "string"
                                },
                                "JobName": {
                                    "description": "The name that you assigned to the document classification job.",
                                    "maxLength": 256,
                                    "minLength": 1,
                                    "pattern": "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-%@]*)$",
                                    "type": "string"
                                },
                                "JobStatus": {
                                    "description": "The current status of the document classification job. If the status is <code>FAILED</code>, the <code>Message</code> field shows the reason for the failure.",
                                    "enum": [
                                        "SUBMITTED",
                                        "IN_PROGRESS",
                                        "COMPLETED",
                                        "FAILED",
                                        "STOP_REQUESTED",
                                        "STOPPED"
                                    ],
                                    "type": "string"
                                },
                                "Message": {
                                    "description": "A description of the status of the job.",
                                    "type": "string"
                                },
                                "OutputDataConfig": {
                                    "description": "The output data configuration that you supplied when you created the document classification job.",
                                    "properties": {
                                        "S3Uri": {
                                            "description": "<p>When you use the <code>OutputDataConfig</code> object with asynchronous operations, you specify the Amazon S3 location where you want to write the output data. The URI must be in the same region as the API endpoint that you are calling. The location is used as the prefix for the actual location of the output file.</p> <p>When the topic detection job is finished, the service creates an output file in a directory specific to the job. The <code>S3Uri</code> field contains the location of the output file, called <code>output.tar.gz</code>. It is a compressed archive that contains the ouput of the operation.</p>",
                                            "maxLength": 1024,
                                            "pattern": "s3://[a-z0-9][\\.\\-a-z0-9]{1,61}[a-z0-9](/.*)?",
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "S3Uri"
                                    ],
                                    "type": "object"
                                },
                                "SubmitTime": {
                                    "description": "The time that the document classification job was submitted for processing.",
                                    "format": "date-time",
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        },
                        "type": "array"
                    },
                    "NextToken": {
                        "description": "Identifies the next page of results to return.",
                        "minLength": 1,
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "ListDocumentClassifiersRequest": {
                "properties": {
                    "Filter": {
                        "description": "Filters the jobs that are returned. You can filter jobs on their name, status, or the date and time that they were submitted. You can only set one filter at a time.",
                        "properties": {
                            "Status": {
                                "description": "Filters the list of classifiers based on status. ",
                                "enum": [
                                    "SUBMITTED",
                                    "TRAINING",
                                    "DELETING",
                                    "STOP_REQUESTED",
                                    "STOPPED",
                                    "IN_ERROR",
                                    "TRAINED"
                                ],
                                "type": "string"
                            },
                            "SubmitTimeAfter": {
                                "description": "Filters the list of classifiers based on the time that the classifier was submitted for processing. Returns only classifiers submitted after the specified time. Classifiers are returned in descending order, newest to oldest.",
                                "format": "date-time",
                                "type": "string"
                            },
                            "SubmitTimeBefore": {
                                "description": "Filters the list of classifiers based on the time that the classifier was submitted for processing. Returns only classifiers submitted before the specified time. Classifiers are returned in ascending order, oldest to newest.",
                                "format": "date-time",
                                "type": "string"
                            }
                        },
                        "type": "object"
                    },
                    "MaxResults": {
                        "description": "The maximum number of results to return in each page. The default is 100.",
                        "maximum": 500,
                        "minimum": 1,
                        "type": "integer"
                    },
                    "NextToken": {
                        "description": "Identifies the next page of results to return.",
                        "minLength": 1,
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "ListDocumentClassifiersResponse": {
                "properties": {
                    "DocumentClassifierPropertiesList": {
                        "description": "A list containing the properties of each job returned.",
                        "items": {
                            "description": "Provides information about a document classifier.",
                            "properties": {
                                "ClassifierMetadata": {
                                    "description": "Information about the document classifier, including the number of documents used for training the classifier, the number of documents used for test the classifier, and an accuracy rating.",
                                    "properties": {
                                        "EvaluationMetrics": {
                                            "description": " Describes the result metrics for the test data associated with an documentation classifier.",
                                            "properties": {
                                                "Accuracy": {
                                                    "description": "The fraction of the labels that were correct recognized. It is computed by dividing the number of labels in the test documents that were correctly recognized by the total number of labels in the test documents.",
                                                    "format": "double",
                                                    "type": "number"
                                                },
                                                "F1Score": {
                                                    "description": "A measure of how accurate the classifier results are for the test data. It is derived from the <code>Precision</code> and <code>Recall</code> values. The <code>F1Score</code> is the harmonic average of the two scores. The highest score is 1, and the worst score is 0. ",
                                                    "format": "double",
                                                    "type": "number"
                                                },
                                                "Precision": {
                                                    "description": "A measure of the usefulness of the classifier results in the test data. High precision means that the classifier returned substantially more relevant results than irrelevant ones.",
                                                    "format": "double",
                                                    "type": "number"
                                                },
                                                "Recall": {
                                                    "description": "A measure of how complete the classifier results are for the test data. High recall means that the classifier returned most of the relevant results. ",
                                                    "format": "double",
                                                    "type": "number"
                                                }
                                            },
                                            "type": "object"
                                        },
                                        "NumberOfLabels": {
                                            "description": "The number of labels in the input data. ",
                                            "type": "integer"
                                        },
                                        "NumberOfTestDocuments": {
                                            "description": "The number of documents in the input data that were used to test the classifier. Typically this is 10 to 20 percent of the input documents.",
                                            "type": "integer"
                                        },
                                        "NumberOfTrainedDocuments": {
                                            "description": "The number of documents in the input data that were used to train the classifier. Typically this is 80 to 90 percent of the input documents.",
                                            "type": "integer"
                                        }
                                    },
                                    "type": "object"
                                },
                                "DataAccessRoleArn": {
                                    "description": "The Amazon Resource Name (ARN) of the AWS Identity and Management (IAM) role that grants Amazon Comprehend read access to your input data.",
                                    "maxLength": 2048,
                                    "minLength": 20,
                                    "pattern": "arn:aws(-[^:]+)?:iam::[0-9]{12}:role/.+",
                                    "type": "string"
                                },
                                "DocumentClassifierArn": {
                                    "description": "The Amazon Resource Name (ARN) that identifies the document classifier.",
                                    "maxLength": 256,
                                    "pattern": "arn:aws:comprehend:[a-zA-Z0-9-]*:[0-9]{12}:document-classifier/[a-zA-Z0-9](-*[a-zA-Z0-9])*",
                                    "type": "string"
                                },
                                "EndTime": {
                                    "description": "The time that training the document classifier completed.",
                                    "format": "date-time",
                                    "type": "string"
                                },
                                "InputDataConfig": {
                                    "description": "The input data configuration that you supplied when you created the document classifier for training.",
                                    "properties": {
                                        "S3Uri": {
                                            "description": "<p>The Amazon S3 URI for the input data. The S3 bucket must be in the same region as the API endpoint that you are calling. The URI can point to a single input file or it can provide the prefix for a collection of input files.</p> <p>For example, if you use the URI <code>S3://bucketName/prefix</code>, if the prefix is a single file, Amazon Comprehend uses that file as input. If more than one file begins with the prefix, Amazon Comprehend uses all of them as input.</p>",
                                            "maxLength": 1024,
                                            "pattern": "s3://[a-z0-9][\\.\\-a-z0-9]{1,61}[a-z0-9](/.*)?",
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "S3Uri"
                                    ],
                                    "type": "object"
                                },
                                "LanguageCode": {
                                    "description": "The language code for the language of the documents that the classifier was trained on.",
                                    "enum": [
                                        "en",
                                        "es",
                                        "fr",
                                        "de",
                                        "it",
                                        "pt"
                                    ],
                                    "type": "string"
                                },
                                "Message": {
                                    "description": "Additional information about the status of the classifier.",
                                    "type": "string"
                                },
                                "Status": {
                                    "description": "The status of the document classifier. If the status is <code>TRAINED</code> the classifier is ready to use. If the status is <code>FAILED</code> you can see additional information about why the classifier wasn't trained in the <code>Message</code> field.",
                                    "enum": [
                                        "SUBMITTED",
                                        "TRAINING",
                                        "DELETING",
                                        "STOP_REQUESTED",
                                        "STOPPED",
                                        "IN_ERROR",
                                        "TRAINED"
                                    ],
                                    "type": "string"
                                },
                                "SubmitTime": {
                                    "description": "The time that the document classifier was submitted for training.",
                                    "format": "date-time",
                                    "type": "string"
                                },
                                "TrainingEndTime": {
                                    "description": "The time that training of the document classifier was completed. Indicates the time when the training completes on documentation classifiers. You are billed for the time interval between this time and the value of TrainingStartTime.",
                                    "format": "date-time",
                                    "type": "string"
                                },
                                "TrainingStartTime": {
                                    "description": "Indicates the time when the training starts on documentation classifiers. You are billed for the time interval between this time and the value of TrainingEndTime. ",
                                    "format": "date-time",
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        },
                        "type": "array"
                    },
                    "NextToken": {
                        "description": "Identifies the next page of results to return.",
                        "minLength": 1,
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "ListDominantLanguageDetectionJobsRequest": {
                "properties": {
                    "Filter": {
                        "description": "Filters that jobs that are returned. You can filter jobs on their name, status, or the date and time that they were submitted. You can only set one filter at a time.",
                        "properties": {
                            "JobName": {
                                "description": "Filters on the name of the job.",
                                "maxLength": 256,
                                "minLength": 1,
                                "pattern": "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-%@]*)$",
                                "type": "string"
                            },
                            "JobStatus": {
                                "description": "Filters the list of jobs based on job status. Returns only jobs with the specified status.",
                                "enum": [
                                    "SUBMITTED",
                                    "IN_PROGRESS",
                                    "COMPLETED",
                                    "FAILED",
                                    "STOP_REQUESTED",
                                    "STOPPED"
                                ],
                                "type": "string"
                            },
                            "SubmitTimeAfter": {
                                "description": "Filters the list of jobs based on the time that the job was submitted for processing. Returns only jobs submitted after the specified time. Jobs are returned in descending order, newest to oldest.",
                                "format": "date-time",
                                "type": "string"
                            },
                            "SubmitTimeBefore": {
                                "description": "Filters the list of jobs based on the time that the job was submitted for processing. Returns only jobs submitted before the specified time. Jobs are returned in ascending order, oldest to newest.",
                                "format": "date-time",
                                "type": "string"
                            }
                        },
                        "type": "object"
                    },
                    "MaxResults": {
                        "description": "The maximum number of results to return in each page. The default is 100.",
                        "maximum": 500,
                        "minimum": 1,
                        "type": "integer"
                    },
                    "NextToken": {
                        "description": "Identifies the next page of results to return.",
                        "minLength": 1,
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "ListDominantLanguageDetectionJobsResponse": {
                "properties": {
                    "DominantLanguageDetectionJobPropertiesList": {
                        "description": "A list containing the properties of each job that is returned.",
                        "items": {
                            "description": "Provides information about a dominant language detection job.",
                            "properties": {
                                "DataAccessRoleArn": {
                                    "description": "The Amazon Resource Name (ARN) that gives Amazon Comprehend read access to your input data.",
                                    "maxLength": 2048,
                                    "minLength": 20,
                                    "pattern": "arn:aws(-[^:]+)?:iam::[0-9]{12}:role/.+",
                                    "type": "string"
                                },
                                "EndTime": {
                                    "description": "The time that the dominant language detection job completed.",
                                    "format": "date-time",
                                    "type": "string"
                                },
                                "InputDataConfig": {
                                    "description": "The input data configuration that you supplied when you created the dominant language detection job.",
                                    "properties": {
                                        "InputFormat": {
                                            "description": "<p>Specifies how the text in an input file should be processed:</p> <ul> <li> <p> <code>ONE_DOC_PER_FILE</code> - Each file is considered a separate document. Use this option when you are processing large documents, such as newspaper articles or scientific papers.</p> </li> <li> <p> <code>ONE_DOC_PER_LINE</code> - Each line in a file is considered a separate document. Use this option when you are processing many short documents, such as text messages.</p> </li> </ul>",
                                            "enum": [
                                                "ONE_DOC_PER_FILE",
                                                "ONE_DOC_PER_LINE"
                                            ],
                                            "type": "string"
                                        },
                                        "S3Uri": {
                                            "description": "<p>The Amazon S3 URI for the input data. The URI must be in same region as the API endpoint that you are calling. The URI can point to a single input file or it can provide the prefix for a collection of data files. </p> <p>For example, if you use the URI <code>S3://bucketName/prefix</code>, if the prefix is a single file, Amazon Comprehend uses that file as input. If more than one file begins with the prefix, Amazon Comprehend uses all of them as input.</p>",
                                            "maxLength": 1024,
                                            "pattern": "s3://[a-z0-9][\\.\\-a-z0-9]{1,61}[a-z0-9](/.*)?",
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "S3Uri"
                                    ],
                                    "type": "object"
                                },
                                "JobId": {
                                    "description": "The identifier assigned to the dominant language detection job.",
                                    "maxLength": 32,
                                    "minLength": 1,
                                    "pattern": "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-%@]*)$",
                                    "type": "string"
                                },
                                "JobName": {
                                    "description": "The name that you assigned to the dominant language detection job.",
                                    "maxLength": 256,
                                    "minLength": 1,
                                    "pattern": "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-%@]*)$",
                                    "type": "string"
                                },
                                "JobStatus": {
                                    "description": "The current status of the dominant language detection job. If the status is <code>FAILED</code>, the <code>Message</code> field shows the reason for the failure.",
                                    "enum": [
                                        "SUBMITTED",
                                        "IN_PROGRESS",
                                        "COMPLETED",
                                        "FAILED",
                                        "STOP_REQUESTED",
                                        "STOPPED"
                                    ],
                                    "type": "string"
                                },
                                "Message": {
                                    "description": "A description for the status of a job.",
                                    "type": "string"
                                },
                                "OutputDataConfig": {
                                    "description": "The output data configuration that you supplied when you created the dominant language detection job.",
                                    "properties": {
                                        "S3Uri": {
                                            "description": "<p>When you use the <code>OutputDataConfig</code> object with asynchronous operations, you specify the Amazon S3 location where you want to write the output data. The URI must be in the same region as the API endpoint that you are calling. The location is used as the prefix for the actual location of the output file.</p> <p>When the topic detection job is finished, the service creates an output file in a directory specific to the job. The <code>S3Uri</code> field contains the location of the output file, called <code>output.tar.gz</code>. It is a compressed archive that contains the ouput of the operation.</p>",
                                            "maxLength": 1024,
                                            "pattern": "s3://[a-z0-9][\\.\\-a-z0-9]{1,61}[a-z0-9](/.*)?",
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "S3Uri"
                                    ],
                                    "type": "object"
                                },
                                "SubmitTime": {
                                    "description": "The time that the dominant language detection job was submitted for processing.",
                                    "format": "date-time",
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        },
                        "type": "array"
                    },
                    "NextToken": {
                        "description": "Identifies the next page of results to return.",
                        "minLength": 1,
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "ListEntitiesDetectionJobsRequest": {
                "properties": {
                    "Filter": {
                        "description": "Filters the jobs that are returned. You can filter jobs on their name, status, or the date and time that they were submitted. You can only set one filter at a time.",
                        "properties": {
                            "JobName": {
                                "description": "Filters on the name of the job.",
                                "maxLength": 256,
                                "minLength": 1,
                                "pattern": "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-%@]*)$",
                                "type": "string"
                            },
                            "JobStatus": {
                                "description": "Filters the list of jobs based on job status. Returns only jobs with the specified status.",
                                "enum": [
                                    "SUBMITTED",
                                    "IN_PROGRESS",
                                    "COMPLETED",
                                    "FAILED",
                                    "STOP_REQUESTED",
                                    "STOPPED"
                                ],
                                "type": "string"
                            },
                            "SubmitTimeAfter": {
                                "description": "Filters the list of jobs based on the time that the job was submitted for processing. Returns only jobs submitted after the specified time. Jobs are returned in descending order, newest to oldest.",
                                "format": "date-time",
                                "type": "string"
                            },
                            "SubmitTimeBefore": {
                                "description": "Filters the list of jobs based on the time that the job was submitted for processing. Returns only jobs submitted before the specified time. Jobs are returned in ascending order, oldest to newest.",
                                "format": "date-time",
                                "type": "string"
                            }
                        },
                        "type": "object"
                    },
                    "MaxResults": {
                        "description": "The maximum number of results to return in each page. The default is 100.",
                        "maximum": 500,
                        "minimum": 1,
                        "type": "integer"
                    },
                    "NextToken": {
                        "description": "Identifies the next page of results to return.",
                        "minLength": 1,
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "ListEntitiesDetectionJobsResponse": {
                "properties": {
                    "EntitiesDetectionJobPropertiesList": {
                        "description": "A list containing the properties of each job that is returned.",
                        "items": {
                            "description": "Provides information about an entities detection job.",
                            "properties": {
                                "DataAccessRoleArn": {
                                    "description": "The Amazon Resource Name (ARN) that gives Amazon Comprehend read access to your input data.",
                                    "maxLength": 2048,
                                    "minLength": 20,
                                    "pattern": "arn:aws(-[^:]+)?:iam::[0-9]{12}:role/.+",
                                    "type": "string"
                                },
                                "EndTime": {
                                    "description": "The time that the entities detection job completed",
                                    "format": "date-time",
                                    "type": "string"
                                },
                                "EntityRecognizerArn": {
                                    "description": "The Amazon Resource Name (ARN) that identifies the entity recognizer.",
                                    "maxLength": 256,
                                    "pattern": "arn:aws:comprehend:[a-zA-Z0-9-]*:[0-9]{12}:entity-recognizer/[a-zA-Z0-9](-*[a-zA-Z0-9])*",
                                    "type": "string"
                                },
                                "InputDataConfig": {
                                    "description": "The input data configuration that you supplied when you created the entities detection job.",
                                    "properties": {
                                        "InputFormat": {
                                            "description": "<p>Specifies how the text in an input file should be processed:</p> <ul> <li> <p> <code>ONE_DOC_PER_FILE</code> - Each file is considered a separate document. Use this option when you are processing large documents, such as newspaper articles or scientific papers.</p> </li> <li> <p> <code>ONE_DOC_PER_LINE</code> - Each line in a file is considered a separate document. Use this option when you are processing many short documents, such as text messages.</p> </li> </ul>",
                                            "enum": [
                                                "ONE_DOC_PER_FILE",
                                                "ONE_DOC_PER_LINE"
                                            ],
                                            "type": "string"
                                        },
                                        "S3Uri": {
                                            "description": "<p>The Amazon S3 URI for the input data. The URI must be in same region as the API endpoint that you are calling. The URI can point to a single input file or it can provide the prefix for a collection of data files. </p> <p>For example, if you use the URI <code>S3://bucketName/prefix</code>, if the prefix is a single file, Amazon Comprehend uses that file as input. If more than one file begins with the prefix, Amazon Comprehend uses all of them as input.</p>",
                                            "maxLength": 1024,
                                            "pattern": "s3://[a-z0-9][\\.\\-a-z0-9]{1,61}[a-z0-9](/.*)?",
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "S3Uri"
                                    ],
                                    "type": "object"
                                },
                                "JobId": {
                                    "description": "The identifier assigned to the entities detection job.",
                                    "maxLength": 32,
                                    "minLength": 1,
                                    "pattern": "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-%@]*)$",
                                    "type": "string"
                                },
                                "JobName": {
                                    "description": "The name that you assigned the entities detection job.",
                                    "maxLength": 256,
                                    "minLength": 1,
                                    "pattern": "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-%@]*)$",
                                    "type": "string"
                                },
                                "JobStatus": {
                                    "description": "The current status of the entities detection job. If the status is <code>FAILED</code>, the <code>Message</code> field shows the reason for the failure.",
                                    "enum": [
                                        "SUBMITTED",
                                        "IN_PROGRESS",
                                        "COMPLETED",
                                        "FAILED",
                                        "STOP_REQUESTED",
                                        "STOPPED"
                                    ],
                                    "type": "string"
                                },
                                "LanguageCode": {
                                    "description": "The language code of the input documents.",
                                    "enum": [
                                        "en",
                                        "es",
                                        "fr",
                                        "de",
                                        "it",
                                        "pt"
                                    ],
                                    "type": "string"
                                },
                                "Message": {
                                    "description": "A description of the status of a job.",
                                    "type": "string"
                                },
                                "OutputDataConfig": {
                                    "description": "The output data configuration that you supplied when you created the entities detection job. ",
                                    "properties": {
                                        "S3Uri": {
                                            "description": "<p>When you use the <code>OutputDataConfig</code> object with asynchronous operations, you specify the Amazon S3 location where you want to write the output data. The URI must be in the same region as the API endpoint that you are calling. The location is used as the prefix for the actual location of the output file.</p> <p>When the topic detection job is finished, the service creates an output file in a directory specific to the job. The <code>S3Uri</code> field contains the location of the output file, called <code>output.tar.gz</code>. It is a compressed archive that contains the ouput of the operation.</p>",
                                            "maxLength": 1024,
                                            "pattern": "s3://[a-z0-9][\\.\\-a-z0-9]{1,61}[a-z0-9](/.*)?",
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "S3Uri"
                                    ],
                                    "type": "object"
                                },
                                "SubmitTime": {
                                    "description": "The time that the entities detection job was submitted for processing.",
                                    "format": "date-time",
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        },
                        "type": "array"
                    },
                    "NextToken": {
                        "description": "Identifies the next page of results to return.",
                        "minLength": 1,
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "ListEntityRecognizersRequest": {
                "properties": {
                    "Filter": {
                        "description": "Filters the list of entities returned. You can filter on <code>Status</code>, <code>SubmitTimeBefore</code>, or <code>SubmitTimeAfter</code>. You can only set one filter at a time.",
                        "properties": {
                            "Status": {
                                "description": "The status of an entity recognizer.",
                                "enum": [
                                    "SUBMITTED",
                                    "TRAINING",
                                    "DELETING",
                                    "STOP_REQUESTED",
                                    "STOPPED",
                                    "IN_ERROR",
                                    "TRAINED"
                                ],
                                "type": "string"
                            },
                            "SubmitTimeAfter": {
                                "description": "Filters the list of entities based on the time that the list was submitted for processing. Returns only jobs submitted after the specified time. Jobs are returned in ascending order, oldest to newest.",
                                "format": "date-time",
                                "type": "string"
                            },
                            "SubmitTimeBefore": {
                                "description": "Filters the list of entities based on the time that the list was submitted for processing. Returns only jobs submitted before the specified time. Jobs are returned in descending order, newest to oldest.",
                                "format": "date-time",
                                "type": "string"
                            }
                        },
                        "type": "object"
                    },
                    "MaxResults": {
                        "description": " The maximum number of results to return on each page. The default is 100.",
                        "maximum": 500,
                        "minimum": 1,
                        "type": "integer"
                    },
                    "NextToken": {
                        "description": "Identifies the next page of results to return.",
                        "minLength": 1,
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "ListEntityRecognizersResponse": {
                "properties": {
                    "EntityRecognizerPropertiesList": {
                        "description": "The list of properties of an entity recognizer.",
                        "items": {
                            "description": "Describes information about an entity recognizer.",
                            "properties": {
                                "DataAccessRoleArn": {
                                    "description": " The Amazon Resource Name (ARN) of the AWS Identity and Management (IAM) role that grants Amazon Comprehend read access to your input data.",
                                    "maxLength": 2048,
                                    "minLength": 20,
                                    "pattern": "arn:aws(-[^:]+)?:iam::[0-9]{12}:role/.+",
                                    "type": "string"
                                },
                                "EndTime": {
                                    "description": "The time that the recognizer creation completed.",
                                    "format": "date-time",
                                    "type": "string"
                                },
                                "EntityRecognizerArn": {
                                    "description": "The Amazon Resource Name (ARN) that identifies the entity recognizer.",
                                    "maxLength": 256,
                                    "pattern": "arn:aws:comprehend:[a-zA-Z0-9-]*:[0-9]{12}:entity-recognizer/[a-zA-Z0-9](-*[a-zA-Z0-9])*",
                                    "type": "string"
                                },
                                "InputDataConfig": {
                                    "description": "The input data properties of an entity recognizer.",
                                    "properties": {
                                        "Annotations": {
                                            "description": "S3 location of the annotations file for an entity recognizer.",
                                            "properties": {
                                                "S3Uri": {
                                                    "description": " Specifies the Amazon S3 location where the annotations for an entity recognizer are located. The URI must be in the same region as the API endpoint that you are calling.",
                                                    "maxLength": 1024,
                                                    "pattern": "s3://[a-z0-9][\\.\\-a-z0-9]{1,61}[a-z0-9](/.*)?",
                                                    "type": "string"
                                                }
                                            },
                                            "required": [
                                                "S3Uri"
                                            ],
                                            "type": "object"
                                        },
                                        "Documents": {
                                            "description": "S3 location of the documents folder for an entity recognizer",
                                            "properties": {
                                                "S3Uri": {
                                                    "description": " Specifies the Amazon S3 location where the training documents for an entity recognizer are located. The URI must be in the same region as the API endpoint that you are calling.",
                                                    "maxLength": 1024,
                                                    "pattern": "s3://[a-z0-9][\\.\\-a-z0-9]{1,61}[a-z0-9](/.*)?",
                                                    "type": "string"
                                                }
                                            },
                                            "required": [
                                                "S3Uri"
                                            ],
                                            "type": "object"
                                        },
                                        "EntityList": {
                                            "description": "S3 location of the entity list for an entity recognizer.",
                                            "properties": {
                                                "S3Uri": {
                                                    "description": "Specifies the Amazon S3 location where the entity list is located. The URI must be in the same region as the API endpoint that you are calling.",
                                                    "maxLength": 1024,
                                                    "pattern": "s3://[a-z0-9][\\.\\-a-z0-9]{1,61}[a-z0-9](/.*)?",
                                                    "type": "string"
                                                }
                                            },
                                            "required": [
                                                "S3Uri"
                                            ],
                                            "type": "object"
                                        },
                                        "EntityTypes": {
                                            "description": "The entity types in the input data for an entity recognizer.",
                                            "items": {
                                                "description": "Information about an individual item on a list of entity types.",
                                                "properties": {
                                                    "Type": {
                                                        "description": "Entity type of an item on an entity type list.",
                                                        "maxLength": 64,
                                                        "pattern": "[_A-Z0-9]+",
                                                        "type": "string"
                                                    }
                                                },
                                                "required": [
                                                    "Type"
                                                ],
                                                "type": "object"
                                            },
                                            "type": "array"
                                        }
                                    },
                                    "required": [
                                        "EntityTypes",
                                        "Documents"
                                    ],
                                    "type": "object"
                                },
                                "LanguageCode": {
                                    "description": " The language of the input documents. All documents must be in the same language. Only English (\"en\") is currently supported.",
                                    "enum": [
                                        "en",
                                        "es",
                                        "fr",
                                        "de",
                                        "it",
                                        "pt"
                                    ],
                                    "type": "string"
                                },
                                "Message": {
                                    "description": " A description of the status of the recognizer.",
                                    "type": "string"
                                },
                                "RecognizerMetadata": {
                                    "description": " Provides information about an entity recognizer.",
                                    "properties": {
                                        "EntityTypes": {
                                            "description": "Entity types from the metadata of an entity recognizer.",
                                            "items": {
                                                "description": "Individual item from the list of entity types in the metadata of an entity recognizer.",
                                                "properties": {
                                                    "Type": {
                                                        "description": "Type of entity from the list of entity types in the metadata of an entity recognizer. ",
                                                        "type": "string"
                                                    }
                                                },
                                                "type": "object"
                                            },
                                            "type": "array"
                                        },
                                        "EvaluationMetrics": {
                                            "description": " Detailed information about the accuracy of an entity recognizer.",
                                            "properties": {
                                                "F1Score": {
                                                    "description": "A measure of how accurate the recognizer results are for the test data. It is derived from the <code>Precision</code> and <code>Recall</code> values. The <code>F1Score</code> is the harmonic average of the two scores. The highest score is 1, and the worst score is 0. ",
                                                    "format": "double",
                                                    "type": "number"
                                                },
                                                "Precision": {
                                                    "description": "A measure of the usefulness of the recognizer results in the test data. High precision means that the recognizer returned substantially more relevant results than irrelevant ones. ",
                                                    "format": "double",
                                                    "type": "number"
                                                },
                                                "Recall": {
                                                    "description": "A measure of how complete the recognizer results are for the test data. High recall means that the recognizer returned most of the relevant results.",
                                                    "format": "double",
                                                    "type": "number"
                                                }
                                            },
                                            "type": "object"
                                        },
                                        "NumberOfTestDocuments": {
                                            "description": " The number of documents in the input data that were used to test the entity recognizer. Typically this is 10 to 20 percent of the input documents.",
                                            "type": "integer"
                                        },
                                        "NumberOfTrainedDocuments": {
                                            "description": " The number of documents in the input data that were used to train the entity recognizer. Typically this is 80 to 90 percent of the input documents.",
                                            "type": "integer"
                                        }
                                    },
                                    "type": "object"
                                },
                                "Status": {
                                    "description": "Provides the status of the entity recognizer.",
                                    "enum": [
                                        "SUBMITTED",
                                        "TRAINING",
                                        "DELETING",
                                        "STOP_REQUESTED",
                                        "STOPPED",
                                        "IN_ERROR",
                                        "TRAINED"
                                    ],
                                    "type": "string"
                                },
                                "SubmitTime": {
                                    "description": "The time that the recognizer was submitted for processing.",
                                    "format": "date-time",
                                    "type": "string"
                                },
                                "TrainingEndTime": {
                                    "description": "The time that training of the entity recognizer was completed.",
                                    "format": "date-time",
                                    "type": "string"
                                },
                                "TrainingStartTime": {
                                    "description": "The time that training of the entity recognizer started.",
                                    "format": "date-time",
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        },
                        "type": "array"
                    },
                    "NextToken": {
                        "description": "Identifies the next page of results to return.",
                        "minLength": 1,
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "ListKeyPhrasesDetectionJobsRequest": {
                "properties": {
                    "Filter": {
                        "description": "Filters the jobs that are returned. You can filter jobs on their name, status, or the date and time that they were submitted. You can only set one filter at a time.",
                        "properties": {
                            "JobName": {
                                "description": "Filters on the name of the job.",
                                "maxLength": 256,
                                "minLength": 1,
                                "pattern": "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-%@]*)$",
                                "type": "string"
                            },
                            "JobStatus": {
                                "description": "Filters the list of jobs based on job status. Returns only jobs with the specified status.",
                                "enum": [
                                    "SUBMITTED",
                                    "IN_PROGRESS",
                                    "COMPLETED",
                                    "FAILED",
                                    "STOP_REQUESTED",
                                    "STOPPED"
                                ],
                                "type": "string"
                            },
                            "SubmitTimeAfter": {
                                "description": "Filters the list of jobs based on the time that the job was submitted for processing. Returns only jobs submitted after the specified time. Jobs are returned in descending order, newest to oldest.",
                                "format": "date-time",
                                "type": "string"
                            },
                            "SubmitTimeBefore": {
                                "description": "Filters the list of jobs based on the time that the job was submitted for processing. Returns only jobs submitted before the specified time. Jobs are returned in ascending order, oldest to newest.",
                                "format": "date-time",
                                "type": "string"
                            }
                        },
                        "type": "object"
                    },
                    "MaxResults": {
                        "description": "The maximum number of results to return in each page. The default is 100.",
                        "maximum": 500,
                        "minimum": 1,
                        "type": "integer"
                    },
                    "NextToken": {
                        "description": "Identifies the next page of results to return.",
                        "minLength": 1,
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "ListKeyPhrasesDetectionJobsResponse": {
                "properties": {
                    "KeyPhrasesDetectionJobPropertiesList": {
                        "description": "A list containing the properties of each job that is returned.",
                        "items": {
                            "description": "Provides information about a key phrases detection job.",
                            "properties": {
                                "DataAccessRoleArn": {
                                    "description": "The Amazon Resource Name (ARN) that gives Amazon Comprehend read access to your input data.",
                                    "maxLength": 2048,
                                    "minLength": 20,
                                    "pattern": "arn:aws(-[^:]+)?:iam::[0-9]{12}:role/.+",
                                    "type": "string"
                                },
                                "EndTime": {
                                    "description": "The time that the key phrases detection job completed.",
                                    "format": "date-time",
                                    "type": "string"
                                },
                                "InputDataConfig": {
                                    "description": "The input data configuration that you supplied when you created the key phrases detection job.",
                                    "properties": {
                                        "InputFormat": {
                                            "description": "<p>Specifies how the text in an input file should be processed:</p> <ul> <li> <p> <code>ONE_DOC_PER_FILE</code> - Each file is considered a separate document. Use this option when you are processing large documents, such as newspaper articles or scientific papers.</p> </li> <li> <p> <code>ONE_DOC_PER_LINE</code> - Each line in a file is considered a separate document. Use this option when you are processing many short documents, such as text messages.</p> </li> </ul>",
                                            "enum": [
                                                "ONE_DOC_PER_FILE",
                                                "ONE_DOC_PER_LINE"
                                            ],
                                            "type": "string"
                                        },
                                        "S3Uri": {
                                            "description": "<p>The Amazon S3 URI for the input data. The URI must be in same region as the API endpoint that you are calling. The URI can point to a single input file or it can provide the prefix for a collection of data files. </p> <p>For example, if you use the URI <code>S3://bucketName/prefix</code>, if the prefix is a single file, Amazon Comprehend uses that file as input. If more than one file begins with the prefix, Amazon Comprehend uses all of them as input.</p>",
                                            "maxLength": 1024,
                                            "pattern": "s3://[a-z0-9][\\.\\-a-z0-9]{1,61}[a-z0-9](/.*)?",
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "S3Uri"
                                    ],
                                    "type": "object"
                                },
                                "JobId": {
                                    "description": "The identifier assigned to the key phrases detection job.",
                                    "maxLength": 32,
                                    "minLength": 1,
                                    "pattern": "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-%@]*)$",
                                    "type": "string"
                                },
                                "JobName": {
                                    "description": "The name that you assigned the key phrases detection job.",
                                    "maxLength": 256,
                                    "minLength": 1,
                                    "pattern": "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-%@]*)$",
                                    "type": "string"
                                },
                                "JobStatus": {
                                    "description": "The current status of the key phrases detection job. If the status is <code>FAILED</code>, the <code>Message</code> field shows the reason for the failure.",
                                    "enum": [
                                        "SUBMITTED",
                                        "IN_PROGRESS",
                                        "COMPLETED",
                                        "FAILED",
                                        "STOP_REQUESTED",
                                        "STOPPED"
                                    ],
                                    "type": "string"
                                },
                                "LanguageCode": {
                                    "description": "The language code of the input documents.",
                                    "enum": [
                                        "en",
                                        "es",
                                        "fr",
                                        "de",
                                        "it",
                                        "pt"
                                    ],
                                    "type": "string"
                                },
                                "Message": {
                                    "description": "A description of the status of a job.",
                                    "type": "string"
                                },
                                "OutputDataConfig": {
                                    "description": "The output data configuration that you supplied when you created the key phrases detection job.",
                                    "properties": {
                                        "S3Uri": {
                                            "description": "<p>When you use the <code>OutputDataConfig</code> object with asynchronous operations, you specify the Amazon S3 location where you want to write the output data. The URI must be in the same region as the API endpoint that you are calling. The location is used as the prefix for the actual location of the output file.</p> <p>When the topic detection job is finished, the service creates an output file in a directory specific to the job. The <code>S3Uri</code> field contains the location of the output file, called <code>output.tar.gz</code>. It is a compressed archive that contains the ouput of the operation.</p>",
                                            "maxLength": 1024,
                                            "pattern": "s3://[a-z0-9][\\.\\-a-z0-9]{1,61}[a-z0-9](/.*)?",
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "S3Uri"
                                    ],
                                    "type": "object"
                                },
                                "SubmitTime": {
                                    "description": "The time that the key phrases detection job was submitted for processing.",
                                    "format": "date-time",
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        },
                        "type": "array"
                    },
                    "NextToken": {
                        "description": "Identifies the next page of results to return.",
                        "minLength": 1,
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "ListOfDetectDominantLanguageResult": {
                "items": {
                    "description": "The result of calling the operation. The operation returns one object for each document that is successfully processed by the operation.",
                    "properties": {
                        "Index": {
                            "description": "The zero-based index of the document in the input list.",
                            "type": "integer"
                        },
                        "Languages": {
                            "description": "One or more <a>DominantLanguage</a> objects describing the dominant languages in the document.",
                            "items": {
                                "description": "Returns the code for the dominant language in the input text and the level of confidence that Amazon Comprehend has in the accuracy of the detection.",
                                "properties": {
                                    "LanguageCode": {
                                        "description": "The RFC 5646 language code for the dominant language. For more information about RFC 5646, see <a href=\"https://tools.ietf.org/html/rfc5646\">Tags for Identifying Languages</a> on the <i>IETF Tools</i> web site.",
                                        "minLength": 1,
                                        "type": "string"
                                    },
                                    "Score": {
                                        "description": "The level of confidence that Amazon Comprehend has in the accuracy of the detection.",
                                        "format": "float",
                                        "type": "number"
                                    }
                                },
                                "type": "object"
                            },
                            "type": "array"
                        }
                    },
                    "type": "object"
                },
                "type": "array"
            },
            "ListOfDetectEntitiesResult": {
                "items": {
                    "description": "The result of calling the operation. The operation returns one object for each document that is successfully processed by the operation.",
                    "properties": {
                        "Entities": {
                            "description": "One or more <a>Entity</a> objects, one for each entity detected in the document.",
                            "items": {
                                "description": "<p>Provides information about an entity. </p> <p> </p>",
                                "properties": {
                                    "BeginOffset": {
                                        "description": "A character offset in the input text that shows where the entity begins (the first character is at position 0). The offset returns the position of each UTF-8 code point in the string. A <i>code point</i> is the abstract character from a particular graphical representation. For example, a multi-byte UTF-8 character maps to a single code point.",
                                        "type": "integer"
                                    },
                                    "EndOffset": {
                                        "description": "A character offset in the input text that shows where the entity ends. The offset returns the position of each UTF-8 code point in the string. A <i>code point</i> is the abstract character from a particular graphical representation. For example, a multi-byte UTF-8 character maps to a single code point. ",
                                        "type": "integer"
                                    },
                                    "Score": {
                                        "description": "The level of confidence that Amazon Comprehend has in the accuracy of the detection.",
                                        "format": "float",
                                        "type": "number"
                                    },
                                    "Text": {
                                        "description": "The text of the entity.",
                                        "minLength": 1,
                                        "type": "string"
                                    },
                                    "Type": {
                                        "description": "The entity's type.",
                                        "enum": [
                                            "PERSON",
                                            "LOCATION",
                                            "ORGANIZATION",
                                            "COMMERCIAL_ITEM",
                                            "EVENT",
                                            "DATE",
                                            "QUANTITY",
                                            "TITLE",
                                            "OTHER"
                                        ],
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            },
                            "type": "array"
                        },
                        "Index": {
                            "description": "The zero-based index of the document in the input list.",
                            "type": "integer"
                        }
                    },
                    "type": "object"
                },
                "type": "array"
            },
            "ListOfDetectKeyPhrasesResult": {
                "items": {
                    "description": "The result of calling the operation. The operation returns one object for each document that is successfully processed by the operation.",
                    "properties": {
                        "Index": {
                            "description": "The zero-based index of the document in the input list.",
                            "type": "integer"
                        },
                        "KeyPhrases": {
                            "description": "One or more <a>KeyPhrase</a> objects, one for each key phrase detected in the document.",
                            "items": {
                                "description": "Describes a key noun phrase.",
                                "properties": {
                                    "BeginOffset": {
                                        "description": "A character offset in the input text that shows where the key phrase begins (the first character is at position 0). The offset returns the position of each UTF-8 code point in the string. A <i>code point</i> is the abstract character from a particular graphical representation. For example, a multi-byte UTF-8 character maps to a single code point.",
                                        "type": "integer"
                                    },
                                    "EndOffset": {
                                        "description": "A character offset in the input text where the key phrase ends. The offset returns the position of each UTF-8 code point in the string. A <code>code point</code> is the abstract character from a particular graphical representation. For example, a multi-byte UTF-8 character maps to a single code point.",
                                        "type": "integer"
                                    },
                                    "Score": {
                                        "description": "The level of confidence that Amazon Comprehend has in the accuracy of the detection.",
                                        "format": "float",
                                        "type": "number"
                                    },
                                    "Text": {
                                        "description": "The text of a key noun phrase.",
                                        "minLength": 1,
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            },
                            "type": "array"
                        }
                    },
                    "type": "object"
                },
                "type": "array"
            },
            "ListOfDetectSentimentResult": {
                "items": {
                    "description": "The result of calling the operation. The operation returns one object for each document that is successfully processed by the operation.",
                    "properties": {
                        "Index": {
                            "description": "The zero-based index of the document in the input list.",
                            "type": "integer"
                        },
                        "Sentiment": {
                            "description": "The sentiment detected in the document.",
                            "enum": [
                                "POSITIVE",
                                "NEGATIVE",
                                "NEUTRAL",
                                "MIXED"
                            ],
                            "type": "string"
                        },
                        "SentimentScore": {
                            "description": "The level of confidence that Amazon Comprehend has in the accuracy of its sentiment detection.",
                            "properties": {
                                "Mixed": {
                                    "description": "The level of confidence that Amazon Comprehend has in the accuracy of its detection of the <code>MIXED</code> sentiment.",
                                    "format": "float",
                                    "type": "number"
                                },
                                "Negative": {
                                    "description": "The level of confidence that Amazon Comprehend has in the accuracy of its detection of the <code>NEGATIVE</code> sentiment.",
                                    "format": "float",
                                    "type": "number"
                                },
                                "Neutral": {
                                    "description": "The level of confidence that Amazon Comprehend has in the accuracy of its detection of the <code>NEUTRAL</code> sentiment.",
                                    "format": "float",
                                    "type": "number"
                                },
                                "Positive": {
                                    "description": "The level of confidence that Amazon Comprehend has in the accuracy of its detection of the <code>POSITIVE</code> sentiment.",
                                    "format": "float",
                                    "type": "number"
                                }
                            },
                            "type": "object"
                        }
                    },
                    "type": "object"
                },
                "type": "array"
            },
            "ListOfDetectSyntaxResult": {
                "items": {
                    "description": "The result of calling the operation. The operation returns one object that is successfully processed by the operation.",
                    "properties": {
                        "Index": {
                            "description": "The zero-based index of the document in the input list.",
                            "type": "integer"
                        },
                        "SyntaxTokens": {
                            "description": "The syntax tokens for the words in the document, one token for each word.",
                            "items": {
                                "description": "Represents a work in the input text that was recognized and assigned a part of speech. There is one syntax token record for each word in the source text.",
                                "properties": {
                                    "BeginOffset": {
                                        "description": "The zero-based offset from the beginning of the source text to the first character in the word.",
                                        "type": "integer"
                                    },
                                    "EndOffset": {
                                        "description": "The zero-based offset from the beginning of the source text to the last character in the word.",
                                        "type": "integer"
                                    },
                                    "PartOfSpeech": {
                                        "description": "Provides the part of speech label and the confidence level that Amazon Comprehend has that the part of speech was correctly identified. For more information, see <a>how-syntax</a>.",
                                        "properties": {
                                            "Score": {
                                                "description": "The confidence that Amazon Comprehend has that the part of speech was correctly identified.",
                                                "format": "float",
                                                "type": "number"
                                            },
                                            "Tag": {
                                                "description": "Identifies the part of speech that the token represents.",
                                                "enum": [
                                                    "ADJ",
                                                    "ADP",
                                                    "ADV",
                                                    "AUX",
                                                    "CONJ",
                                                    "CCONJ",
                                                    "DET",
                                                    "INTJ",
                                                    "NOUN",
                                                    "NUM",
                                                    "O",
                                                    "PART",
                                                    "PRON",
                                                    "PROPN",
                                                    "PUNCT",
                                                    "SCONJ",
                                                    "SYM",
                                                    "VERB"
                                                ],
                                                "type": "string"
                                            }
                                        },
                                        "type": "object"
                                    },
                                    "Text": {
                                        "description": "The word that was recognized in the source text.",
                                        "minLength": 1,
                                        "type": "string"
                                    },
                                    "TokenId": {
                                        "description": "A unique identifier for a token.",
                                        "type": "integer"
                                    }
                                },
                                "type": "object"
                            },
                            "type": "array"
                        }
                    },
                    "type": "object"
                },
                "type": "array"
            },
            "ListOfDominantLanguages": {
                "items": {
                    "description": "Returns the code for the dominant language in the input text and the level of confidence that Amazon Comprehend has in the accuracy of the detection.",
                    "properties": {
                        "LanguageCode": {
                            "description": "The RFC 5646 language code for the dominant language. For more information about RFC 5646, see <a href=\"https://tools.ietf.org/html/rfc5646\">Tags for Identifying Languages</a> on the <i>IETF Tools</i> web site.",
                            "minLength": 1,
                            "type": "string"
                        },
                        "Score": {
                            "description": "The level of confidence that Amazon Comprehend has in the accuracy of the detection.",
                            "format": "float",
                            "type": "number"
                        }
                    },
                    "type": "object"
                },
                "type": "array"
            },
            "ListOfEntities": {
                "items": {
                    "description": "<p>Provides information about an entity. </p> <p> </p>",
                    "properties": {
                        "BeginOffset": {
                            "description": "A character offset in the input text that shows where the entity begins (the first character is at position 0). The offset returns the position of each UTF-8 code point in the string. A <i>code point</i> is the abstract character from a particular graphical representation. For example, a multi-byte UTF-8 character maps to a single code point.",
                            "type": "integer"
                        },
                        "EndOffset": {
                            "description": "A character offset in the input text that shows where the entity ends. The offset returns the position of each UTF-8 code point in the string. A <i>code point</i> is the abstract character from a particular graphical representation. For example, a multi-byte UTF-8 character maps to a single code point. ",
                            "type": "integer"
                        },
                        "Score": {
                            "description": "The level of confidence that Amazon Comprehend has in the accuracy of the detection.",
                            "format": "float",
                            "type": "number"
                        },
                        "Text": {
                            "description": "The text of the entity.",
                            "minLength": 1,
                            "type": "string"
                        },
                        "Type": {
                            "description": "The entity's type.",
                            "enum": [
                                "PERSON",
                                "LOCATION",
                                "ORGANIZATION",
                                "COMMERCIAL_ITEM",
                                "EVENT",
                                "DATE",
                                "QUANTITY",
                                "TITLE",
                                "OTHER"
                            ],
                            "type": "string"
                        }
                    },
                    "type": "object"
                },
                "type": "array"
            },
            "ListOfKeyPhrases": {
                "items": {
                    "description": "Describes a key noun phrase.",
                    "properties": {
                        "BeginOffset": {
                            "description": "A character offset in the input text that shows where the key phrase begins (the first character is at position 0). The offset returns the position of each UTF-8 code point in the string. A <i>code point</i> is the abstract character from a particular graphical representation. For example, a multi-byte UTF-8 character maps to a single code point.",
                            "type": "integer"
                        },
                        "EndOffset": {
                            "description": "A character offset in the input text where the key phrase ends. The offset returns the position of each UTF-8 code point in the string. A <code>code point</code> is the abstract character from a particular graphical representation. For example, a multi-byte UTF-8 character maps to a single code point.",
                            "type": "integer"
                        },
                        "Score": {
                            "description": "The level of confidence that Amazon Comprehend has in the accuracy of the detection.",
                            "format": "float",
                            "type": "number"
                        },
                        "Text": {
                            "description": "The text of a key noun phrase.",
                            "minLength": 1,
                            "type": "string"
                        }
                    },
                    "type": "object"
                },
                "type": "array"
            },
            "ListOfSyntaxTokens": {
                "items": {
                    "description": "Represents a work in the input text that was recognized and assigned a part of speech. There is one syntax token record for each word in the source text.",
                    "properties": {
                        "BeginOffset": {
                            "description": "The zero-based offset from the beginning of the source text to the first character in the word.",
                            "type": "integer"
                        },
                        "EndOffset": {
                            "description": "The zero-based offset from the beginning of the source text to the last character in the word.",
                            "type": "integer"
                        },
                        "PartOfSpeech": {
                            "description": "Provides the part of speech label and the confidence level that Amazon Comprehend has that the part of speech was correctly identified. For more information, see <a>how-syntax</a>.",
                            "properties": {
                                "Score": {
                                    "description": "The confidence that Amazon Comprehend has that the part of speech was correctly identified.",
                                    "format": "float",
                                    "type": "number"
                                },
                                "Tag": {
                                    "description": "Identifies the part of speech that the token represents.",
                                    "enum": [
                                        "ADJ",
                                        "ADP",
                                        "ADV",
                                        "AUX",
                                        "CONJ",
                                        "CCONJ",
                                        "DET",
                                        "INTJ",
                                        "NOUN",
                                        "NUM",
                                        "O",
                                        "PART",
                                        "PRON",
                                        "PROPN",
                                        "PUNCT",
                                        "SCONJ",
                                        "SYM",
                                        "VERB"
                                    ],
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        },
                        "Text": {
                            "description": "The word that was recognized in the source text.",
                            "minLength": 1,
                            "type": "string"
                        },
                        "TokenId": {
                            "description": "A unique identifier for a token.",
                            "type": "integer"
                        }
                    },
                    "type": "object"
                },
                "type": "array"
            },
            "ListSentimentDetectionJobsRequest": {
                "properties": {
                    "Filter": {
                        "description": "Filters the jobs that are returned. You can filter jobs on their name, status, or the date and time that they were submitted. You can only set one filter at a time.",
                        "properties": {
                            "JobName": {
                                "description": "Filters on the name of the job.",
                                "maxLength": 256,
                                "minLength": 1,
                                "pattern": "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-%@]*)$",
                                "type": "string"
                            },
                            "JobStatus": {
                                "description": "Filters the list of jobs based on job status. Returns only jobs with the specified status.",
                                "enum": [
                                    "SUBMITTED",
                                    "IN_PROGRESS",
                                    "COMPLETED",
                                    "FAILED",
                                    "STOP_REQUESTED",
                                    "STOPPED"
                                ],
                                "type": "string"
                            },
                            "SubmitTimeAfter": {
                                "description": "Filters the list of jobs based on the time that the job was submitted for processing. Returns only jobs submitted after the specified time. Jobs are returned in descending order, newest to oldest.",
                                "format": "date-time",
                                "type": "string"
                            },
                            "SubmitTimeBefore": {
                                "description": "Filters the list of jobs based on the time that the job was submitted for processing. Returns only jobs submitted before the specified time. Jobs are returned in ascending order, oldest to newest.",
                                "format": "date-time",
                                "type": "string"
                            }
                        },
                        "type": "object"
                    },
                    "MaxResults": {
                        "description": "The maximum number of results to return in each page. The default is 100.",
                        "maximum": 500,
                        "minimum": 1,
                        "type": "integer"
                    },
                    "NextToken": {
                        "description": "Identifies the next page of results to return.",
                        "minLength": 1,
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "ListSentimentDetectionJobsResponse": {
                "properties": {
                    "NextToken": {
                        "description": "Identifies the next page of results to return.",
                        "minLength": 1,
                        "type": "string"
                    },
                    "SentimentDetectionJobPropertiesList": {
                        "description": "A list containing the properties of each job that is returned.",
                        "items": {
                            "description": "Provides information about a sentiment detection job.",
                            "properties": {
                                "DataAccessRoleArn": {
                                    "description": "The Amazon Resource Name (ARN) that gives Amazon Comprehend read access to your input data.",
                                    "maxLength": 2048,
                                    "minLength": 20,
                                    "pattern": "arn:aws(-[^:]+)?:iam::[0-9]{12}:role/.+",
                                    "type": "string"
                                },
                                "EndTime": {
                                    "description": "The time that the sentiment detection job ended.",
                                    "format": "date-time",
                                    "type": "string"
                                },
                                "InputDataConfig": {
                                    "description": "The input data configuration that you supplied when you created the sentiment detection job.",
                                    "properties": {
                                        "InputFormat": {
                                            "description": "<p>Specifies how the text in an input file should be processed:</p> <ul> <li> <p> <code>ONE_DOC_PER_FILE</code> - Each file is considered a separate document. Use this option when you are processing large documents, such as newspaper articles or scientific papers.</p> </li> <li> <p> <code>ONE_DOC_PER_LINE</code> - Each line in a file is considered a separate document. Use this option when you are processing many short documents, such as text messages.</p> </li> </ul>",
                                            "enum": [
                                                "ONE_DOC_PER_FILE",
                                                "ONE_DOC_PER_LINE"
                                            ],
                                            "type": "string"
                                        },
                                        "S3Uri": {
                                            "description": "<p>The Amazon S3 URI for the input data. The URI must be in same region as the API endpoint that you are calling. The URI can point to a single input file or it can provide the prefix for a collection of data files. </p> <p>For example, if you use the URI <code>S3://bucketName/prefix</code>, if the prefix is a single file, Amazon Comprehend uses that file as input. If more than one file begins with the prefix, Amazon Comprehend uses all of them as input.</p>",
                                            "maxLength": 1024,
                                            "pattern": "s3://[a-z0-9][\\.\\-a-z0-9]{1,61}[a-z0-9](/.*)?",
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "S3Uri"
                                    ],
                                    "type": "object"
                                },
                                "JobId": {
                                    "description": "The identifier assigned to the sentiment detection job.",
                                    "maxLength": 32,
                                    "minLength": 1,
                                    "pattern": "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-%@]*)$",
                                    "type": "string"
                                },
                                "JobName": {
                                    "description": "The name that you assigned to the sentiment detection job",
                                    "maxLength": 256,
                                    "minLength": 1,
                                    "pattern": "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-%@]*)$",
                                    "type": "string"
                                },
                                "JobStatus": {
                                    "description": "The current status of the sentiment detection job. If the status is <code>FAILED</code>, the <code>Messages</code> field shows the reason for the failure.",
                                    "enum": [
                                        "SUBMITTED",
                                        "IN_PROGRESS",
                                        "COMPLETED",
                                        "FAILED",
                                        "STOP_REQUESTED",
                                        "STOPPED"
                                    ],
                                    "type": "string"
                                },
                                "LanguageCode": {
                                    "description": "The language code of the input documents.",
                                    "enum": [
                                        "en",
                                        "es",
                                        "fr",
                                        "de",
                                        "it",
                                        "pt"
                                    ],
                                    "type": "string"
                                },
                                "Message": {
                                    "description": "A description of the status of a job.",
                                    "type": "string"
                                },
                                "OutputDataConfig": {
                                    "description": "The output data configuration that you supplied when you created the sentiment detection job.",
                                    "properties": {
                                        "S3Uri": {
                                            "description": "<p>When you use the <code>OutputDataConfig</code> object with asynchronous operations, you specify the Amazon S3 location where you want to write the output data. The URI must be in the same region as the API endpoint that you are calling. The location is used as the prefix for the actual location of the output file.</p> <p>When the topic detection job is finished, the service creates an output file in a directory specific to the job. The <code>S3Uri</code> field contains the location of the output file, called <code>output.tar.gz</code>. It is a compressed archive that contains the ouput of the operation.</p>",
                                            "maxLength": 1024,
                                            "pattern": "s3://[a-z0-9][\\.\\-a-z0-9]{1,61}[a-z0-9](/.*)?",
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "S3Uri"
                                    ],
                                    "type": "object"
                                },
                                "SubmitTime": {
                                    "description": "The time that the sentiment detection job was submitted for processing.",
                                    "format": "date-time",
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        },
                        "type": "array"
                    }
                },
                "type": "object"
            },
            "ListTopicsDetectionJobsRequest": {
                "properties": {
                    "Filter": {
                        "description": "Filters the jobs that are returned. Jobs can be filtered on their name, status, or the date and time that they were submitted. You can set only one filter at a time.",
                        "properties": {
                            "JobName": {
                                "description": "<p/>",
                                "maxLength": 256,
                                "minLength": 1,
                                "pattern": "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-%@]*)$",
                                "type": "string"
                            },
                            "JobStatus": {
                                "description": "Filters the list of topic detection jobs based on job status. Returns only jobs with the specified status.",
                                "enum": [
                                    "SUBMITTED",
                                    "IN_PROGRESS",
                                    "COMPLETED",
                                    "FAILED",
                                    "STOP_REQUESTED",
                                    "STOPPED"
                                ],
                                "type": "string"
                            },
                            "SubmitTimeAfter": {
                                "description": "Filters the list of jobs based on the time that the job was submitted for processing. Only returns jobs submitted after the specified time. Jobs are returned in ascending order, oldest to newest.",
                                "format": "date-time",
                                "type": "string"
                            },
                            "SubmitTimeBefore": {
                                "description": "Filters the list of jobs based on the time that the job was submitted for processing. Only returns jobs submitted before the specified time. Jobs are returned in descending order, newest to oldest.",
                                "format": "date-time",
                                "type": "string"
                            }
                        },
                        "type": "object"
                    },
                    "MaxResults": {
                        "description": "The maximum number of results to return in each page. The default is 100.",
                        "maximum": 500,
                        "minimum": 1,
                        "type": "integer"
                    },
                    "NextToken": {
                        "description": "Identifies the next page of results to return.",
                        "minLength": 1,
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "ListTopicsDetectionJobsResponse": {
                "properties": {
                    "NextToken": {
                        "description": "Identifies the next page of results to return.",
                        "minLength": 1,
                        "type": "string"
                    },
                    "TopicsDetectionJobPropertiesList": {
                        "description": "A list containing the properties of each job that is returned.",
                        "items": {
                            "description": "Provides information about a topic detection job.",
                            "properties": {
                                "EndTime": {
                                    "description": "The time that the topic detection job was completed.",
                                    "format": "date-time",
                                    "type": "string"
                                },
                                "InputDataConfig": {
                                    "description": "The input data configuration supplied when you created the topic detection job.",
                                    "properties": {
                                        "InputFormat": {
                                            "description": "<p>Specifies how the text in an input file should be processed:</p> <ul> <li> <p> <code>ONE_DOC_PER_FILE</code> - Each file is considered a separate document. Use this option when you are processing large documents, such as newspaper articles or scientific papers.</p> </li> <li> <p> <code>ONE_DOC_PER_LINE</code> - Each line in a file is considered a separate document. Use this option when you are processing many short documents, such as text messages.</p> </li> </ul>",
                                            "enum": [
                                                "ONE_DOC_PER_FILE",
                                                "ONE_DOC_PER_LINE"
                                            ],
                                            "type": "string"
                                        },
                                        "S3Uri": {
                                            "description": "<p>The Amazon S3 URI for the input data. The URI must be in same region as the API endpoint that you are calling. The URI can point to a single input file or it can provide the prefix for a collection of data files. </p> <p>For example, if you use the URI <code>S3://bucketName/prefix</code>, if the prefix is a single file, Amazon Comprehend uses that file as input. If more than one file begins with the prefix, Amazon Comprehend uses all of them as input.</p>",
                                            "maxLength": 1024,
                                            "pattern": "s3://[a-z0-9][\\.\\-a-z0-9]{1,61}[a-z0-9](/.*)?",
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "S3Uri"
                                    ],
                                    "type": "object"
                                },
                                "JobId": {
                                    "description": "The identifier assigned to the topic detection job.",
                                    "maxLength": 32,
                                    "minLength": 1,
                                    "pattern": "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-%@]*)$",
                                    "type": "string"
                                },
                                "JobName": {
                                    "description": "The name of the topic detection job.",
                                    "maxLength": 256,
                                    "minLength": 1,
                                    "pattern": "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-%@]*)$",
                                    "type": "string"
                                },
                                "JobStatus": {
                                    "description": "The current status of the topic detection job. If the status is <code>Failed</code>, the reason for the failure is shown in the <code>Message</code> field.",
                                    "enum": [
                                        "SUBMITTED",
                                        "IN_PROGRESS",
                                        "COMPLETED",
                                        "FAILED",
                                        "STOP_REQUESTED",
                                        "STOPPED"
                                    ],
                                    "type": "string"
                                },
                                "Message": {
                                    "description": "A description for the status of a job.",
                                    "type": "string"
                                },
                                "NumberOfTopics": {
                                    "description": "The number of topics to detect supplied when you created the topic detection job. The default is 10. ",
                                    "type": "integer"
                                },
                                "OutputDataConfig": {
                                    "description": "The output data configuration supplied when you created the topic detection job.",
                                    "properties": {
                                        "S3Uri": {
                                            "description": "<p>When you use the <code>OutputDataConfig</code> object with asynchronous operations, you specify the Amazon S3 location where you want to write the output data. The URI must be in the same region as the API endpoint that you are calling. The location is used as the prefix for the actual location of the output file.</p> <p>When the topic detection job is finished, the service creates an output file in a directory specific to the job. The <code>S3Uri</code> field contains the location of the output file, called <code>output.tar.gz</code>. It is a compressed archive that contains the ouput of the operation.</p>",
                                            "maxLength": 1024,
                                            "pattern": "s3://[a-z0-9][\\.\\-a-z0-9]{1,61}[a-z0-9](/.*)?",
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "S3Uri"
                                    ],
                                    "type": "object"
                                },
                                "SubmitTime": {
                                    "description": "The time that the topic detection job was submitted for processing.",
                                    "format": "date-time",
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        },
                        "type": "array"
                    }
                },
                "type": "object"
            },
            "MaxResultsInteger": {
                "maximum": 500,
                "minimum": 1,
                "type": "integer"
            },
            "ModelStatus": {
                "enum": [
                    "SUBMITTED",
                    "TRAINING",
                    "DELETING",
                    "STOP_REQUESTED",
                    "STOPPED",
                    "IN_ERROR",
                    "TRAINED"
                ],
                "type": "string"
            },
            "NumberOfTopicsInteger": {
                "maximum": 100,
                "minimum": 1,
                "type": "integer"
            },
            "OutputDataConfig": {
                "description": "<p>Provides configuration parameters for the output of topic detection jobs.</p> <p/>",
                "properties": {
                    "S3Uri": {
                        "description": "<p>When you use the <code>OutputDataConfig</code> object with asynchronous operations, you specify the Amazon S3 location where you want to write the output data. The URI must be in the same region as the API endpoint that you are calling. The location is used as the prefix for the actual location of the output file.</p> <p>When the topic detection job is finished, the service creates an output file in a directory specific to the job. The <code>S3Uri</code> field contains the location of the output file, called <code>output.tar.gz</code>. It is a compressed archive that contains the ouput of the operation.</p>",
                        "maxLength": 1024,
                        "pattern": "s3://[a-z0-9][\\.\\-a-z0-9]{1,61}[a-z0-9](/.*)?",
                        "type": "string"
                    }
                },
                "required": [
                    "S3Uri"
                ],
                "type": "object"
            },
            "PartOfSpeechTag": {
                "description": "Identifies the part of speech represented by the token and gives the confidence that Amazon Comprehend has that the part of speech was correctly identified. For more information about the parts of speech that Amazon Comprehend can identify, see <a>how-syntax</a>.",
                "properties": {
                    "Score": {
                        "description": "The confidence that Amazon Comprehend has that the part of speech was correctly identified.",
                        "format": "float",
                        "type": "number"
                    },
                    "Tag": {
                        "description": "Identifies the part of speech that the token represents.",
                        "enum": [
                            "ADJ",
                            "ADP",
                            "ADV",
                            "AUX",
                            "CONJ",
                            "CCONJ",
                            "DET",
                            "INTJ",
                            "NOUN",
                            "NUM",
                            "O",
                            "PART",
                            "PRON",
                            "PROPN",
                            "PUNCT",
                            "SCONJ",
                            "SYM",
                            "VERB"
                        ],
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "PartOfSpeechTagType": {
                "enum": [
                    "ADJ",
                    "ADP",
                    "ADV",
                    "AUX",
                    "CONJ",
                    "CCONJ",
                    "DET",
                    "INTJ",
                    "NOUN",
                    "NUM",
                    "O",
                    "PART",
                    "PRON",
                    "PROPN",
                    "PUNCT",
                    "SCONJ",
                    "SYM",
                    "VERB"
                ],
                "type": "string"
            },
            "ResourceInUseException": {},
            "ResourceLimitExceededException": {},
            "ResourceNotFoundException": {},
            "ResourceUnavailableException": {},
            "S3Uri": {
                "maxLength": 1024,
                "pattern": "s3://[a-z0-9][\\.\\-a-z0-9]{1,61}[a-z0-9](/.*)?",
                "type": "string"
            },
            "SentimentDetectionJobFilter": {
                "description": "Provides information for filtering a list of dominant language detection jobs. For more information, see the operation.",
                "properties": {
                    "JobName": {
                        "description": "Filters on the name of the job.",
                        "maxLength": 256,
                        "minLength": 1,
                        "pattern": "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-%@]*)$",
                        "type": "string"
                    },
                    "JobStatus": {
                        "description": "Filters the list of jobs based on job status. Returns only jobs with the specified status.",
                        "enum": [
                            "SUBMITTED",
                            "IN_PROGRESS",
                            "COMPLETED",
                            "FAILED",
                            "STOP_REQUESTED",
                            "STOPPED"
                        ],
                        "type": "string"
                    },
                    "SubmitTimeAfter": {
                        "description": "Filters the list of jobs based on the time that the job was submitted for processing. Returns only jobs submitted after the specified time. Jobs are returned in descending order, newest to oldest.",
                        "format": "date-time",
                        "type": "string"
                    },
                    "SubmitTimeBefore": {
                        "description": "Filters the list of jobs based on the time that the job was submitted for processing. Returns only jobs submitted before the specified time. Jobs are returned in ascending order, oldest to newest.",
                        "format": "date-time",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "SentimentDetectionJobProperties": {
                "description": "Provides information about a sentiment detection job.",
                "properties": {
                    "DataAccessRoleArn": {
                        "description": "The Amazon Resource Name (ARN) that gives Amazon Comprehend read access to your input data.",
                        "maxLength": 2048,
                        "minLength": 20,
                        "pattern": "arn:aws(-[^:]+)?:iam::[0-9]{12}:role/.+",
                        "type": "string"
                    },
                    "EndTime": {
                        "description": "The time that the sentiment detection job ended.",
                        "format": "date-time",
                        "type": "string"
                    },
                    "InputDataConfig": {
                        "description": "The input data configuration that you supplied when you created the sentiment detection job.",
                        "properties": {
                            "InputFormat": {
                                "description": "<p>Specifies how the text in an input file should be processed:</p> <ul> <li> <p> <code>ONE_DOC_PER_FILE</code> - Each file is considered a separate document. Use this option when you are processing large documents, such as newspaper articles or scientific papers.</p> </li> <li> <p> <code>ONE_DOC_PER_LINE</code> - Each line in a file is considered a separate document. Use this option when you are processing many short documents, such as text messages.</p> </li> </ul>",
                                "enum": [
                                    "ONE_DOC_PER_FILE",
                                    "ONE_DOC_PER_LINE"
                                ],
                                "type": "string"
                            },
                            "S3Uri": {
                                "description": "<p>The Amazon S3 URI for the input data. The URI must be in same region as the API endpoint that you are calling. The URI can point to a single input file or it can provide the prefix for a collection of data files. </p> <p>For example, if you use the URI <code>S3://bucketName/prefix</code>, if the prefix is a single file, Amazon Comprehend uses that file as input. If more than one file begins with the prefix, Amazon Comprehend uses all of them as input.</p>",
                                "maxLength": 1024,
                                "pattern": "s3://[a-z0-9][\\.\\-a-z0-9]{1,61}[a-z0-9](/.*)?",
                                "type": "string"
                            }
                        },
                        "required": [
                            "S3Uri"
                        ],
                        "type": "object"
                    },
                    "JobId": {
                        "description": "The identifier assigned to the sentiment detection job.",
                        "maxLength": 32,
                        "minLength": 1,
                        "pattern": "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-%@]*)$",
                        "type": "string"
                    },
                    "JobName": {
                        "description": "The name that you assigned to the sentiment detection job",
                        "maxLength": 256,
                        "minLength": 1,
                        "pattern": "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-%@]*)$",
                        "type": "string"
                    },
                    "JobStatus": {
                        "description": "The current status of the sentiment detection job. If the status is <code>FAILED</code>, the <code>Messages</code> field shows the reason for the failure.",
                        "enum": [
                            "SUBMITTED",
                            "IN_PROGRESS",
                            "COMPLETED",
                            "FAILED",
                            "STOP_REQUESTED",
                            "STOPPED"
                        ],
                        "type": "string"
                    },
                    "LanguageCode": {
                        "description": "The language code of the input documents.",
                        "enum": [
                            "en",
                            "es",
                            "fr",
                            "de",
                            "it",
                            "pt"
                        ],
                        "type": "string"
                    },
                    "Message": {
                        "description": "A description of the status of a job.",
                        "type": "string"
                    },
                    "OutputDataConfig": {
                        "description": "The output data configuration that you supplied when you created the sentiment detection job.",
                        "properties": {
                            "S3Uri": {
                                "description": "<p>When you use the <code>OutputDataConfig</code> object with asynchronous operations, you specify the Amazon S3 location where you want to write the output data. The URI must be in the same region as the API endpoint that you are calling. The location is used as the prefix for the actual location of the output file.</p> <p>When the topic detection job is finished, the service creates an output file in a directory specific to the job. The <code>S3Uri</code> field contains the location of the output file, called <code>output.tar.gz</code>. It is a compressed archive that contains the ouput of the operation.</p>",
                                "maxLength": 1024,
                                "pattern": "s3://[a-z0-9][\\.\\-a-z0-9]{1,61}[a-z0-9](/.*)?",
                                "type": "string"
                            }
                        },
                        "required": [
                            "S3Uri"
                        ],
                        "type": "object"
                    },
                    "SubmitTime": {
                        "description": "The time that the sentiment detection job was submitted for processing.",
                        "format": "date-time",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "SentimentDetectionJobPropertiesList": {
                "items": {
                    "description": "Provides information about a sentiment detection job.",
                    "properties": {
                        "DataAccessRoleArn": {
                            "description": "The Amazon Resource Name (ARN) that gives Amazon Comprehend read access to your input data.",
                            "maxLength": 2048,
                            "minLength": 20,
                            "pattern": "arn:aws(-[^:]+)?:iam::[0-9]{12}:role/.+",
                            "type": "string"
                        },
                        "EndTime": {
                            "description": "The time that the sentiment detection job ended.",
                            "format": "date-time",
                            "type": "string"
                        },
                        "InputDataConfig": {
                            "description": "The input data configuration that you supplied when you created the sentiment detection job.",
                            "properties": {
                                "InputFormat": {
                                    "description": "<p>Specifies how the text in an input file should be processed:</p> <ul> <li> <p> <code>ONE_DOC_PER_FILE</code> - Each file is considered a separate document. Use this option when you are processing large documents, such as newspaper articles or scientific papers.</p> </li> <li> <p> <code>ONE_DOC_PER_LINE</code> - Each line in a file is considered a separate document. Use this option when you are processing many short documents, such as text messages.</p> </li> </ul>",
                                    "enum": [
                                        "ONE_DOC_PER_FILE",
                                        "ONE_DOC_PER_LINE"
                                    ],
                                    "type": "string"
                                },
                                "S3Uri": {
                                    "description": "<p>The Amazon S3 URI for the input data. The URI must be in same region as the API endpoint that you are calling. The URI can point to a single input file or it can provide the prefix for a collection of data files. </p> <p>For example, if you use the URI <code>S3://bucketName/prefix</code>, if the prefix is a single file, Amazon Comprehend uses that file as input. If more than one file begins with the prefix, Amazon Comprehend uses all of them as input.</p>",
                                    "maxLength": 1024,
                                    "pattern": "s3://[a-z0-9][\\.\\-a-z0-9]{1,61}[a-z0-9](/.*)?",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "S3Uri"
                            ],
                            "type": "object"
                        },
                        "JobId": {
                            "description": "The identifier assigned to the sentiment detection job.",
                            "maxLength": 32,
                            "minLength": 1,
                            "pattern": "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-%@]*)$",
                            "type": "string"
                        },
                        "JobName": {
                            "description": "The name that you assigned to the sentiment detection job",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-%@]*)$",
                            "type": "string"
                        },
                        "JobStatus": {
                            "description": "The current status of the sentiment detection job. If the status is <code>FAILED</code>, the <code>Messages</code> field shows the reason for the failure.",
                            "enum": [
                                "SUBMITTED",
                                "IN_PROGRESS",
                                "COMPLETED",
                                "FAILED",
                                "STOP_REQUESTED",
                                "STOPPED"
                            ],
                            "type": "string"
                        },
                        "LanguageCode": {
                            "description": "The language code of the input documents.",
                            "enum": [
                                "en",
                                "es",
                                "fr",
                                "de",
                                "it",
                                "pt"
                            ],
                            "type": "string"
                        },
                        "Message": {
                            "description": "A description of the status of a job.",
                            "type": "string"
                        },
                        "OutputDataConfig": {
                            "description": "The output data configuration that you supplied when you created the sentiment detection job.",
                            "properties": {
                                "S3Uri": {
                                    "description": "<p>When you use the <code>OutputDataConfig</code> object with asynchronous operations, you specify the Amazon S3 location where you want to write the output data. The URI must be in the same region as the API endpoint that you are calling. The location is used as the prefix for the actual location of the output file.</p> <p>When the topic detection job is finished, the service creates an output file in a directory specific to the job. The <code>S3Uri</code> field contains the location of the output file, called <code>output.tar.gz</code>. It is a compressed archive that contains the ouput of the operation.</p>",
                                    "maxLength": 1024,
                                    "pattern": "s3://[a-z0-9][\\.\\-a-z0-9]{1,61}[a-z0-9](/.*)?",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "S3Uri"
                            ],
                            "type": "object"
                        },
                        "SubmitTime": {
                            "description": "The time that the sentiment detection job was submitted for processing.",
                            "format": "date-time",
                            "type": "string"
                        }
                    },
                    "type": "object"
                },
                "type": "array"
            },
            "SentimentScore": {
                "description": "Describes the level of confidence that Amazon Comprehend has in the accuracy of its detection of sentiments.",
                "properties": {
                    "Mixed": {
                        "description": "The level of confidence that Amazon Comprehend has in the accuracy of its detection of the <code>MIXED</code> sentiment.",
                        "format": "float",
                        "type": "number"
                    },
                    "Negative": {
                        "description": "The level of confidence that Amazon Comprehend has in the accuracy of its detection of the <code>NEGATIVE</code> sentiment.",
                        "format": "float",
                        "type": "number"
                    },
                    "Neutral": {
                        "description": "The level of confidence that Amazon Comprehend has in the accuracy of its detection of the <code>NEUTRAL</code> sentiment.",
                        "format": "float",
                        "type": "number"
                    },
                    "Positive": {
                        "description": "The level of confidence that Amazon Comprehend has in the accuracy of its detection of the <code>POSITIVE</code> sentiment.",
                        "format": "float",
                        "type": "number"
                    }
                },
                "type": "object"
            },
            "SentimentType": {
                "enum": [
                    "POSITIVE",
                    "NEGATIVE",
                    "NEUTRAL",
                    "MIXED"
                ],
                "type": "string"
            },
            "StartDocumentClassificationJobRequest": {
                "properties": {
                    "ClientRequestToken": {
                        "description": "A unique identifier for the request. If you do not set the client request token, Amazon Comprehend generates one.",
                        "maxLength": 64,
                        "minLength": 1,
                        "pattern": "^[a-zA-Z0-9-]+$",
                        "type": "string"
                    },
                    "DataAccessRoleArn": {
                        "description": "The Amazon Resource Name (ARN) of the AWS Identity and Access Management (IAM) role that grants Amazon Comprehend read access to your input data.",
                        "maxLength": 2048,
                        "minLength": 20,
                        "pattern": "arn:aws(-[^:]+)?:iam::[0-9]{12}:role/.+",
                        "type": "string"
                    },
                    "DocumentClassifierArn": {
                        "description": "The Amazon Resource Name (ARN) of the document classifier to use to process the job.",
                        "maxLength": 256,
                        "pattern": "arn:aws:comprehend:[a-zA-Z0-9-]*:[0-9]{12}:document-classifier/[a-zA-Z0-9](-*[a-zA-Z0-9])*",
                        "type": "string"
                    },
                    "InputDataConfig": {
                        "description": "Specifies the format and location of the input data for the job.",
                        "properties": {
                            "InputFormat": {
                                "description": "<p>Specifies how the text in an input file should be processed:</p> <ul> <li> <p> <code>ONE_DOC_PER_FILE</code> - Each file is considered a separate document. Use this option when you are processing large documents, such as newspaper articles or scientific papers.</p> </li> <li> <p> <code>ONE_DOC_PER_LINE</code> - Each line in a file is considered a separate document. Use this option when you are processing many short documents, such as text messages.</p> </li> </ul>",
                                "enum": [
                                    "ONE_DOC_PER_FILE",
                                    "ONE_DOC_PER_LINE"
                                ],
                                "type": "string"
                            },
                            "S3Uri": {
                                "description": "<p>The Amazon S3 URI for the input data. The URI must be in same region as the API endpoint that you are calling. The URI can point to a single input file or it can provide the prefix for a collection of data files. </p> <p>For example, if you use the URI <code>S3://bucketName/prefix</code>, if the prefix is a single file, Amazon Comprehend uses that file as input. If more than one file begins with the prefix, Amazon Comprehend uses all of them as input.</p>",
                                "maxLength": 1024,
                                "pattern": "s3://[a-z0-9][\\.\\-a-z0-9]{1,61}[a-z0-9](/.*)?",
                                "type": "string"
                            }
                        },
                        "required": [
                            "S3Uri"
                        ],
                        "type": "object"
                    },
                    "JobName": {
                        "description": "The identifier of the job.",
                        "maxLength": 256,
                        "minLength": 1,
                        "pattern": "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-%@]*)$",
                        "type": "string"
                    },
                    "OutputDataConfig": {
                        "description": "Specifies where to send the output files.",
                        "properties": {
                            "S3Uri": {
                                "description": "<p>When you use the <code>OutputDataConfig</code> object with asynchronous operations, you specify the Amazon S3 location where you want to write the output data. The URI must be in the same region as the API endpoint that you are calling. The location is used as the prefix for the actual location of the output file.</p> <p>When the topic detection job is finished, the service creates an output file in a directory specific to the job. The <code>S3Uri</code> field contains the location of the output file, called <code>output.tar.gz</code>. It is a compressed archive that contains the ouput of the operation.</p>",
                                "maxLength": 1024,
                                "pattern": "s3://[a-z0-9][\\.\\-a-z0-9]{1,61}[a-z0-9](/.*)?",
                                "type": "string"
                            }
                        },
                        "required": [
                            "S3Uri"
                        ],
                        "type": "object"
                    }
                },
                "required": [
                    "DocumentClassifierArn",
                    "InputDataConfig",
                    "OutputDataConfig",
                    "DataAccessRoleArn"
                ],
                "type": "object"
            },
            "StartDocumentClassificationJobResponse": {
                "properties": {
                    "JobId": {
                        "description": "The identifier generated for the job. To get the status of the job, use this identifier with the operation.",
                        "maxLength": 32,
                        "minLength": 1,
                        "pattern": "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-%@]*)$",
                        "type": "string"
                    },
                    "JobStatus": {
                        "description": "<p>The status of the job:</p> <ul> <li> <p>SUBMITTED - The job has been received and queued for processing.</p> </li> <li> <p>IN_PROGRESS - Amazon Comprehend is processing the job.</p> </li> <li> <p>COMPLETED - The job was successfully completed and the output is available.</p> </li> <li> <p>FAILED - The job did not complete. For details, use the operation.</p> </li> <li> <p>STOP_REQUESTED - Amazon Comprehend has received a stop request for the job and is processing the request.</p> </li> <li> <p>STOPPED - The job was successfully stopped without completing.</p> </li> </ul>",
                        "enum": [
                            "SUBMITTED",
                            "IN_PROGRESS",
                            "COMPLETED",
                            "FAILED",
                            "STOP_REQUESTED",
                            "STOPPED"
                        ],
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "StartDominantLanguageDetectionJobRequest": {
                "properties": {
                    "ClientRequestToken": {
                        "description": "A unique identifier for the request. If you do not set the client request token, Amazon Comprehend generates one.",
                        "maxLength": 64,
                        "minLength": 1,
                        "pattern": "^[a-zA-Z0-9-]+$",
                        "type": "string"
                    },
                    "DataAccessRoleArn": {
                        "description": "The Amazon Resource Name (ARN) of the AWS Identity and Access Management (IAM) role that grants Amazon Comprehend read access to your input data. For more information, see <a href=\"https://docs.aws.amazon.com/comprehend/latest/dg/access-control-managing-permissions.html#auth-role-permissions\">https://docs.aws.amazon.com/comprehend/latest/dg/access-control-managing-permissions.html#auth-role-permissions</a>.",
                        "maxLength": 2048,
                        "minLength": 20,
                        "pattern": "arn:aws(-[^:]+)?:iam::[0-9]{12}:role/.+",
                        "type": "string"
                    },
                    "InputDataConfig": {
                        "description": "Specifies the format and location of the input data for the job.",
                        "properties": {
                            "InputFormat": {
                                "description": "<p>Specifies how the text in an input file should be processed:</p> <ul> <li> <p> <code>ONE_DOC_PER_FILE</code> - Each file is considered a separate document. Use this option when you are processing large documents, such as newspaper articles or scientific papers.</p> </li> <li> <p> <code>ONE_DOC_PER_LINE</code> - Each line in a file is considered a separate document. Use this option when you are processing many short documents, such as text messages.</p> </li> </ul>",
                                "enum": [
                                    "ONE_DOC_PER_FILE",
                                    "ONE_DOC_PER_LINE"
                                ],
                                "type": "string"
                            },
                            "S3Uri": {
                                "description": "<p>The Amazon S3 URI for the input data. The URI must be in same region as the API endpoint that you are calling. The URI can point to a single input file or it can provide the prefix for a collection of data files. </p> <p>For example, if you use the URI <code>S3://bucketName/prefix</code>, if the prefix is a single file, Amazon Comprehend uses that file as input. If more than one file begins with the prefix, Amazon Comprehend uses all of them as input.</p>",
                                "maxLength": 1024,
                                "pattern": "s3://[a-z0-9][\\.\\-a-z0-9]{1,61}[a-z0-9](/.*)?",
                                "type": "string"
                            }
                        },
                        "required": [
                            "S3Uri"
                        ],
                        "type": "object"
                    },
                    "JobName": {
                        "description": "An identifier for the job.",
                        "maxLength": 256,
                        "minLength": 1,
                        "pattern": "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-%@]*)$",
                        "type": "string"
                    },
                    "OutputDataConfig": {
                        "description": "Specifies where to send the output files.",
                        "properties": {
                            "S3Uri": {
                                "description": "<p>When you use the <code>OutputDataConfig</code> object with asynchronous operations, you specify the Amazon S3 location where you want to write the output data. The URI must be in the same region as the API endpoint that you are calling. The location is used as the prefix for the actual location of the output file.</p> <p>When the topic detection job is finished, the service creates an output file in a directory specific to the job. The <code>S3Uri</code> field contains the location of the output file, called <code>output.tar.gz</code>. It is a compressed archive that contains the ouput of the operation.</p>",
                                "maxLength": 1024,
                                "pattern": "s3://[a-z0-9][\\.\\-a-z0-9]{1,61}[a-z0-9](/.*)?",
                                "type": "string"
                            }
                        },
                        "required": [
                            "S3Uri"
                        ],
                        "type": "object"
                    }
                },
                "required": [
                    "InputDataConfig",
                    "OutputDataConfig",
                    "DataAccessRoleArn"
                ],
                "type": "object"
            },
            "StartDominantLanguageDetectionJobResponse": {
                "properties": {
                    "JobId": {
                        "description": "The identifier generated for the job. To get the status of a job, use this identifier with the operation.",
                        "maxLength": 32,
                        "minLength": 1,
                        "pattern": "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-%@]*)$",
                        "type": "string"
                    },
                    "JobStatus": {
                        "description": "<p>The status of the job. </p> <ul> <li> <p>SUBMITTED - The job has been received and is queued for processing.</p> </li> <li> <p>IN_PROGRESS - Amazon Comprehend is processing the job.</p> </li> <li> <p>COMPLETED - The job was successfully completed and the output is available.</p> </li> <li> <p>FAILED - The job did not complete. To get details, use the operation.</p> </li> </ul>",
                        "enum": [
                            "SUBMITTED",
                            "IN_PROGRESS",
                            "COMPLETED",
                            "FAILED",
                            "STOP_REQUESTED",
                            "STOPPED"
                        ],
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "StartEntitiesDetectionJobRequest": {
                "properties": {
                    "ClientRequestToken": {
                        "description": "A unique identifier for the request. If you don't set the client request token, Amazon Comprehend generates one.",
                        "maxLength": 64,
                        "minLength": 1,
                        "pattern": "^[a-zA-Z0-9-]+$",
                        "type": "string"
                    },
                    "DataAccessRoleArn": {
                        "description": "The Amazon Resource Name (ARN) of the AWS Identity and Access Management (IAM) role that grants Amazon Comprehend read access to your input data. For more information, see <a href=\"https://docs.aws.amazon.com/comprehend/latest/dg/access-control-managing-permissions.html#auth-role-permissions\">https://docs.aws.amazon.com/comprehend/latest/dg/access-control-managing-permissions.html#auth-role-permissions</a>.",
                        "maxLength": 2048,
                        "minLength": 20,
                        "pattern": "arn:aws(-[^:]+)?:iam::[0-9]{12}:role/.+",
                        "type": "string"
                    },
                    "EntityRecognizerArn": {
                        "description": "The Amazon Resource Name (ARN) that identifies the specific entity recognizer to be used by the <code>StartEntitiesDetectionJob</code>. This ARN is optional and is only used for a custom entity recognition job.",
                        "maxLength": 256,
                        "pattern": "arn:aws:comprehend:[a-zA-Z0-9-]*:[0-9]{12}:entity-recognizer/[a-zA-Z0-9](-*[a-zA-Z0-9])*",
                        "type": "string"
                    },
                    "InputDataConfig": {
                        "description": "Specifies the format and location of the input data for the job.",
                        "properties": {
                            "InputFormat": {
                                "description": "<p>Specifies how the text in an input file should be processed:</p> <ul> <li> <p> <code>ONE_DOC_PER_FILE</code> - Each file is considered a separate document. Use this option when you are processing large documents, such as newspaper articles or scientific papers.</p> </li> <li> <p> <code>ONE_DOC_PER_LINE</code> - Each line in a file is considered a separate document. Use this option when you are processing many short documents, such as text messages.</p> </li> </ul>",
                                "enum": [
                                    "ONE_DOC_PER_FILE",
                                    "ONE_DOC_PER_LINE"
                                ],
                                "type": "string"
                            },
                            "S3Uri": {
                                "description": "<p>The Amazon S3 URI for the input data. The URI must be in same region as the API endpoint that you are calling. The URI can point to a single input file or it can provide the prefix for a collection of data files. </p> <p>For example, if you use the URI <code>S3://bucketName/prefix</code>, if the prefix is a single file, Amazon Comprehend uses that file as input. If more than one file begins with the prefix, Amazon Comprehend uses all of them as input.</p>",
                                "maxLength": 1024,
                                "pattern": "s3://[a-z0-9][\\.\\-a-z0-9]{1,61}[a-z0-9](/.*)?",
                                "type": "string"
                            }
                        },
                        "required": [
                            "S3Uri"
                        ],
                        "type": "object"
                    },
                    "JobName": {
                        "description": "The identifier of the job.",
                        "maxLength": 256,
                        "minLength": 1,
                        "pattern": "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-%@]*)$",
                        "type": "string"
                    },
                    "LanguageCode": {
                        "description": "The language of the input documents. All documents must be in the same language. You can specify any of the languages supported by Amazon Comprehend: English (\"en\"), Spanish (\"es\"), French (\"fr\"), German (\"de\"), Italian (\"it\"), or Portuguese (\"pt\"). If custom entities recognition is used, this parameter is ignored and the language used for training the model is used instead.",
                        "enum": [
                            "en",
                            "es",
                            "fr",
                            "de",
                            "it",
                            "pt"
                        ],
                        "type": "string"
                    },
                    "OutputDataConfig": {
                        "description": "Specifies where to send the output files.",
                        "properties": {
                            "S3Uri": {
                                "description": "<p>When you use the <code>OutputDataConfig</code> object with asynchronous operations, you specify the Amazon S3 location where you want to write the output data. The URI must be in the same region as the API endpoint that you are calling. The location is used as the prefix for the actual location of the output file.</p> <p>When the topic detection job is finished, the service creates an output file in a directory specific to the job. The <code>S3Uri</code> field contains the location of the output file, called <code>output.tar.gz</code>. It is a compressed archive that contains the ouput of the operation.</p>",
                                "maxLength": 1024,
                                "pattern": "s3://[a-z0-9][\\.\\-a-z0-9]{1,61}[a-z0-9](/.*)?",
                                "type": "string"
                            }
                        },
                        "required": [
                            "S3Uri"
                        ],
                        "type": "object"
                    }
                },
                "required": [
                    "InputDataConfig",
                    "OutputDataConfig",
                    "DataAccessRoleArn",
                    "LanguageCode"
                ],
                "type": "object"
            },
            "StartEntitiesDetectionJobResponse": {
                "properties": {
                    "JobId": {
                        "description": "The identifier generated for the job. To get the status of job, use this identifier with the operation.",
                        "maxLength": 32,
                        "minLength": 1,
                        "pattern": "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-%@]*)$",
                        "type": "string"
                    },
                    "JobStatus": {
                        "description": "<p>The status of the job. </p> <ul> <li> <p>SUBMITTED - The job has been received and is queued for processing.</p> </li> <li> <p>IN_PROGRESS - Amazon Comprehend is processing the job.</p> </li> <li> <p>COMPLETED - The job was successfully completed and the output is available.</p> </li> <li> <p>FAILED - The job did not complete. To get details, use the operation.</p> </li> <li> <p>STOP_REQUESTED - Amazon Comprehend has received a stop request for the job and is processing the request.</p> </li> <li> <p>STOPPED - The job was successfully stopped without completing.</p> </li> </ul>",
                        "enum": [
                            "SUBMITTED",
                            "IN_PROGRESS",
                            "COMPLETED",
                            "FAILED",
                            "STOP_REQUESTED",
                            "STOPPED"
                        ],
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "StartKeyPhrasesDetectionJobRequest": {
                "properties": {
                    "ClientRequestToken": {
                        "description": "A unique identifier for the request. If you don't set the client request token, Amazon Comprehend generates one.",
                        "maxLength": 64,
                        "minLength": 1,
                        "pattern": "^[a-zA-Z0-9-]+$",
                        "type": "string"
                    },
                    "DataAccessRoleArn": {
                        "description": "The Amazon Resource Name (ARN) of the AWS Identity and Access Management (IAM) role that grants Amazon Comprehend read access to your input data. For more information, see <a href=\"https://docs.aws.amazon.com/comprehend/latest/dg/access-control-managing-permissions.html#auth-role-permissions\">https://docs.aws.amazon.com/comprehend/latest/dg/access-control-managing-permissions.html#auth-role-permissions</a>.",
                        "maxLength": 2048,
                        "minLength": 20,
                        "pattern": "arn:aws(-[^:]+)?:iam::[0-9]{12}:role/.+",
                        "type": "string"
                    },
                    "InputDataConfig": {
                        "description": "Specifies the format and location of the input data for the job.",
                        "properties": {
                            "InputFormat": {
                                "description": "<p>Specifies how the text in an input file should be processed:</p> <ul> <li> <p> <code>ONE_DOC_PER_FILE</code> - Each file is considered a separate document. Use this option when you are processing large documents, such as newspaper articles or scientific papers.</p> </li> <li> <p> <code>ONE_DOC_PER_LINE</code> - Each line in a file is considered a separate document. Use this option when you are processing many short documents, such as text messages.</p> </li> </ul>",
                                "enum": [
                                    "ONE_DOC_PER_FILE",
                                    "ONE_DOC_PER_LINE"
                                ],
                                "type": "string"
                            },
                            "S3Uri": {
                                "description": "<p>The Amazon S3 URI for the input data. The URI must be in same region as the API endpoint that you are calling. The URI can point to a single input file or it can provide the prefix for a collection of data files. </p> <p>For example, if you use the URI <code>S3://bucketName/prefix</code>, if the prefix is a single file, Amazon Comprehend uses that file as input. If more than one file begins with the prefix, Amazon Comprehend uses all of them as input.</p>",
                                "maxLength": 1024,
                                "pattern": "s3://[a-z0-9][\\.\\-a-z0-9]{1,61}[a-z0-9](/.*)?",
                                "type": "string"
                            }
                        },
                        "required": [
                            "S3Uri"
                        ],
                        "type": "object"
                    },
                    "JobName": {
                        "description": "The identifier of the job.",
                        "maxLength": 256,
                        "minLength": 1,
                        "pattern": "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-%@]*)$",
                        "type": "string"
                    },
                    "LanguageCode": {
                        "description": "The language of the input documents. You can specify English (\"en\") or Spanish (\"es\"). All documents must be in the same language.",
                        "enum": [
                            "en",
                            "es",
                            "fr",
                            "de",
                            "it",
                            "pt"
                        ],
                        "type": "string"
                    },
                    "OutputDataConfig": {
                        "description": "Specifies where to send the output files.",
                        "properties": {
                            "S3Uri": {
                                "description": "<p>When you use the <code>OutputDataConfig</code> object with asynchronous operations, you specify the Amazon S3 location where you want to write the output data. The URI must be in the same region as the API endpoint that you are calling. The location is used as the prefix for the actual location of the output file.</p> <p>When the topic detection job is finished, the service creates an output file in a directory specific to the job. The <code>S3Uri</code> field contains the location of the output file, called <code>output.tar.gz</code>. It is a compressed archive that contains the ouput of the operation.</p>",
                                "maxLength": 1024,
                                "pattern": "s3://[a-z0-9][\\.\\-a-z0-9]{1,61}[a-z0-9](/.*)?",
                                "type": "string"
                            }
                        },
                        "required": [
                            "S3Uri"
                        ],
                        "type": "object"
                    }
                },
                "required": [
                    "InputDataConfig",
                    "OutputDataConfig",
                    "DataAccessRoleArn",
                    "LanguageCode"
                ],
                "type": "object"
            },
            "StartKeyPhrasesDetectionJobResponse": {
                "properties": {
                    "JobId": {
                        "description": "The identifier generated for the job. To get the status of a job, use this identifier with the operation.",
                        "maxLength": 32,
                        "minLength": 1,
                        "pattern": "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-%@]*)$",
                        "type": "string"
                    },
                    "JobStatus": {
                        "description": "<p>The status of the job. </p> <ul> <li> <p>SUBMITTED - The job has been received and is queued for processing.</p> </li> <li> <p>IN_PROGRESS - Amazon Comprehend is processing the job.</p> </li> <li> <p>COMPLETED - The job was successfully completed and the output is available.</p> </li> <li> <p>FAILED - The job did not complete. To get details, use the operation.</p> </li> </ul>",
                        "enum": [
                            "SUBMITTED",
                            "IN_PROGRESS",
                            "COMPLETED",
                            "FAILED",
                            "STOP_REQUESTED",
                            "STOPPED"
                        ],
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "StartSentimentDetectionJobRequest": {
                "properties": {
                    "ClientRequestToken": {
                        "description": "A unique identifier for the request. If you don't set the client request token, Amazon Comprehend generates one.",
                        "maxLength": 64,
                        "minLength": 1,
                        "pattern": "^[a-zA-Z0-9-]+$",
                        "type": "string"
                    },
                    "DataAccessRoleArn": {
                        "description": "The Amazon Resource Name (ARN) of the AWS Identity and Access Management (IAM) role that grants Amazon Comprehend read access to your input data. For more information, see <a href=\"https://docs.aws.amazon.com/comprehend/latest/dg/access-control-managing-permissions.html#auth-role-permissions\">https://docs.aws.amazon.com/comprehend/latest/dg/access-control-managing-permissions.html#auth-role-permissions</a>.",
                        "maxLength": 2048,
                        "minLength": 20,
                        "pattern": "arn:aws(-[^:]+)?:iam::[0-9]{12}:role/.+",
                        "type": "string"
                    },
                    "InputDataConfig": {
                        "description": "Specifies the format and location of the input data for the job.",
                        "properties": {
                            "InputFormat": {
                                "description": "<p>Specifies how the text in an input file should be processed:</p> <ul> <li> <p> <code>ONE_DOC_PER_FILE</code> - Each file is considered a separate document. Use this option when you are processing large documents, such as newspaper articles or scientific papers.</p> </li> <li> <p> <code>ONE_DOC_PER_LINE</code> - Each line in a file is considered a separate document. Use this option when you are processing many short documents, such as text messages.</p> </li> </ul>",
                                "enum": [
                                    "ONE_DOC_PER_FILE",
                                    "ONE_DOC_PER_LINE"
                                ],
                                "type": "string"
                            },
                            "S3Uri": {
                                "description": "<p>The Amazon S3 URI for the input data. The URI must be in same region as the API endpoint that you are calling. The URI can point to a single input file or it can provide the prefix for a collection of data files. </p> <p>For example, if you use the URI <code>S3://bucketName/prefix</code>, if the prefix is a single file, Amazon Comprehend uses that file as input. If more than one file begins with the prefix, Amazon Comprehend uses all of them as input.</p>",
                                "maxLength": 1024,
                                "pattern": "s3://[a-z0-9][\\.\\-a-z0-9]{1,61}[a-z0-9](/.*)?",
                                "type": "string"
                            }
                        },
                        "required": [
                            "S3Uri"
                        ],
                        "type": "object"
                    },
                    "JobName": {
                        "description": "The identifier of the job.",
                        "maxLength": 256,
                        "minLength": 1,
                        "pattern": "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-%@]*)$",
                        "type": "string"
                    },
                    "LanguageCode": {
                        "description": "The language of the input documents. You can specify English (\"en\") or Spanish (\"es\"). All documents must be in the same language.",
                        "enum": [
                            "en",
                            "es",
                            "fr",
                            "de",
                            "it",
                            "pt"
                        ],
                        "type": "string"
                    },
                    "OutputDataConfig": {
                        "description": "Specifies where to send the output files. ",
                        "properties": {
                            "S3Uri": {
                                "description": "<p>When you use the <code>OutputDataConfig</code> object with asynchronous operations, you specify the Amazon S3 location where you want to write the output data. The URI must be in the same region as the API endpoint that you are calling. The location is used as the prefix for the actual location of the output file.</p> <p>When the topic detection job is finished, the service creates an output file in a directory specific to the job. The <code>S3Uri</code> field contains the location of the output file, called <code>output.tar.gz</code>. It is a compressed archive that contains the ouput of the operation.</p>",
                                "maxLength": 1024,
                                "pattern": "s3://[a-z0-9][\\.\\-a-z0-9]{1,61}[a-z0-9](/.*)?",
                                "type": "string"
                            }
                        },
                        "required": [
                            "S3Uri"
                        ],
                        "type": "object"
                    }
                },
                "required": [
                    "InputDataConfig",
                    "OutputDataConfig",
                    "DataAccessRoleArn",
                    "LanguageCode"
                ],
                "type": "object"
            },
            "StartSentimentDetectionJobResponse": {
                "properties": {
                    "JobId": {
                        "description": "The identifier generated for the job. To get the status of a job, use this identifier with the operation.",
                        "maxLength": 32,
                        "minLength": 1,
                        "pattern": "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-%@]*)$",
                        "type": "string"
                    },
                    "JobStatus": {
                        "description": "<p>The status of the job. </p> <ul> <li> <p>SUBMITTED - The job has been received and is queued for processing.</p> </li> <li> <p>IN_PROGRESS - Amazon Comprehend is processing the job.</p> </li> <li> <p>COMPLETED - The job was successfully completed and the output is available.</p> </li> <li> <p>FAILED - The job did not complete. To get details, use the operation.</p> </li> </ul>",
                        "enum": [
                            "SUBMITTED",
                            "IN_PROGRESS",
                            "COMPLETED",
                            "FAILED",
                            "STOP_REQUESTED",
                            "STOPPED"
                        ],
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "StartTopicsDetectionJobRequest": {
                "properties": {
                    "ClientRequestToken": {
                        "description": "A unique identifier for the request. If you do not set the client request token, Amazon Comprehend generates one.",
                        "maxLength": 64,
                        "minLength": 1,
                        "pattern": "^[a-zA-Z0-9-]+$",
                        "type": "string"
                    },
                    "DataAccessRoleArn": {
                        "description": "The Amazon Resource Name (ARN) of the AWS Identity and Access Management (IAM) role that grants Amazon Comprehend read access to your input data. For more information, see <a href=\"https://docs.aws.amazon.com/comprehend/latest/dg/access-control-managing-permissions.html#auth-role-permissions\">https://docs.aws.amazon.com/comprehend/latest/dg/access-control-managing-permissions.html#auth-role-permissions</a>.",
                        "maxLength": 2048,
                        "minLength": 20,
                        "pattern": "arn:aws(-[^:]+)?:iam::[0-9]{12}:role/.+",
                        "type": "string"
                    },
                    "InputDataConfig": {
                        "description": "Specifies the format and location of the input data for the job.",
                        "properties": {
                            "InputFormat": {
                                "description": "<p>Specifies how the text in an input file should be processed:</p> <ul> <li> <p> <code>ONE_DOC_PER_FILE</code> - Each file is considered a separate document. Use this option when you are processing large documents, such as newspaper articles or scientific papers.</p> </li> <li> <p> <code>ONE_DOC_PER_LINE</code> - Each line in a file is considered a separate document. Use this option when you are processing many short documents, such as text messages.</p> </li> </ul>",
                                "enum": [
                                    "ONE_DOC_PER_FILE",
                                    "ONE_DOC_PER_LINE"
                                ],
                                "type": "string"
                            },
                            "S3Uri": {
                                "description": "<p>The Amazon S3 URI for the input data. The URI must be in same region as the API endpoint that you are calling. The URI can point to a single input file or it can provide the prefix for a collection of data files. </p> <p>For example, if you use the URI <code>S3://bucketName/prefix</code>, if the prefix is a single file, Amazon Comprehend uses that file as input. If more than one file begins with the prefix, Amazon Comprehend uses all of them as input.</p>",
                                "maxLength": 1024,
                                "pattern": "s3://[a-z0-9][\\.\\-a-z0-9]{1,61}[a-z0-9](/.*)?",
                                "type": "string"
                            }
                        },
                        "required": [
                            "S3Uri"
                        ],
                        "type": "object"
                    },
                    "JobName": {
                        "description": "The identifier of the job.",
                        "maxLength": 256,
                        "minLength": 1,
                        "pattern": "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-%@]*)$",
                        "type": "string"
                    },
                    "NumberOfTopics": {
                        "description": "The number of topics to detect.",
                        "maximum": 100,
                        "minimum": 1,
                        "type": "integer"
                    },
                    "OutputDataConfig": {
                        "description": "Specifies where to send the output files. The output is a compressed archive with two files, <code>topic-terms.csv</code> that lists the terms associated with each topic, and <code>doc-topics.csv</code> that lists the documents associated with each topic",
                        "properties": {
                            "S3Uri": {
                                "description": "<p>When you use the <code>OutputDataConfig</code> object with asynchronous operations, you specify the Amazon S3 location where you want to write the output data. The URI must be in the same region as the API endpoint that you are calling. The location is used as the prefix for the actual location of the output file.</p> <p>When the topic detection job is finished, the service creates an output file in a directory specific to the job. The <code>S3Uri</code> field contains the location of the output file, called <code>output.tar.gz</code>. It is a compressed archive that contains the ouput of the operation.</p>",
                                "maxLength": 1024,
                                "pattern": "s3://[a-z0-9][\\.\\-a-z0-9]{1,61}[a-z0-9](/.*)?",
                                "type": "string"
                            }
                        },
                        "required": [
                            "S3Uri"
                        ],
                        "type": "object"
                    }
                },
                "required": [
                    "InputDataConfig",
                    "OutputDataConfig",
                    "DataAccessRoleArn"
                ],
                "type": "object"
            },
            "StartTopicsDetectionJobResponse": {
                "properties": {
                    "JobId": {
                        "description": "The identifier generated for the job. To get the status of the job, use this identifier with the <code>DescribeTopicDetectionJob</code> operation.",
                        "maxLength": 32,
                        "minLength": 1,
                        "pattern": "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-%@]*)$",
                        "type": "string"
                    },
                    "JobStatus": {
                        "description": "<p>The status of the job: </p> <ul> <li> <p>SUBMITTED - The job has been received and is queued for processing.</p> </li> <li> <p>IN_PROGRESS - Amazon Comprehend is processing the job.</p> </li> <li> <p>COMPLETED - The job was successfully completed and the output is available.</p> </li> <li> <p>FAILED - The job did not complete. To get details, use the <code>DescribeTopicDetectionJob</code> operation.</p> </li> </ul>",
                        "enum": [
                            "SUBMITTED",
                            "IN_PROGRESS",
                            "COMPLETED",
                            "FAILED",
                            "STOP_REQUESTED",
                            "STOPPED"
                        ],
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "StopDominantLanguageDetectionJobRequest": {
                "properties": {
                    "JobId": {
                        "description": "The identifier of the dominant language detection job to stop.",
                        "maxLength": 32,
                        "minLength": 1,
                        "pattern": "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-%@]*)$",
                        "type": "string"
                    }
                },
                "required": [
                    "JobId"
                ],
                "type": "object"
            },
            "StopDominantLanguageDetectionJobResponse": {
                "properties": {
                    "JobId": {
                        "description": "The identifier of the dominant language detection job to stop.",
                        "maxLength": 32,
                        "minLength": 1,
                        "pattern": "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-%@]*)$",
                        "type": "string"
                    },
                    "JobStatus": {
                        "description": "Either <code>STOP_REQUESTED</code> if the job is currently running, or <code>STOPPED</code> if the job was previously stopped with the <code>StopDominantLanguageDetectionJob</code> operation.",
                        "enum": [
                            "SUBMITTED",
                            "IN_PROGRESS",
                            "COMPLETED",
                            "FAILED",
                            "STOP_REQUESTED",
                            "STOPPED"
                        ],
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "StopEntitiesDetectionJobRequest": {
                "properties": {
                    "JobId": {
                        "description": "The identifier of the entities detection job to stop.",
                        "maxLength": 32,
                        "minLength": 1,
                        "pattern": "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-%@]*)$",
                        "type": "string"
                    }
                },
                "required": [
                    "JobId"
                ],
                "type": "object"
            },
            "StopEntitiesDetectionJobResponse": {
                "properties": {
                    "JobId": {
                        "description": "The identifier of the entities detection job to stop.",
                        "maxLength": 32,
                        "minLength": 1,
                        "pattern": "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-%@]*)$",
                        "type": "string"
                    },
                    "JobStatus": {
                        "description": "Either <code>STOP_REQUESTED</code> if the job is currently running, or <code>STOPPED</code> if the job was previously stopped with the <code>StopEntitiesDetectionJob</code> operation.",
                        "enum": [
                            "SUBMITTED",
                            "IN_PROGRESS",
                            "COMPLETED",
                            "FAILED",
                            "STOP_REQUESTED",
                            "STOPPED"
                        ],
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "StopKeyPhrasesDetectionJobRequest": {
                "properties": {
                    "JobId": {
                        "description": "The identifier of the key phrases detection job to stop.",
                        "maxLength": 32,
                        "minLength": 1,
                        "pattern": "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-%@]*)$",
                        "type": "string"
                    }
                },
                "required": [
                    "JobId"
                ],
                "type": "object"
            },
            "StopKeyPhrasesDetectionJobResponse": {
                "properties": {
                    "JobId": {
                        "description": "The identifier of the key phrases detection job to stop.",
                        "maxLength": 32,
                        "minLength": 1,
                        "pattern": "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-%@]*)$",
                        "type": "string"
                    },
                    "JobStatus": {
                        "description": "Either <code>STOP_REQUESTED</code> if the job is currently running, or <code>STOPPED</code> if the job was previously stopped with the <code>StopKeyPhrasesDetectionJob</code> operation.",
                        "enum": [
                            "SUBMITTED",
                            "IN_PROGRESS",
                            "COMPLETED",
                            "FAILED",
                            "STOP_REQUESTED",
                            "STOPPED"
                        ],
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "StopSentimentDetectionJobRequest": {
                "properties": {
                    "JobId": {
                        "description": "The identifier of the sentiment detection job to stop.",
                        "maxLength": 32,
                        "minLength": 1,
                        "pattern": "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-%@]*)$",
                        "type": "string"
                    }
                },
                "required": [
                    "JobId"
                ],
                "type": "object"
            },
            "StopSentimentDetectionJobResponse": {
                "properties": {
                    "JobId": {
                        "description": "The identifier of the sentiment detection job to stop.",
                        "maxLength": 32,
                        "minLength": 1,
                        "pattern": "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-%@]*)$",
                        "type": "string"
                    },
                    "JobStatus": {
                        "description": "Either <code>STOP_REQUESTED</code> if the job is currently running, or <code>STOPPED</code> if the job was previously stopped with the <code>StopSentimentDetectionJob</code> operation.",
                        "enum": [
                            "SUBMITTED",
                            "IN_PROGRESS",
                            "COMPLETED",
                            "FAILED",
                            "STOP_REQUESTED",
                            "STOPPED"
                        ],
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "StopTrainingDocumentClassifierRequest": {
                "properties": {
                    "DocumentClassifierArn": {
                        "description": "The Amazon Resource Name (ARN) that identifies the document classifier currently being trained.",
                        "maxLength": 256,
                        "pattern": "arn:aws:comprehend:[a-zA-Z0-9-]*:[0-9]{12}:document-classifier/[a-zA-Z0-9](-*[a-zA-Z0-9])*",
                        "type": "string"
                    }
                },
                "required": [
                    "DocumentClassifierArn"
                ],
                "type": "object"
            },
            "StopTrainingDocumentClassifierResponse": {
                "properties": {},
                "type": "object"
            },
            "StopTrainingEntityRecognizerRequest": {
                "properties": {
                    "EntityRecognizerArn": {
                        "description": "The Amazon Resource Name (ARN) that identifies the entity recognizer currently being trained.",
                        "maxLength": 256,
                        "pattern": "arn:aws:comprehend:[a-zA-Z0-9-]*:[0-9]{12}:entity-recognizer/[a-zA-Z0-9](-*[a-zA-Z0-9])*",
                        "type": "string"
                    }
                },
                "required": [
                    "EntityRecognizerArn"
                ],
                "type": "object"
            },
            "StopTrainingEntityRecognizerResponse": {
                "properties": {},
                "type": "object"
            },
            "String": {
                "minLength": 1,
                "type": "string"
            },
            "StringList": {
                "items": {
                    "minLength": 1,
                    "type": "string"
                },
                "type": "array"
            },
            "SyntaxLanguageCode": {
                "enum": [
                    "en",
                    "es",
                    "fr",
                    "de",
                    "it",
                    "pt"
                ],
                "type": "string"
            },
            "SyntaxToken": {
                "description": "Represents a work in the input text that was recognized and assigned a part of speech. There is one syntax token record for each word in the source text.",
                "properties": {
                    "BeginOffset": {
                        "description": "The zero-based offset from the beginning of the source text to the first character in the word.",
                        "type": "integer"
                    },
                    "EndOffset": {
                        "description": "The zero-based offset from the beginning of the source text to the last character in the word.",
                        "type": "integer"
                    },
                    "PartOfSpeech": {
                        "description": "Provides the part of speech label and the confidence level that Amazon Comprehend has that the part of speech was correctly identified. For more information, see <a>how-syntax</a>.",
                        "properties": {
                            "Score": {
                                "description": "The confidence that Amazon Comprehend has that the part of speech was correctly identified.",
                                "format": "float",
                                "type": "number"
                            },
                            "Tag": {
                                "description": "Identifies the part of speech that the token represents.",
                                "enum": [
                                    "ADJ",
                                    "ADP",
                                    "ADV",
                                    "AUX",
                                    "CONJ",
                                    "CCONJ",
                                    "DET",
                                    "INTJ",
                                    "NOUN",
                                    "NUM",
                                    "O",
                                    "PART",
                                    "PRON",
                                    "PROPN",
                                    "PUNCT",
                                    "SCONJ",
                                    "SYM",
                                    "VERB"
                                ],
                                "type": "string"
                            }
                        },
                        "type": "object"
                    },
                    "Text": {
                        "description": "The word that was recognized in the source text.",
                        "minLength": 1,
                        "type": "string"
                    },
                    "TokenId": {
                        "description": "A unique identifier for a token.",
                        "type": "integer"
                    }
                },
                "type": "object"
            },
            "TextSizeLimitExceededException": {},
            "Timestamp": {
                "format": "date-time",
                "type": "string"
            },
            "TooManyRequestsException": {},
            "TopicsDetectionJobFilter": {
                "description": "Provides information for filtering topic detection jobs. For more information, see .",
                "properties": {
                    "JobName": {
                        "description": "<p/>",
                        "maxLength": 256,
                        "minLength": 1,
                        "pattern": "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-%@]*)$",
                        "type": "string"
                    },
                    "JobStatus": {
                        "description": "Filters the list of topic detection jobs based on job status. Returns only jobs with the specified status.",
                        "enum": [
                            "SUBMITTED",
                            "IN_PROGRESS",
                            "COMPLETED",
                            "FAILED",
                            "STOP_REQUESTED",
                            "STOPPED"
                        ],
                        "type": "string"
                    },
                    "SubmitTimeAfter": {
                        "description": "Filters the list of jobs based on the time that the job was submitted for processing. Only returns jobs submitted after the specified time. Jobs are returned in ascending order, oldest to newest.",
                        "format": "date-time",
                        "type": "string"
                    },
                    "SubmitTimeBefore": {
                        "description": "Filters the list of jobs based on the time that the job was submitted for processing. Only returns jobs submitted before the specified time. Jobs are returned in descending order, newest to oldest.",
                        "format": "date-time",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "TopicsDetectionJobProperties": {
                "description": "Provides information about a topic detection job.",
                "properties": {
                    "EndTime": {
                        "description": "The time that the topic detection job was completed.",
                        "format": "date-time",
                        "type": "string"
                    },
                    "InputDataConfig": {
                        "description": "The input data configuration supplied when you created the topic detection job.",
                        "properties": {
                            "InputFormat": {
                                "description": "<p>Specifies how the text in an input file should be processed:</p> <ul> <li> <p> <code>ONE_DOC_PER_FILE</code> - Each file is considered a separate document. Use this option when you are processing large documents, such as newspaper articles or scientific papers.</p> </li> <li> <p> <code>ONE_DOC_PER_LINE</code> - Each line in a file is considered a separate document. Use this option when you are processing many short documents, such as text messages.</p> </li> </ul>",
                                "enum": [
                                    "ONE_DOC_PER_FILE",
                                    "ONE_DOC_PER_LINE"
                                ],
                                "type": "string"
                            },
                            "S3Uri": {
                                "description": "<p>The Amazon S3 URI for the input data. The URI must be in same region as the API endpoint that you are calling. The URI can point to a single input file or it can provide the prefix for a collection of data files. </p> <p>For example, if you use the URI <code>S3://bucketName/prefix</code>, if the prefix is a single file, Amazon Comprehend uses that file as input. If more than one file begins with the prefix, Amazon Comprehend uses all of them as input.</p>",
                                "maxLength": 1024,
                                "pattern": "s3://[a-z0-9][\\.\\-a-z0-9]{1,61}[a-z0-9](/.*)?",
                                "type": "string"
                            }
                        },
                        "required": [
                            "S3Uri"
                        ],
                        "type": "object"
                    },
                    "JobId": {
                        "description": "The identifier assigned to the topic detection job.",
                        "maxLength": 32,
                        "minLength": 1,
                        "pattern": "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-%@]*)$",
                        "type": "string"
                    },
                    "JobName": {
                        "description": "The name of the topic detection job.",
                        "maxLength": 256,
                        "minLength": 1,
                        "pattern": "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-%@]*)$",
                        "type": "string"
                    },
                    "JobStatus": {
                        "description": "The current status of the topic detection job. If the status is <code>Failed</code>, the reason for the failure is shown in the <code>Message</code> field.",
                        "enum": [
                            "SUBMITTED",
                            "IN_PROGRESS",
                            "COMPLETED",
                            "FAILED",
                            "STOP_REQUESTED",
                            "STOPPED"
                        ],
                        "type": "string"
                    },
                    "Message": {
                        "description": "A description for the status of a job.",
                        "type": "string"
                    },
                    "NumberOfTopics": {
                        "description": "The number of topics to detect supplied when you created the topic detection job. The default is 10. ",
                        "type": "integer"
                    },
                    "OutputDataConfig": {
                        "description": "The output data configuration supplied when you created the topic detection job.",
                        "properties": {
                            "S3Uri": {
                                "description": "<p>When you use the <code>OutputDataConfig</code> object with asynchronous operations, you specify the Amazon S3 location where you want to write the output data. The URI must be in the same region as the API endpoint that you are calling. The location is used as the prefix for the actual location of the output file.</p> <p>When the topic detection job is finished, the service creates an output file in a directory specific to the job. The <code>S3Uri</code> field contains the location of the output file, called <code>output.tar.gz</code>. It is a compressed archive that contains the ouput of the operation.</p>",
                                "maxLength": 1024,
                                "pattern": "s3://[a-z0-9][\\.\\-a-z0-9]{1,61}[a-z0-9](/.*)?",
                                "type": "string"
                            }
                        },
                        "required": [
                            "S3Uri"
                        ],
                        "type": "object"
                    },
                    "SubmitTime": {
                        "description": "The time that the topic detection job was submitted for processing.",
                        "format": "date-time",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "TopicsDetectionJobPropertiesList": {
                "items": {
                    "description": "Provides information about a topic detection job.",
                    "properties": {
                        "EndTime": {
                            "description": "The time that the topic detection job was completed.",
                            "format": "date-time",
                            "type": "string"
                        },
                        "InputDataConfig": {
                            "description": "The input data configuration supplied when you created the topic detection job.",
                            "properties": {
                                "InputFormat": {
                                    "description": "<p>Specifies how the text in an input file should be processed:</p> <ul> <li> <p> <code>ONE_DOC_PER_FILE</code> - Each file is considered a separate document. Use this option when you are processing large documents, such as newspaper articles or scientific papers.</p> </li> <li> <p> <code>ONE_DOC_PER_LINE</code> - Each line in a file is considered a separate document. Use this option when you are processing many short documents, such as text messages.</p> </li> </ul>",
                                    "enum": [
                                        "ONE_DOC_PER_FILE",
                                        "ONE_DOC_PER_LINE"
                                    ],
                                    "type": "string"
                                },
                                "S3Uri": {
                                    "description": "<p>The Amazon S3 URI for the input data. The URI must be in same region as the API endpoint that you are calling. The URI can point to a single input file or it can provide the prefix for a collection of data files. </p> <p>For example, if you use the URI <code>S3://bucketName/prefix</code>, if the prefix is a single file, Amazon Comprehend uses that file as input. If more than one file begins with the prefix, Amazon Comprehend uses all of them as input.</p>",
                                    "maxLength": 1024,
                                    "pattern": "s3://[a-z0-9][\\.\\-a-z0-9]{1,61}[a-z0-9](/.*)?",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "S3Uri"
                            ],
                            "type": "object"
                        },
                        "JobId": {
                            "description": "The identifier assigned to the topic detection job.",
                            "maxLength": 32,
                            "minLength": 1,
                            "pattern": "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-%@]*)$",
                            "type": "string"
                        },
                        "JobName": {
                            "description": "The name of the topic detection job.",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-%@]*)$",
                            "type": "string"
                        },
                        "JobStatus": {
                            "description": "The current status of the topic detection job. If the status is <code>Failed</code>, the reason for the failure is shown in the <code>Message</code> field.",
                            "enum": [
                                "SUBMITTED",
                                "IN_PROGRESS",
                                "COMPLETED",
                                "FAILED",
                                "STOP_REQUESTED",
                                "STOPPED"
                            ],
                            "type": "string"
                        },
                        "Message": {
                            "description": "A description for the status of a job.",
                            "type": "string"
                        },
                        "NumberOfTopics": {
                            "description": "The number of topics to detect supplied when you created the topic detection job. The default is 10. ",
                            "type": "integer"
                        },
                        "OutputDataConfig": {
                            "description": "The output data configuration supplied when you created the topic detection job.",
                            "properties": {
                                "S3Uri": {
                                    "description": "<p>When you use the <code>OutputDataConfig</code> object with asynchronous operations, you specify the Amazon S3 location where you want to write the output data. The URI must be in the same region as the API endpoint that you are calling. The location is used as the prefix for the actual location of the output file.</p> <p>When the topic detection job is finished, the service creates an output file in a directory specific to the job. The <code>S3Uri</code> field contains the location of the output file, called <code>output.tar.gz</code>. It is a compressed archive that contains the ouput of the operation.</p>",
                                    "maxLength": 1024,
                                    "pattern": "s3://[a-z0-9][\\.\\-a-z0-9]{1,61}[a-z0-9](/.*)?",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "S3Uri"
                            ],
                            "type": "object"
                        },
                        "SubmitTime": {
                            "description": "The time that the topic detection job was submitted for processing.",
                            "format": "date-time",
                            "type": "string"
                        }
                    },
                    "type": "object"
                },
                "type": "array"
            },
            "UnsupportedLanguageException": {}
        },
        "parameters": {
            "Action": {
                "in": "query",
                "name": "Action",
                "required": true,
                "schema": {
                    "type": "string"
                }
            },
            "Version": {
                "in": "query",
                "name": "Version",
                "required": true,
                "schema": {
                    "type": "string"
                }
            },
            "X-Amz-Algorithm": {
                "in": "header",
                "name": "X-Amz-Algorithm",
                "required": false,
                "schema": {
                    "type": "string"
                }
            },
            "X-Amz-Content-Sha256": {
                "in": "header",
                "name": "X-Amz-Content-Sha256",
                "required": false,
                "schema": {
                    "type": "string"
                }
            },
            "X-Amz-Credential": {
                "in": "header",
                "name": "X-Amz-Credential",
                "required": false,
                "schema": {
                    "type": "string"
                }
            },
            "X-Amz-Date": {
                "in": "header",
                "name": "X-Amz-Date",
                "required": false,
                "schema": {
                    "type": "string"
                }
            },
            "X-Amz-Security-Token": {
                "in": "header",
                "name": "X-Amz-Security-Token",
                "required": false,
                "schema": {
                    "type": "string"
                }
            },
            "X-Amz-Signature": {
                "in": "header",
                "name": "X-Amz-Signature",
                "required": false,
                "schema": {
                    "type": "string"
                }
            },
            "X-Amz-SignedHeaders": {
                "in": "header",
                "name": "X-Amz-SignedHeaders",
                "required": false,
                "schema": {
                    "type": "string"
                }
            }
        },
        "requestBodies": {
            "BatchDetectKeyPhrasesBody": {
                "content": {
                    "application/json": {
                        "schema": {
                            "properties": {
                                "LanguageCode": {
                                    "description": "The language of the input documents. You can specify English (\"en\") or Spanish (\"es\"). All documents must be in the same language.",
                                    "enum": [
                                        "en",
                                        "es",
                                        "fr",
                                        "de",
                                        "it",
                                        "pt"
                                    ],
                                    "type": "string"
                                },
                                "TextList": {
                                    "description": "A list containing the text of the input documents. The list can contain a maximum of 25 documents. Each document must contain fewer that 5,000 bytes of UTF-8 encoded characters.",
                                    "items": {
                                        "minLength": 1,
                                        "type": "string"
                                    },
                                    "type": "array"
                                }
                            },
                            "required": [
                                "TextList",
                                "LanguageCode"
                            ],
                            "type": "object"
                        }
                    }
                },
                "required": true
            },
            "DeleteEntityRecognizerBody": {
                "content": {
                    "application/json": {
                        "schema": {
                            "properties": {
                                "EntityRecognizerArn": {
                                    "description": "The Amazon Resource Name (ARN) that identifies the entity recognizer.",
                                    "maxLength": 256,
                                    "pattern": "arn:aws:comprehend:[a-zA-Z0-9-]*:[0-9]{12}:entity-recognizer/[a-zA-Z0-9](-*[a-zA-Z0-9])*",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "EntityRecognizerArn"
                            ],
                            "type": "object"
                        }
                    }
                },
                "required": true
            },
            "DescribeDocumentClassificationJobBody": {
                "content": {
                    "application/json": {
                        "schema": {
                            "properties": {
                                "JobId": {
                                    "description": "The identifier that Amazon Comprehend generated for the job. The operation returns this identifier in its response.",
                                    "maxLength": 32,
                                    "minLength": 1,
                                    "pattern": "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-%@]*)$",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "JobId"
                            ],
                            "type": "object"
                        }
                    }
                },
                "required": true
            },
            "DetectEntitiesBody": {
                "content": {
                    "application/json": {
                        "schema": {
                            "properties": {
                                "LanguageCode": {
                                    "description": "The language of the input documents. You can specify English (\"en\") or Spanish (\"es\"). All documents must be in the same language.",
                                    "enum": [
                                        "en",
                                        "es",
                                        "fr",
                                        "de",
                                        "it",
                                        "pt"
                                    ],
                                    "type": "string"
                                },
                                "Text": {
                                    "description": "A UTF-8 text string. Each string must contain fewer that 5,000 bytes of UTF-8 encoded characters.",
                                    "minLength": 1,
                                    "type": "string"
                                }
                            },
                            "required": [
                                "Text",
                                "LanguageCode"
                            ],
                            "type": "object"
                        }
                    }
                },
                "required": true
            },
            "ListEntitiesDetectionJobsBody": {
                "content": {
                    "application/json": {
                        "schema": {
                            "properties": {
                                "Filter": {
                                    "description": "Filters the jobs that are returned. You can filter jobs on their name, status, or the date and time that they were submitted. You can only set one filter at a time.",
                                    "properties": {
                                        "JobName": {
                                            "description": "Filters on the name of the job.",
                                            "maxLength": 256,
                                            "minLength": 1,
                                            "pattern": "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-%@]*)$",
                                            "type": "string"
                                        },
                                        "JobStatus": {
                                            "description": "Filters the list of jobs based on job status. Returns only jobs with the specified status.",
                                            "enum": [
                                                "SUBMITTED",
                                                "IN_PROGRESS",
                                                "COMPLETED",
                                                "FAILED",
                                                "STOP_REQUESTED",
                                                "STOPPED"
                                            ],
                                            "type": "string"
                                        },
                                        "SubmitTimeAfter": {
                                            "description": "Filters the list of jobs based on the time that the job was submitted for processing. Returns only jobs submitted after the specified time. Jobs are returned in descending order, newest to oldest.",
                                            "format": "date-time",
                                            "type": "string"
                                        },
                                        "SubmitTimeBefore": {
                                            "description": "Filters the list of jobs based on the time that the job was submitted for processing. Returns only jobs submitted before the specified time. Jobs are returned in ascending order, oldest to newest.",
                                            "format": "date-time",
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                },
                                "MaxResults": {
                                    "description": "The maximum number of results to return in each page. The default is 100.",
                                    "maximum": 500,
                                    "minimum": 1,
                                    "type": "integer"
                                },
                                "NextToken": {
                                    "description": "Identifies the next page of results to return.",
                                    "minLength": 1,
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        }
                    }
                },
                "required": true
            }
        },
        "securitySchemes": {
            "hmac": {
                "description": "Amazon Signature authorization v4",
                "in": "header",
                "name": "Authorization",
                "type": "apiKey",
                "x-amazon-apigateway-authtype": "awsSigv4"
            }
        }
    }
}